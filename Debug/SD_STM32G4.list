
SD_STM32G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009010  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009764  08009764  0000b094  2**0
                  CONTENTS
  4 .ARM          00000008  08009764  08009764  0000a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800976c  0800976c  0000b094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800976c  0800976c  0000a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009770  08009770  0000a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08009774  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002608  20000094  08009808  0000b094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000269c  08009808  0000b69c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001311f  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3a  00000000  00000000  0001e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00020e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c17  00000000  00000000  00021df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fd  00000000  00000000  00022a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016978  00000000  00000000  0004ad04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efc2e  00000000  00000000  0006167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001512aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  001512f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00155d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	080091d8 	.word	0x080091d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	080091d8 	.word	0x080091d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc0:	f000 fd50 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc4:	f000 f924 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc8:	f000 f9ac 	bl	8000f24 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bcc:	f000 f96c 	bl	8000ea8 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000bd0:	f003 fa6e 	bl	80040b0 <MX_FATFS_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <main+0x22>
    Error_Handler();
 8000bda:	f000 f9f9 	bl	8000fd0 <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 fbac 	bl	800133c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000be4:	2101      	movs	r1, #1
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 fbde 	bl	80013a8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000bec:	4b74      	ldr	r3, [pc, #464]	@ (8000dc0 <main+0x204>)
 8000bee:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000bf4:	4b72      	ldr	r3, [pc, #456]	@ (8000dc0 <main+0x204>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000bfa:	4b71      	ldr	r3, [pc, #452]	@ (8000dc0 <main+0x204>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c00:	4b6f      	ldr	r3, [pc, #444]	@ (8000dc0 <main+0x204>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c06:	4b6e      	ldr	r3, [pc, #440]	@ (8000dc0 <main+0x204>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c0c:	496c      	ldr	r1, [pc, #432]	@ (8000dc0 <main+0x204>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 fc56 	bl	80014c0 <BSP_COM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <main+0x62>
  {
    Error_Handler();
 8000c1a:	f000 f9d9 	bl	8000fd0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	/* Wait for SD module reset */
	HAL_Delay(500);
 8000c1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c22:	f000 fd8f 	bl	8001744 <HAL_Delay>
	buff_length = sprintf(tx_buff, "Inicio de prueba\r\n");
 8000c26:	4967      	ldr	r1, [pc, #412]	@ (8000dc4 <main+0x208>)
 8000c28:	4867      	ldr	r0, [pc, #412]	@ (8000dc8 <main+0x20c>)
 8000c2a:	f007 fb4f 	bl	80082cc <siprintf>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b66      	ldr	r3, [pc, #408]	@ (8000dcc <main+0x210>)
 8000c34:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000c36:	4b65      	ldr	r3, [pc, #404]	@ (8000dcc <main+0x210>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2364      	movs	r3, #100	@ 0x64
 8000c40:	4961      	ldr	r1, [pc, #388]	@ (8000dc8 <main+0x20c>)
 8000c42:	4863      	ldr	r0, [pc, #396]	@ (8000dd0 <main+0x214>)
 8000c44:	f002 fc8a 	bl	800355c <HAL_UART_Transmit>

	/* Mount SD Card */
	if(f_mount(&fs, "", 0) != FR_OK)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4962      	ldr	r1, [pc, #392]	@ (8000dd4 <main+0x218>)
 8000c4c:	4862      	ldr	r0, [pc, #392]	@ (8000dd8 <main+0x21c>)
 8000c4e:	f006 f94f 	bl	8006ef0 <f_mount>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <main+0xa0>
		Error_Handler();
 8000c58:	f000 f9ba 	bl	8000fd0 <Error_Handler>

	/* Open file to write */
	if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8000c5c:	2213      	movs	r2, #19
 8000c5e:	495f      	ldr	r1, [pc, #380]	@ (8000ddc <main+0x220>)
 8000c60:	485f      	ldr	r0, [pc, #380]	@ (8000de0 <main+0x224>)
 8000c62:	f006 f98b 	bl	8006f7c <f_open>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <main+0xb4>
		Error_Handler();
 8000c6c:	f000 f9b0 	bl	8000fd0 <Error_Handler>

	/* Check freeSpace space */
	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8000c70:	4a5c      	ldr	r2, [pc, #368]	@ (8000de4 <main+0x228>)
 8000c72:	495d      	ldr	r1, [pc, #372]	@ (8000de8 <main+0x22c>)
 8000c74:	4857      	ldr	r0, [pc, #348]	@ (8000dd4 <main+0x218>)
 8000c76:	f006 fee4 	bl	8007a42 <f_getfree>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <main+0xc8>
		Error_Handler();
 8000c80:	f000 f9a6 	bl	8000fd0 <Error_Handler>

	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000c84:	4b57      	ldr	r3, [pc, #348]	@ (8000de4 <main+0x228>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	4a55      	ldr	r2, [pc, #340]	@ (8000de4 <main+0x228>)
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	8952      	ldrh	r2, [r2, #10]
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fd7e 	bl	8000798 <__aeabi_ui2d>
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	4b52      	ldr	r3, [pc, #328]	@ (8000dec <main+0x230>)
 8000ca2:	f7ff fb0d 	bl	80002c0 <__aeabi_dmul>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff fded 	bl	800088c <__aeabi_d2uiz>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8000df0 <main+0x234>)
 8000cb6:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000de4 <main+0x228>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	895b      	ldrh	r3, [r3, #10]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b49      	ldr	r3, [pc, #292]	@ (8000de8 <main+0x22c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fd65 	bl	8000798 <__aeabi_ui2d>
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4b46      	ldr	r3, [pc, #280]	@ (8000dec <main+0x230>)
 8000cd4:	f7ff faf4 	bl	80002c0 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff fdd4 	bl	800088c <__aeabi_d2uiz>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4a43      	ldr	r2, [pc, #268]	@ (8000df4 <main+0x238>)
 8000ce8:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(freeSpace < 1)
 8000cea:	4b42      	ldr	r3, [pc, #264]	@ (8000df4 <main+0x238>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <main+0x13a>
		Error_Handler();
 8000cf2:	f000 f96d 	bl	8000fd0 <Error_Handler>

	/* Writing text */
	f_puts("STM32 SD Card I/O Example via SPI\r\n", &fil);
 8000cf6:	493a      	ldr	r1, [pc, #232]	@ (8000de0 <main+0x224>)
 8000cf8:	483f      	ldr	r0, [pc, #252]	@ (8000df8 <main+0x23c>)
 8000cfa:	f007 f80c 	bl	8007d16 <f_puts>
	f_puts("Save the world!!!\r\n", &fil);
 8000cfe:	4938      	ldr	r1, [pc, #224]	@ (8000de0 <main+0x224>)
 8000d00:	483e      	ldr	r0, [pc, #248]	@ (8000dfc <main+0x240>)
 8000d02:	f007 f808 	bl	8007d16 <f_puts>

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8000d06:	4836      	ldr	r0, [pc, #216]	@ (8000de0 <main+0x224>)
 8000d08:	f006 fe71 	bl	80079ee <f_close>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <main+0x15a>
		Error_Handler();
 8000d12:	f000 f95d 	bl	8000fd0 <Error_Handler>

	/* Open file to read */
	if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 8000d16:	2201      	movs	r2, #1
 8000d18:	4930      	ldr	r1, [pc, #192]	@ (8000ddc <main+0x220>)
 8000d1a:	4831      	ldr	r0, [pc, #196]	@ (8000de0 <main+0x224>)
 8000d1c:	f006 f92e 	bl	8006f7c <f_open>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01e      	beq.n	8000d64 <main+0x1a8>
		Error_Handler();
 8000d26:	f000 f953 	bl	8000fd0 <Error_Handler>

	while(f_gets(buffer, sizeof(buffer), &fil))
 8000d2a:	e01b      	b.n	8000d64 <main+0x1a8>
	{
		/* SWV output */
		printf("%s", buffer);
 8000d2c:	4934      	ldr	r1, [pc, #208]	@ (8000e00 <main+0x244>)
 8000d2e:	4835      	ldr	r0, [pc, #212]	@ (8000e04 <main+0x248>)
 8000d30:	f007 faba 	bl	80082a8 <iprintf>
		fflush(stdout);
 8000d34:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <main+0x24c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f007 f9de 	bl	80080fc <fflush>
		buff_length = sprintf(tx_buff, "%s", buffer);
 8000d40:	4a2f      	ldr	r2, [pc, #188]	@ (8000e00 <main+0x244>)
 8000d42:	4930      	ldr	r1, [pc, #192]	@ (8000e04 <main+0x248>)
 8000d44:	4820      	ldr	r0, [pc, #128]	@ (8000dc8 <main+0x20c>)
 8000d46:	f007 fac1 	bl	80082cc <siprintf>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <main+0x210>)
 8000d50:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <main+0x210>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2364      	movs	r3, #100	@ 0x64
 8000d5c:	491a      	ldr	r1, [pc, #104]	@ (8000dc8 <main+0x20c>)
 8000d5e:	481c      	ldr	r0, [pc, #112]	@ (8000dd0 <main+0x214>)
 8000d60:	f002 fbfc 	bl	800355c <HAL_UART_Transmit>
	while(f_gets(buffer, sizeof(buffer), &fil))
 8000d64:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <main+0x224>)
 8000d66:	2164      	movs	r1, #100	@ 0x64
 8000d68:	4825      	ldr	r0, [pc, #148]	@ (8000e00 <main+0x244>)
 8000d6a:	f006 ff1f 	bl	8007bac <f_gets>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1db      	bne.n	8000d2c <main+0x170>
	}

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8000d74:	481a      	ldr	r0, [pc, #104]	@ (8000de0 <main+0x224>)
 8000d76:	f006 fe3a 	bl	80079ee <f_close>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <main+0x1c8>
		Error_Handler();
 8000d80:	f000 f926 	bl	8000fd0 <Error_Handler>

	/* Unmount SDCARD */
	if(f_mount(NULL, "", 1) != FR_OK)
 8000d84:	2201      	movs	r2, #1
 8000d86:	4913      	ldr	r1, [pc, #76]	@ (8000dd4 <main+0x218>)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f006 f8b1 	bl	8006ef0 <f_mount>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <main+0x1dc>
		Error_Handler();
 8000d94:	f000 f91c 	bl	8000fd0 <Error_Handler>
	buff_length = sprintf(tx_buff, "FIN de prueba\r\n");
 8000d98:	491c      	ldr	r1, [pc, #112]	@ (8000e0c <main+0x250>)
 8000d9a:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <main+0x20c>)
 8000d9c:	f007 fa96 	bl	80082cc <siprintf>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <main+0x210>)
 8000da6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <main+0x210>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	2364      	movs	r3, #100	@ 0x64
 8000db2:	4905      	ldr	r1, [pc, #20]	@ (8000dc8 <main+0x20c>)
 8000db4:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <main+0x214>)
 8000db6:	f002 fbd1 	bl	800355c <HAL_UART_Transmit>


  while (1)
 8000dba:	bf00      	nop
 8000dbc:	e7fd      	b.n	8000dba <main+0x1fe>
 8000dbe:	bf00      	nop
 8000dc0:	200000b0 	.word	0x200000b0
 8000dc4:	080091f0 	.word	0x080091f0
 8000dc8:	20002200 	.word	0x20002200
 8000dcc:	20002264 	.word	0x20002264
 8000dd0:	20002274 	.word	0x20002274
 8000dd4:	08009204 	.word	0x08009204
 8000dd8:	20000124 	.word	0x20000124
 8000ddc:	08009208 	.word	0x08009208
 8000de0:	20001160 	.word	0x20001160
 8000de4:	2000115c 	.word	0x2000115c
 8000de8:	20002190 	.word	0x20002190
 8000dec:	3fe00000 	.word	0x3fe00000
 8000df0:	20002194 	.word	0x20002194
 8000df4:	20002198 	.word	0x20002198
 8000df8:	08009214 	.word	0x08009214
 8000dfc:	08009238 	.word	0x08009238
 8000e00:	2000219c 	.word	0x2000219c
 8000e04:	0800924c 	.word	0x0800924c
 8000e08:	20000044 	.word	0x20000044
 8000e0c:	08009250 	.word	0x08009250

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b094      	sub	sp, #80	@ 0x50
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	2238      	movs	r2, #56	@ 0x38
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f007 fab7 	bl	8008392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 ffb2 	bl	8001d9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2340      	movs	r3, #64	@ 0x40
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e52:	2355      	movs	r3, #85	@ 0x55
 8000e54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f84c 	bl	8001f04 <HAL_RCC_OscConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e72:	f000 f8ad 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e76:	230f      	movs	r3, #15
 8000e78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fb4a 	bl	8002528 <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e9a:	f000 f899 	bl	8000fd0 <Error_Handler>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3750      	adds	r7, #80	@ 0x50
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <MX_SPI2_Init+0x78>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000eb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000eb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ec2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ec6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eda:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ede:	2220      	movs	r2, #32
 8000ee0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000f02:	2208      	movs	r2, #8
 8000f04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_SPI2_Init+0x74>)
 8000f08:	f001 fd2a 	bl	8002960 <HAL_SPI_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f12:	f000 f85d 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000c0 	.word	0x200000c0
 8000f20:	40003800 	.word	0x40003800

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a23      	ldr	r2, [pc, #140]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_GPIO_Init+0xa8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_S_GPIO_Port, CS_S_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa2:	f000 fee3 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_S_Pin */
  GPIO_InitStruct.Pin = CS_S_Pin;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_S_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f000 fd52 	bl	8001a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	buff_length = sprintf(tx_buff, "Error Prueba SD: \r\n");
 8000fd4:	490a      	ldr	r1, [pc, #40]	@ (8001000 <Error_Handler+0x30>)
 8000fd6:	480b      	ldr	r0, [pc, #44]	@ (8001004 <Error_Handler+0x34>)
 8000fd8:	f007 f978 	bl	80082cc <siprintf>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <Error_Handler+0x38>)
 8000fe2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <Error_Handler+0x38>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	2364      	movs	r3, #100	@ 0x64
 8000fee:	4905      	ldr	r1, [pc, #20]	@ (8001004 <Error_Handler+0x34>)
 8000ff0:	4806      	ldr	r0, [pc, #24]	@ (800100c <Error_Handler+0x3c>)
 8000ff2:	f002 fab3 	bl	800355c <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff6:	b672      	cpsid	i
}
 8000ff8:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffa:	bf00      	nop
 8000ffc:	e7fd      	b.n	8000ffa <Error_Handler+0x2a>
 8000ffe:	bf00      	nop
 8001000:	08009260 	.word	0x08009260
 8001004:	20002200 	.word	0x20002200
 8001008:	20002264 	.word	0x20002264
 800100c:	20002274 	.word	0x20002274

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6613      	str	r3, [r2, #96]	@ 0x60
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6593      	str	r3, [r2, #88]	@ 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001046:	f000 ff4d 	bl	8001ee4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <HAL_SPI_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d128      	bne.n	80010cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_SPI_MspInit+0x80>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	4a16      	ldr	r2, [pc, #88]	@ (80010d8 <HAL_SPI_MspInit+0x80>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6593      	str	r3, [r2, #88]	@ 0x58
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_SPI_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_SPI_MspInit+0x80>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_SPI_MspInit+0x80>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_SPI_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010bc:	2305      	movs	r3, #5
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_SPI_MspInit+0x84>)
 80010c8:	f000 fcce 	bl	8001a68 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	@ 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40003800 	.word	0x40003800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <SysTick_Handler+0x34>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <SysTick_Handler+0x18>
		Timer1--;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <SysTick_Handler+0x34>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <SysTick_Handler+0x34>)
 800114a:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <SysTick_Handler+0x38>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <SysTick_Handler+0x2c>
		Timer2--;
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <SysTick_Handler+0x38>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	3b01      	subs	r3, #1
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <SysTick_Handler+0x38>)
 800115e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 fad2 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20002316 	.word	0x20002316
 800116c:	20002318 	.word	0x20002318

08001170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f985 	bl	8001484 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}

0800117e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e00a      	b.n	80011a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001190:	f3af 8000 	nop.w
 8001194:	4601      	mov	r1, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	60ba      	str	r2, [r7, #8]
 800119c:	b2ca      	uxtb	r2, r1
 800119e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbf0      	blt.n	8001190 <_read+0x12>
  }

  return len;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e009      	b.n	80011de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	60ba      	str	r2, [r7, #8]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f9d6 	bl	8001584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dbf1      	blt.n	80011ca <_write+0x12>
  }
  return len;
 80011e6:	687b      	ldr	r3, [r7, #4]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_close>:

int _close(int file)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001218:	605a      	str	r2, [r3, #4]
  return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_isatty>:

int _isatty(int file)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f007 f8d2 	bl	8008430 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20020000 	.word	0x20020000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	20002268 	.word	0x20002268
 80012c0:	200026a0 	.word	0x200026a0

080012c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e8:	480d      	ldr	r0, [pc, #52]	@ (8001320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ec:	f7ff ffea 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	@ (8001328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <LoopForever+0xe>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	@ (8001334 <LoopForever+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001316:	f007 f891 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131a:	f7ff fc4f 	bl	8000bbc <main>

0800131e <LoopForever>:

LoopForever:
    b LoopForever
 800131e:	e7fe      	b.n	800131e <LoopForever>
  ldr   r0, =_estack
 8001320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800132c:	08009774 	.word	0x08009774
  ldr r2, =_sbss
 8001330:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001334:	2000269c 	.word	0x2000269c

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <BSP_LED_Init+0x64>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <BSP_LED_Init+0x64>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <BSP_LED_Init+0x64>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800135e:	2320      	movs	r3, #32
 8001360:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <BSP_LED_Init+0x68>)
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fb73 	bl	8001a68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <BSP_LED_Init+0x68>)
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	2120      	movs	r1, #32
 800138c:	2200      	movs	r2, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fcec 	bl	8001d6c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	20000004 	.word	0x20000004

080013a8 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	4613      	mov	r3, r2
 80013b6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <BSP_PB_Init+0xc4>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013bc:	4a2b      	ldr	r2, [pc, #172]	@ (800146c <BSP_PB_Init+0xc4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <BSP_PB_Init+0xc4>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80013d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a21      	ldr	r2, [pc, #132]	@ (8001470 <BSP_PB_Init+0xc8>)
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	f107 020c 	add.w	r2, r7, #12
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fb36 	bl	8001a68 <HAL_GPIO_Init>
 80013fc:	e031      	b.n	8001462 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80013fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001402:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <BSP_PB_Init+0xc8>)
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fb28 	bl	8001a68 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <BSP_PB_Init+0xcc>)
 800141e:	441a      	add	r2, r3
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4915      	ldr	r1, [pc, #84]	@ (8001478 <BSP_PB_Init+0xd0>)
 8001424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f000 fad8 	bl	80019e0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <BSP_PB_Init+0xcc>)
 8001436:	1898      	adds	r0, r3, r2
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <BSP_PB_Init+0xd4>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	461a      	mov	r2, r3
 8001442:	2100      	movs	r1, #0
 8001444:	f000 faaf 	bl	80019a6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001448:	2028      	movs	r0, #40	@ 0x28
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4a0c      	ldr	r2, [pc, #48]	@ (8001480 <BSP_PB_Init+0xd8>)
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	f000 fa72 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800145a:	2328      	movs	r3, #40	@ 0x28
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa88 	bl	8001972 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	20000008 	.word	0x20000008
 8001474:	2000226c 	.word	0x2000226c
 8001478:	080092d4 	.word	0x080092d4
 800147c:	20000010 	.word	0x20000010
 8001480:	20000014 	.word	0x20000014

08001484 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <BSP_PB_IRQHandler+0x20>)
 8001494:	4413      	add	r3, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fab6 	bl	8001a08 <HAL_EXTI_IRQHandler>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000226c 	.word	0x2000226c

080014a8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d903      	bls.n	80014de <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014d6:	f06f 0301 	mvn.w	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e018      	b.n	8001510 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2294      	movs	r2, #148	@ 0x94
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <BSP_COM_Init+0x5c>)
 80014e8:	4413      	add	r3, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f86e 	bl	80015cc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2294      	movs	r2, #148	@ 0x94
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	4a08      	ldr	r2, [pc, #32]	@ (800151c <BSP_COM_Init+0x5c>)
 80014fa:	4413      	add	r3, r2
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f80e 	bl	8001520 <MX_LPUART1_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800150a:	f06f 0303 	mvn.w	r3, #3
 800150e:	e000      	b.n	8001512 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001510:	68fb      	ldr	r3, [r7, #12]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20002274 	.word	0x20002274

08001520 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_LPUART1_Init+0x60>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	220c      	movs	r2, #12
 800153e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	895b      	ldrh	r3, [r3, #10]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	891b      	ldrh	r3, [r3, #8]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	899b      	ldrh	r3, [r3, #12]
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800156c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 ff9a 	bl	80034a8 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c

08001584 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <__io_putchar+0x30>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	2394      	movs	r3, #148	@ 0x94
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <__io_putchar+0x34>)
 800159a:	1898      	adds	r0, r3, r2
 800159c:	1d39      	adds	r1, r7, #4
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	2201      	movs	r2, #1
 80015a4:	f001 ffda 	bl	800355c <HAL_UART_Transmit>
  return ch;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20002308 	.word	0x20002308
 80015b8:	20002274 	.word	0x20002274

080015bc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ff71 	bl	80014a8 <BSP_PB_Callback>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <COM1_MspInit+0x94>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	4a21      	ldr	r2, [pc, #132]	@ (8001660 <COM1_MspInit+0x94>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <COM1_MspInit+0x94>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <COM1_MspInit+0x94>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001660 <COM1_MspInit+0x94>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <COM1_MspInit+0x94>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001604:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <COM1_MspInit+0x94>)
 8001606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001608:	4a15      	ldr	r2, [pc, #84]	@ (8001660 <COM1_MspInit+0x94>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <COM1_MspInit+0x94>)
 8001612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800161c:	2304      	movs	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001628:	2301      	movs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800162c:	230c      	movs	r3, #12
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163a:	f000 fa15 	bl	8001a68 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800163e:	2308      	movs	r3, #8
 8001640:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001646:	230c      	movs	r3, #12
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001654:	f000 fa08 	bl	8001a68 <HAL_GPIO_Init>
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166e:	2003      	movs	r0, #3
 8001670:	f000 f95a 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001674:	2000      	movs	r0, #0
 8001676:	f000 f80d 	bl	8001694 <HAL_InitTick>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	e001      	b.n	800168a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001686:	f7ff fcc3 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800168a:	79fb      	ldrb	r3, [r7, #7]

}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_InitTick+0x68>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d022      	beq.n	80016ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_InitTick+0x6c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_InitTick+0x68>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f966 	bl	800198e <HAL_SYSTICK_Config>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d809      	bhi.n	80016e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ce:	2200      	movs	r2, #0
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295
 80016d6:	f000 f932 	bl	800193e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_InitTick+0x70>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e004      	b.n	80016f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000001c 	.word	0x2000001c
 8001700:	20000000 	.word	0x20000000
 8001704:	20000018 	.word	0x20000018

08001708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_IncTick+0x1c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_IncTick+0x20>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4413      	add	r3, r2
 8001716:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <HAL_IncTick+0x1c>)
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000230c 	.word	0x2000230c
 8001728:	2000001c 	.word	0x2000001c

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000230c 	.word	0x2000230c

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d004      	beq.n	8001768 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_Delay+0x40>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001768:	bf00      	nop
 800176a:	f7ff ffdf 	bl	800172c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	429a      	cmp	r2, r3
 8001778:	d8f7      	bhi.n	800176a <HAL_Delay+0x26>
  {
  }
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000001c 	.word	0x2000001c

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	@ (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	@ (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	@ (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff40 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff33 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa4 	bl	80018e4 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019a6:	b480      	push	{r7}
 80019a8:	b087      	sub	sp, #28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	460b      	mov	r3, r1
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]
      break;
 80019c4:	e005      	b.n	80019d2 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	75fb      	strb	r3, [r7, #23]
      break;
 80019d0:	bf00      	nop
  }

  return status;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e003      	b.n	80019fc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2201      	movs	r2, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <HAL_EXTI_IRQHandler+0x5c>)
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4798      	blx	r3
    }
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40010414 	.word	0x40010414

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a76:	e15a      	b.n	8001d2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 814c 	beq.w	8001d28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d005      	beq.n	8001aa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d130      	bne.n	8001b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 0201 	and.w	r2, r3, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d017      	beq.n	8001b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d123      	bne.n	8001b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	6939      	ldr	r1, [r7, #16]
 8001b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0203 	and.w	r2, r3, #3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a6 	beq.w	8001d28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be8:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf4:	4a56      	ldr	r2, [pc, #344]	@ (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c1e:	d01f      	beq.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4c      	ldr	r2, [pc, #304]	@ (8001d54 <HAL_GPIO_Init+0x2ec>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d019      	beq.n	8001c5c <HAL_GPIO_Init+0x1f4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_GPIO_Init+0x1f0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <HAL_GPIO_Init+0x2f4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1ec>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1e8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a48      	ldr	r2, [pc, #288]	@ (8001d64 <HAL_GPIO_Init+0x2fc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1e4>
 8001c48:	2305      	movs	r3, #5
 8001c4a:	e00a      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	e008      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c50:	2304      	movs	r3, #4
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c60:	2300      	movs	r3, #0
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c72:	4937      	ldr	r1, [pc, #220]	@ (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c80:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca4:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001caa:	4b2f      	ldr	r3, [pc, #188]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cce:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d22:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <HAL_GPIO_Init+0x300>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f ae9d 	bne.w	8001a78 <HAL_GPIO_Init+0x10>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	48000c00 	.word	0x48000c00
 8001d60:	48001000 	.word	0x48001000
 8001d64:	48001400 	.word	0x48001400
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d141      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001daa:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db6:	d131      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db8:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dbe:	4a46      	ldr	r2, [pc, #280]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dd0:	4a41      	ldr	r2, [pc, #260]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2232      	movs	r2, #50	@ 0x32
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dee:	e002      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e02:	d102      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f2      	bne.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e16:	d158      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e057      	b.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e22:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e2c:	e04d      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e34:	d141      	bne.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e36:	4b28      	ldr	r3, [pc, #160]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e42:	d131      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e44:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2232      	movs	r2, #50	@ 0x32
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7a:	e002      	b.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8e:	d102      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f2      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea2:	d112      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e011      	b.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001eb8:	e007      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ec8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef2:	6093      	str	r3, [r2, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40007000 	.word	0x40007000

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e2fe      	b.n	8002514 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d075      	beq.n	800200e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4b97      	ldr	r3, [pc, #604]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4b94      	ldr	r3, [pc, #592]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x44>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	4b8d      	ldr	r3, [pc, #564]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05b      	beq.n	800200c <HAL_RCC_OscConfig+0x108>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d157      	bne.n	800200c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e2d9      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x74>
 8001f6a:	4b85      	ldr	r3, [pc, #532]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a84      	ldr	r2, [pc, #528]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0xb0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x98>
 8001f82:	4b7f      	ldr	r3, [pc, #508]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7e      	ldr	r2, [pc, #504]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7b      	ldr	r2, [pc, #492]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xb0>
 8001f9c:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a77      	ldr	r2, [pc, #476]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b75      	ldr	r3, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a74      	ldr	r2, [pc, #464]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fbb6 	bl	800172c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fbb2 	bl	800172c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e29e      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xc0>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fba2 	bl	800172c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fb9e 	bl	800172c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	@ 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e28a      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffe:	4b60      	ldr	r3, [pc, #384]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0xe8>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d075      	beq.n	8002106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b59      	ldr	r3, [pc, #356]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b56      	ldr	r3, [pc, #344]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d102      	bne.n	800203a <HAL_RCC_OscConfig+0x136>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d002      	beq.n	8002040 <HAL_RCC_OscConfig+0x13c>
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11f      	bne.n	8002080 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	4b4f      	ldr	r3, [pc, #316]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x154>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e25d      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b49      	ldr	r3, [pc, #292]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	4946      	ldr	r1, [pc, #280]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800206c:	4b45      	ldr	r3, [pc, #276]	@ (8002184 <HAL_RCC_OscConfig+0x280>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fb0f 	bl	8001694 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d043      	beq.n	8002104 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e249      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b3d      	ldr	r3, [pc, #244]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3c      	ldr	r2, [pc, #240]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fb4a 	bl	800172c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fb46 	bl	800172c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e232      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	061b      	lsls	r3, r3, #24
 80020c8:	492d      	ldr	r1, [pc, #180]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e01a      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff fb26 	bl	800172c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff fb22 	bl	800172c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e20e      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1e0>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d041      	beq.n	8002196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01c      	beq.n	8002154 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211a:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 800211c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002120:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7ff faff 	bl	800172c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002132:	f7ff fafb 	bl	800172c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1e7      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002144:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCC_OscConfig+0x22e>
 8002152:	e020      	b.n	8002196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <HAL_RCC_OscConfig+0x27c>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff fae2 	bl	800172c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216a:	e00d      	b.n	8002188 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff fade 	bl	800172c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d906      	bls.n	8002188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1ca      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002188:	4b8c      	ldr	r3, [pc, #560]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ea      	bne.n	800216c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a6 	beq.w	80022f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021a8:	4b84      	ldr	r3, [pc, #528]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x2b6>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	4a7e      	ldr	r2, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ca:	4b7c      	ldr	r3, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021da:	4b79      	ldr	r3, [pc, #484]	@ (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e6:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	@ (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7ff fa9b 	bl	800172c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7ff fa97 	bl	800172c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e183      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220c:	4b6c      	ldr	r3, [pc, #432]	@ (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d108      	bne.n	8002232 <HAL_RCC_OscConfig+0x32e>
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002230:	e024      	b.n	800227c <HAL_RCC_OscConfig+0x378>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d110      	bne.n	800225c <HAL_RCC_OscConfig+0x358>
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	4a5e      	ldr	r2, [pc, #376]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800224a:	4b5c      	ldr	r3, [pc, #368]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002250:	4a5a      	ldr	r2, [pc, #360]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800225a:	e00f      	b.n	800227c <HAL_RCC_OscConfig+0x378>
 800225c:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002262:	4a56      	ldr	r2, [pc, #344]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	4a52      	ldr	r2, [pc, #328]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7ff fa52 	bl	800172c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff fa4e 	bl	800172c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e138      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b46      	ldr	r3, [pc, #280]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ed      	beq.n	800228c <HAL_RCC_OscConfig+0x388>
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7ff fa3b 	bl	800172c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7ff fa37 	bl	800172c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e121      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d0:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b35      	ldr	r3, [pc, #212]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002304:	4b2d      	ldr	r3, [pc, #180]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800230a:	4a2c      	ldr	r2, [pc, #176]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff fa0a 	bl	800172c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800231c:	f7ff fa06 	bl	800172c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0f2      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800232e:	4b23      	ldr	r3, [pc, #140]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x418>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800233e:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002344:	4a1d      	ldr	r2, [pc, #116]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7ff f9ed 	bl	800172c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002356:	f7ff f9e9 	bl	800172c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0d5      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80c9 	beq.w	8002512 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b0c      	cmp	r3, #12
 800238a:	f000 8083 	beq.w	8002494 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d15e      	bne.n	8002454 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a08      	ldr	r2, [pc, #32]	@ (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800239c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7ff f9c3 	bl	800172c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	e00c      	b.n	80023c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff f9bf 	bl	800172c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d905      	bls.n	80023c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0ab      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c4:	4b55      	ldr	r3, [pc, #340]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ec      	bne.n	80023aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d0:	4b52      	ldr	r3, [pc, #328]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b52      	ldr	r3, [pc, #328]	@ (8002520 <HAL_RCC_OscConfig+0x61c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6a11      	ldr	r1, [r2, #32]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023e0:	3a01      	subs	r2, #1
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	4311      	orrs	r1, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80023ea:	0212      	lsls	r2, r2, #8
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023f2:	0852      	lsrs	r2, r2, #1
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0552      	lsls	r2, r2, #21
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023fe:	0852      	lsrs	r2, r2, #1
 8002400:	3a01      	subs	r2, #1
 8002402:	0652      	lsls	r2, r2, #25
 8002404:	4311      	orrs	r1, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800240a:	06d2      	lsls	r2, r2, #27
 800240c:	430a      	orrs	r2, r1
 800240e:	4943      	ldr	r1, [pc, #268]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b41      	ldr	r3, [pc, #260]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a40      	ldr	r2, [pc, #256]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002420:	4b3e      	ldr	r3, [pc, #248]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a3d      	ldr	r2, [pc, #244]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff f97e 	bl	800172c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7ff f97a 	bl	800172c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e066      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	4b35      	ldr	r3, [pc, #212]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x530>
 8002452:	e05e      	b.n	8002512 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b31      	ldr	r3, [pc, #196]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a30      	ldr	r2, [pc, #192]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff f964 	bl	800172c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff f960 	bl	800172c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e04c      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247a:	4b28      	ldr	r3, [pc, #160]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002486:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4924      	ldr	r1, [pc, #144]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 800248c:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <HAL_RCC_OscConfig+0x620>)
 800248e:	4013      	ands	r3, r2
 8002490:	60cb      	str	r3, [r1, #12]
 8002492:	e03e      	b.n	8002512 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e039      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_RCC_OscConfig+0x618>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d12c      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	3b01      	subs	r3, #1
 80024c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d123      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11b      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d113      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d109      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	3b01      	subs	r3, #1
 8002508:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	019f800c 	.word	0x019f800c
 8002524:	feeefffc 	.word	0xfeeefffc

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e11e      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b91      	ldr	r3, [pc, #580]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b8e      	ldr	r3, [pc, #568]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	498c      	ldr	r1, [pc, #560]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b8a      	ldr	r3, [pc, #552]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e106      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d073      	beq.n	8002664 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d129      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002584:	4b81      	ldr	r3, [pc, #516]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0f4      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002594:	f000 f99e 	bl	80028d4 <RCC_GetSysClockFreqFromPLLSource>
 8002598:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4a7c      	ldr	r2, [pc, #496]	@ (8002790 <HAL_RCC_ClockConfig+0x268>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d93f      	bls.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025a2:	4b7a      	ldr	r3, [pc, #488]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d033      	beq.n	8002622 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d12f      	bne.n	8002622 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025c2:	4b72      	ldr	r3, [pc, #456]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ca:	4a70      	ldr	r2, [pc, #448]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80025cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e024      	b.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e0:	4b6a      	ldr	r3, [pc, #424]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0c6      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0be      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002600:	f000 f8ce 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8002604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a61      	ldr	r2, [pc, #388]	@ (8002790 <HAL_RCC_ClockConfig+0x268>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d909      	bls.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800260e:	4b5f      	ldr	r3, [pc, #380]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002616:	4a5d      	ldr	r2, [pc, #372]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800261c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b5a      	ldr	r3, [pc, #360]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4957      	ldr	r1, [pc, #348]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7ff f87a 	bl	800172c <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7ff f876 	bl	800172c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e095      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b43      	ldr	r3, [pc, #268]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a42      	ldr	r2, [pc, #264]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002682:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002686:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002694:	4b3d      	ldr	r3, [pc, #244]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800269c:	4a3b      	ldr	r2, [pc, #236]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 800269e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b39      	ldr	r3, [pc, #228]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4936      	ldr	r1, [pc, #216]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
 80026b6:	e008      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b80      	cmp	r3, #128	@ 0x80
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026be:	4b33      	ldr	r3, [pc, #204]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4a32      	ldr	r2, [pc, #200]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 80026c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d21d      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 020f 	bic.w	r2, r3, #15
 80026e0:	4929      	ldr	r1, [pc, #164]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026e8:	f7ff f820 	bl	800172c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff f81c 	bl	800172c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e03b      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d1ed      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4917      	ldr	r1, [pc, #92]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490f      	ldr	r1, [pc, #60]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002752:	f000 f825 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <HAL_RCC_ClockConfig+0x264>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490c      	ldr	r1, [pc, #48]	@ (8002794 <HAL_RCC_ClockConfig+0x26c>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <HAL_RCC_ClockConfig+0x270>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe ff8c 	bl	8001694 <HAL_InitTick>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40022000 	.word	0x40022000
 800278c:	40021000 	.word	0x40021000
 8002790:	04c4b400 	.word	0x04c4b400
 8002794:	080092bc 	.word	0x080092bc
 8002798:	20000000 	.word	0x20000000
 800279c:	20000018 	.word	0x20000018

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e047      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027b8:	4b27      	ldr	r3, [pc, #156]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c4:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e03e      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d136      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3301      	adds	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	68d2      	ldr	r2, [r2, #12]
 8002800:	0a12      	lsrs	r2, r2, #8
 8002802:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
      break;
 800280c:	e00c      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800280e:	4a13      	ldr	r2, [pc, #76]	@ (800285c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	4a10      	ldr	r2, [pc, #64]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	0a12      	lsrs	r2, r2, #8
 800281c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
      break;
 8002826:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0e5b      	lsrs	r3, r3, #25
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e001      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002848:	693b      	ldr	r3, [r7, #16]
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	00f42400 	.word	0x00f42400
 8002860:	016e3600 	.word	0x016e3600

08002864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4904      	ldr	r1, [pc, #16]	@ (80028a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080092cc 	.word	0x080092cc

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028ac:	f7ff ffda 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4904      	ldr	r1, [pc, #16]	@ (80028d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	080092cc 	.word	0x080092cc

080028d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028da:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3301      	adds	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10c      	bne.n	8002912 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f8:	4a17      	ldr	r2, [pc, #92]	@ (8002958 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002902:	68d2      	ldr	r2, [r2, #12]
 8002904:	0a12      	lsrs	r2, r2, #8
 8002906:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
    break;
 8002910:	e00c      	b.n	800292c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002912:	4a12      	ldr	r2, [pc, #72]	@ (800295c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4a0e      	ldr	r2, [pc, #56]	@ (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	0a12      	lsrs	r2, r2, #8
 8002920:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    break;
 800292a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0e5b      	lsrs	r3, r3, #25
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002946:	687b      	ldr	r3, [r7, #4]
}
 8002948:	4618      	mov	r0, r3
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40021000 	.word	0x40021000
 8002958:	016e3600 	.word	0x016e3600
 800295c:	00f42400 	.word	0x00f42400

08002960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e09d      	b.n	8002aae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002982:	d009      	beq.n	8002998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
 800298a:	e005      	b.n	8002998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fb50 	bl	8001058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029d8:	d902      	bls.n	80029e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e002      	b.n	80029e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029ee:	d007      	beq.n	8002a00 <HAL_SPI_Init+0xa0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029f8:	d002      	beq.n	8002a00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	ea42 0103 	orr.w	r1, r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	f003 0204 	and.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a7c:	ea42 0103 	orr.w	r1, r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac6:	f7fe fe31 	bl	800172c <HAL_GetTick>
 8002aca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d001      	beq.n	8002ae0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e15c      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_SPI_Transmit+0x36>
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e154      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_Transmit+0x48>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e14d      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b50:	d10f      	bne.n	8002b72 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	d007      	beq.n	8002b90 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b98:	d952      	bls.n	8002c40 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_Transmit+0xf2>
 8002ba2:	8b7b      	ldrh	r3, [r7, #26]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d145      	bne.n	8002c34 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bcc:	e032      	b.n	8002c34 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d112      	bne.n	8002c02 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	881a      	ldrh	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c00:	e018      	b.n	8002c34 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c02:	f7fe fd93 	bl	800172c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d803      	bhi.n	8002c1a <HAL_SPI_Transmit+0x164>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d102      	bne.n	8002c20 <HAL_SPI_Transmit+0x16a>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0b2      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1c7      	bne.n	8002bce <HAL_SPI_Transmit+0x118>
 8002c3e:	e083      	b.n	8002d48 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_SPI_Transmit+0x198>
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d177      	bne.n	8002d3e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d912      	bls.n	8002c7e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b02      	subs	r3, #2
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c7c:	e05f      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ca4:	e04b      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d12b      	bne.n	8002d0c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d912      	bls.n	8002ce4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b02      	subs	r3, #2
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ce2:	e02c      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d0a:	e018      	b.n	8002d3e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d0c:	f7fe fd0e 	bl	800172c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d803      	bhi.n	8002d24 <HAL_SPI_Transmit+0x26e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Transmit+0x274>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e02d      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ae      	bne.n	8002ca6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6839      	ldr	r1, [r7, #0]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fb65 	bl	800341c <SPI_EndRxTxTransaction>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	@ 0x28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db4:	f7fe fcba 	bl	800172c <HAL_GetTick>
 8002db8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dc0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d00c      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x4e>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x4a>
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d001      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	e1f3      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x60>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x60>
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1e8      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x72>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e1e1      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d003      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e72:	d802      	bhi.n	8002e7a <HAL_SPI_TransmitReceive+0xd8>
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d908      	bls.n	8002e8c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e007      	b.n	8002e9c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	d007      	beq.n	8002eba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ec2:	f240 8083 	bls.w	8002fcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x132>
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d16f      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	1c9a      	adds	r2, r3, #2
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef8:	e05c      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11b      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x19e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x19e>
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d113      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d11c      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x1e6>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f84:	2301      	movs	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f88:	f7fe fbd0 	bl	800172c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d80d      	bhi.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d009      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e111      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d19d      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x158>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d197      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x158>
 8002fca:	e0e5      	b.n	8003198 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x23a>
 8002fd4:	8afb      	ldrh	r3, [r7, #22]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80d1 	bne.w	800317e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d912      	bls.n	800300c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	1c9a      	adds	r2, r3, #2
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b02      	subs	r3, #2
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800300a:	e0b8      	b.n	800317e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003032:	e0a4      	b.n	800317e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d134      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x30a>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02f      	beq.n	80030ac <HAL_SPI_TransmitReceive+0x30a>
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	2b01      	cmp	r3, #1
 8003050:	d12c      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d912      	bls.n	8003082 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	881a      	ldrh	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	1c9a      	adds	r2, r3, #2
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b02      	subs	r3, #2
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003080:	e012      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d148      	bne.n	800314c <HAL_SPI_TransmitReceive+0x3aa>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d042      	beq.n	800314c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d923      	bls.n	800311a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	b292      	uxth	r2, r2
 80030de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b02      	subs	r3, #2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d81f      	bhi.n	8003148 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	e016      	b.n	8003148 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f103 020c 	add.w	r2, r3, #12
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	7812      	ldrb	r2, [r2, #0]
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800314c:	f7fe faee 	bl	800172c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003158:	429a      	cmp	r2, r3
 800315a:	d803      	bhi.n	8003164 <HAL_SPI_TransmitReceive+0x3c2>
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d102      	bne.n	800316a <HAL_SPI_TransmitReceive+0x3c8>
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e02c      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f af55 	bne.w	8003034 <HAL_SPI_TransmitReceive+0x292>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	f47f af4e 	bne.w	8003034 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f93d 	bl	800341c <SPI_EndRxTxTransaction>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00e      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80031d6:	2300      	movs	r3, #0
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3728      	adds	r7, #40	@ 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031f0:	f7fe fa9c 	bl	800172c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003200:	f7fe fa94 	bl	800172c <HAL_GetTick>
 8003204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003206:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	015b      	lsls	r3, r3, #5
 800320c:	0d1b      	lsrs	r3, r3, #20
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003216:	e054      	b.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d050      	beq.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003220:	f7fe fa84 	bl	800172c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	d902      	bls.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d13d      	bne.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800324e:	d111      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003258:	d004      	beq.n	8003264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003262:	d107      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327c:	d10f      	bne.n	800329e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800329c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e017      	b.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3b01      	subs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d19b      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000

080032f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003302:	f7fe fa13 	bl	800172c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003312:	f7fe fa0b 	bl	800172c <HAL_GetTick>
 8003316:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003320:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00da      	lsls	r2, r3, #3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	0d1b      	lsrs	r3, r3, #20
 8003330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003338:	e060      	b.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003340:	d107      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003350:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d050      	beq.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800335a:	f7fe f9e7 	bl	800172c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003366:	429a      	cmp	r2, r3
 8003368:	d902      	bls.n	8003370 <SPI_WaitFifoStateUntilTimeout+0x80>
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d13d      	bne.n	80033ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800337e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003388:	d111      	bne.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003392:	d004      	beq.n	800339e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339c:	d107      	bne.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b6:	d10f      	bne.n	80033d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e010      	b.n	800340e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d196      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3728      	adds	r7, #40	@ 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff5b 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e027      	b.n	80034a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	2180      	movs	r1, #128	@ 0x80
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fec0 	bl	80031e0 <SPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e014      	b.n	80034a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff ff34 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e000      	b.n	80034a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e042      	b.n	8003540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f83b 	bl	8003548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2224      	movs	r2, #36	@ 0x24
 80034d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fbbc 	bl	8003c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8bd 	bl	8003678 <UART_SetConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e01b      	b.n	8003540 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fc3b 	bl	8003db4 <UART_CheckIdleState>
 800353e:	4603      	mov	r3, r0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	@ 0x28
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003572:	2b20      	cmp	r3, #32
 8003574:	d17b      	bne.n	800366e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_UART_Transmit+0x26>
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e074      	b.n	8003670 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2221      	movs	r2, #33	@ 0x21
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003596:	f7fe f8c9 	bl	800172c <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b4:	d108      	bne.n	80035c8 <HAL_UART_Transmit+0x6c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e003      	b.n	80035d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d0:	e030      	b.n	8003634 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	@ 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fc93 	bl	8003f08 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e03d      	b.n	8003670 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3302      	adds	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e007      	b.n	8003622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1c8      	bne.n	80035d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2200      	movs	r2, #0
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fc5c 	bl	8003f08 <UART_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e006      	b.n	8003670 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b08c      	sub	sp, #48	@ 0x30
 800367e:	af00      	add	r7, sp, #0
 8003680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4313      	orrs	r3, r2
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4baa      	ldr	r3, [pc, #680]	@ (8003950 <UART_SetConfig+0x2d8>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003954 <UART_SetConfig+0x2dc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e0:	4313      	orrs	r3, r2
 80036e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80036ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	f023 010f 	bic.w	r1, r3, #15
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a90      	ldr	r2, [pc, #576]	@ (8003958 <UART_SetConfig+0x2e0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d125      	bne.n	8003768 <UART_SetConfig+0xf0>
 800371c:	4b8f      	ldr	r3, [pc, #572]	@ (800395c <UART_SetConfig+0x2e4>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d81a      	bhi.n	8003760 <UART_SetConfig+0xe8>
 800372a:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <UART_SetConfig+0xb8>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003741 	.word	0x08003741
 8003734:	08003751 	.word	0x08003751
 8003738:	08003749 	.word	0x08003749
 800373c:	08003759 	.word	0x08003759
 8003740:	2301      	movs	r3, #1
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003746:	e116      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003748:	2302      	movs	r3, #2
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374e:	e112      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003750:	2304      	movs	r3, #4
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e10e      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003758:	2308      	movs	r3, #8
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375e:	e10a      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003760:	2310      	movs	r3, #16
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003766:	e106      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7c      	ldr	r2, [pc, #496]	@ (8003960 <UART_SetConfig+0x2e8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d138      	bne.n	80037e4 <UART_SetConfig+0x16c>
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <UART_SetConfig+0x2e4>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d82d      	bhi.n	80037dc <UART_SetConfig+0x164>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <UART_SetConfig+0x110>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037bd 	.word	0x080037bd
 800378c:	080037dd 	.word	0x080037dd
 8003790:	080037dd 	.word	0x080037dd
 8003794:	080037dd 	.word	0x080037dd
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	080037dd 	.word	0x080037dd
 80037a4:	080037dd 	.word	0x080037dd
 80037a8:	080037c5 	.word	0x080037c5
 80037ac:	080037dd 	.word	0x080037dd
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c2:	e0d8      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ca:	e0d4      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037cc:	2304      	movs	r3, #4
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d2:	e0d0      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037d4:	2308      	movs	r3, #8
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037da:	e0cc      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e2:	e0c8      	b.n	8003976 <UART_SetConfig+0x2fe>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003964 <UART_SetConfig+0x2ec>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d125      	bne.n	800383a <UART_SetConfig+0x1c2>
 80037ee:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <UART_SetConfig+0x2e4>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037f8:	2b30      	cmp	r3, #48	@ 0x30
 80037fa:	d016      	beq.n	800382a <UART_SetConfig+0x1b2>
 80037fc:	2b30      	cmp	r3, #48	@ 0x30
 80037fe:	d818      	bhi.n	8003832 <UART_SetConfig+0x1ba>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d00a      	beq.n	800381a <UART_SetConfig+0x1a2>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d814      	bhi.n	8003832 <UART_SetConfig+0x1ba>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <UART_SetConfig+0x19a>
 800380c:	2b10      	cmp	r3, #16
 800380e:	d008      	beq.n	8003822 <UART_SetConfig+0x1aa>
 8003810:	e00f      	b.n	8003832 <UART_SetConfig+0x1ba>
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003818:	e0ad      	b.n	8003976 <UART_SetConfig+0x2fe>
 800381a:	2302      	movs	r3, #2
 800381c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003820:	e0a9      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003822:	2304      	movs	r3, #4
 8003824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003828:	e0a5      	b.n	8003976 <UART_SetConfig+0x2fe>
 800382a:	2308      	movs	r3, #8
 800382c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003830:	e0a1      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003832:	2310      	movs	r3, #16
 8003834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003838:	e09d      	b.n	8003976 <UART_SetConfig+0x2fe>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <UART_SetConfig+0x2f0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d125      	bne.n	8003890 <UART_SetConfig+0x218>
 8003844:	4b45      	ldr	r3, [pc, #276]	@ (800395c <UART_SetConfig+0x2e4>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800384e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003850:	d016      	beq.n	8003880 <UART_SetConfig+0x208>
 8003852:	2bc0      	cmp	r3, #192	@ 0xc0
 8003854:	d818      	bhi.n	8003888 <UART_SetConfig+0x210>
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	d00a      	beq.n	8003870 <UART_SetConfig+0x1f8>
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d814      	bhi.n	8003888 <UART_SetConfig+0x210>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <UART_SetConfig+0x1f0>
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d008      	beq.n	8003878 <UART_SetConfig+0x200>
 8003866:	e00f      	b.n	8003888 <UART_SetConfig+0x210>
 8003868:	2300      	movs	r3, #0
 800386a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386e:	e082      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003870:	2302      	movs	r3, #2
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003876:	e07e      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003878:	2304      	movs	r3, #4
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e07a      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003880:	2308      	movs	r3, #8
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e076      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003888:	2310      	movs	r3, #16
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388e:	e072      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a35      	ldr	r2, [pc, #212]	@ (800396c <UART_SetConfig+0x2f4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d12a      	bne.n	80038f0 <UART_SetConfig+0x278>
 800389a:	4b30      	ldr	r3, [pc, #192]	@ (800395c <UART_SetConfig+0x2e4>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a8:	d01a      	beq.n	80038e0 <UART_SetConfig+0x268>
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ae:	d81b      	bhi.n	80038e8 <UART_SetConfig+0x270>
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b4:	d00c      	beq.n	80038d0 <UART_SetConfig+0x258>
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ba:	d815      	bhi.n	80038e8 <UART_SetConfig+0x270>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <UART_SetConfig+0x250>
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c4:	d008      	beq.n	80038d8 <UART_SetConfig+0x260>
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x270>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ce:	e052      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038d0:	2302      	movs	r3, #2
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d6:	e04e      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038d8:	2304      	movs	r3, #4
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038de:	e04a      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038e0:	2308      	movs	r3, #8
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	e046      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038e8:	2310      	movs	r3, #16
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ee:	e042      	b.n	8003976 <UART_SetConfig+0x2fe>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <UART_SetConfig+0x2dc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d13a      	bne.n	8003970 <UART_SetConfig+0x2f8>
 80038fa:	4b18      	ldr	r3, [pc, #96]	@ (800395c <UART_SetConfig+0x2e4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003904:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003908:	d01a      	beq.n	8003940 <UART_SetConfig+0x2c8>
 800390a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800390e:	d81b      	bhi.n	8003948 <UART_SetConfig+0x2d0>
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d00c      	beq.n	8003930 <UART_SetConfig+0x2b8>
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800391a:	d815      	bhi.n	8003948 <UART_SetConfig+0x2d0>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <UART_SetConfig+0x2b0>
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003924:	d008      	beq.n	8003938 <UART_SetConfig+0x2c0>
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x2d0>
 8003928:	2300      	movs	r3, #0
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e022      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e01e      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e01a      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e016      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e012      	b.n	8003976 <UART_SetConfig+0x2fe>
 8003950:	cfff69f3 	.word	0xcfff69f3
 8003954:	40008000 	.word	0x40008000
 8003958:	40013800 	.word	0x40013800
 800395c:	40021000 	.word	0x40021000
 8003960:	40004400 	.word	0x40004400
 8003964:	40004800 	.word	0x40004800
 8003968:	40004c00 	.word	0x40004c00
 800396c:	40005000 	.word	0x40005000
 8003970:	2310      	movs	r3, #16
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4aae      	ldr	r2, [pc, #696]	@ (8003c34 <UART_SetConfig+0x5bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	f040 8097 	bne.w	8003ab0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003982:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003986:	2b08      	cmp	r3, #8
 8003988:	d823      	bhi.n	80039d2 <UART_SetConfig+0x35a>
 800398a:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <UART_SetConfig+0x318>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039c3 	.word	0x080039c3
 80039a4:	080039d3 	.word	0x080039d3
 80039a8:	080039d3 	.word	0x080039d3
 80039ac:	080039d3 	.word	0x080039d3
 80039b0:	080039cb 	.word	0x080039cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7fe ff62 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 80039b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ba:	e010      	b.n	80039de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003c38 <UART_SetConfig+0x5c0>)
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039c0:	e00d      	b.n	80039de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c2:	f7fe feed 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 80039c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039c8:	e009      	b.n	80039de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039d0:	e005      	b.n	80039de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8130 	beq.w	8003c46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	4a94      	ldr	r2, [pc, #592]	@ (8003c3c <UART_SetConfig+0x5c4>)
 80039ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d305      	bcc.n	8003a16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d903      	bls.n	8003a1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a1c:	e113      	b.n	8003c46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	2200      	movs	r2, #0
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	60fa      	str	r2, [r7, #12]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	4a84      	ldr	r2, [pc, #528]	@ (8003c3c <UART_SetConfig+0x5c4>)
 8003a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a40:	f7fc ff44 	bl	80008cc <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	020b      	lsls	r3, r1, #8
 8003a56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a5a:	0202      	lsls	r2, r0, #8
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	6849      	ldr	r1, [r1, #4]
 8003a60:	0849      	lsrs	r1, r1, #1
 8003a62:	2000      	movs	r0, #0
 8003a64:	460c      	mov	r4, r1
 8003a66:	4605      	mov	r5, r0
 8003a68:	eb12 0804 	adds.w	r8, r2, r4
 8003a6c:	eb43 0905 	adc.w	r9, r3, r5
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	469a      	mov	sl, r3
 8003a78:	4693      	mov	fp, r2
 8003a7a:	4652      	mov	r2, sl
 8003a7c:	465b      	mov	r3, fp
 8003a7e:	4640      	mov	r0, r8
 8003a80:	4649      	mov	r1, r9
 8003a82:	f7fc ff23 	bl	80008cc <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a94:	d308      	bcc.n	8003aa8 <UART_SetConfig+0x430>
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a9c:	d204      	bcs.n	8003aa8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e0ce      	b.n	8003c46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003aae:	e0ca      	b.n	8003c46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab8:	d166      	bne.n	8003b88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003aba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d827      	bhi.n	8003b12 <UART_SetConfig+0x49a>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <UART_SetConfig+0x450>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b13 	.word	0x08003b13
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b0b 	.word	0x08003b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe fec6 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003af0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003af2:	e014      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7fe fed8 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003af8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003afa:	e010      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b4e      	ldr	r3, [pc, #312]	@ (8003c38 <UART_SetConfig+0x5c0>)
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b00:	e00d      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7fe fe4d 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8003b06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b08:	e009      	b.n	8003b1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b10:	e005      	b.n	8003b1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8090 	beq.w	8003c46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	4a44      	ldr	r2, [pc, #272]	@ (8003c3c <UART_SetConfig+0x5c4>)
 8003b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b38:	005a      	lsls	r2, r3, #1
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	441a      	add	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d916      	bls.n	8003b80 <UART_SetConfig+0x508>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b58:	d212      	bcs.n	8003b80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f023 030f 	bic.w	r3, r3, #15
 8003b62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	8bfb      	ldrh	r3, [r7, #30]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	8bfa      	ldrh	r2, [r7, #30]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e062      	b.n	8003c46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b86:	e05e      	b.n	8003c46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d828      	bhi.n	8003be2 <UART_SetConfig+0x56a>
 8003b90:	a201      	add	r2, pc, #4	@ (adr r2, 8003b98 <UART_SetConfig+0x520>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bc5 	.word	0x08003bc5
 8003ba0:	08003bcd 	.word	0x08003bcd
 8003ba4:	08003be3 	.word	0x08003be3
 8003ba8:	08003bd3 	.word	0x08003bd3
 8003bac:	08003be3 	.word	0x08003be3
 8003bb0:	08003be3 	.word	0x08003be3
 8003bb4:	08003be3 	.word	0x08003be3
 8003bb8:	08003bdb 	.word	0x08003bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7fe fe5e 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc2:	e014      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7fe fe70 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bca:	e010      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <UART_SetConfig+0x5c0>)
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bd0:	e00d      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	f7fe fde5 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8003bd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bd8:	e009      	b.n	8003bee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003be0:	e005      	b.n	8003bee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bec:	bf00      	nop
    }

    if (pclk != 0U)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	4a10      	ldr	r2, [pc, #64]	@ (8003c3c <UART_SetConfig+0x5c4>)
 8003bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	441a      	add	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d910      	bls.n	8003c40 <UART_SetConfig+0x5c8>
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c24:	d20c      	bcs.n	8003c40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	e009      	b.n	8003c46 <UART_SetConfig+0x5ce>
 8003c32:	bf00      	nop
 8003c34:	40008000 	.word	0x40008000
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	080092d8 	.word	0x080092d8
      }
      else
      {
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3730      	adds	r7, #48	@ 0x30
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6e:	d10a      	bne.n	8003d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b098      	sub	sp, #96	@ 0x60
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc4:	f7fd fcb2 	bl	800172c <HAL_GetTick>
 8003dc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d12f      	bne.n	8003e38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f88e 	bl	8003f08 <UART_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d022      	beq.n	8003e38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e6      	bne.n	8003df2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e063      	b.n	8003f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d149      	bne.n	8003eda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f857 	bl	8003f08 <UART_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03c      	beq.n	8003eda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb2:	61fa      	str	r2, [r7, #28]
 8003eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	69b9      	ldr	r1, [r7, #24]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e012      	b.n	8003f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3758      	adds	r7, #88	@ 0x58
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f18:	e04f      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d04b      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fd fc03 	bl	800172c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e04e      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d037      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b80      	cmp	r3, #128	@ 0x80
 8003f4e:	d034      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b40      	cmp	r3, #64	@ 0x40
 8003f54:	d031      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d110      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f838 	bl	8003fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2208      	movs	r2, #8
 8003f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e029      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f94:	d111      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f81e 	bl	8003fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d0a0      	beq.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b095      	sub	sp, #84	@ 0x54
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004008:	643b      	str	r3, [r7, #64]	@ 0x40
 800400a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	61fb      	str	r3, [r7, #28]
   return(result);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004040:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e3      	bne.n	800401c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d118      	bne.n	800408e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	60bb      	str	r3, [r7, #8]
   return(result);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0310 	bic.w	r3, r3, #16
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	613b      	str	r3, [r7, #16]
   return(result);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e6      	bne.n	800405c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040a2:	bf00      	nop
 80040a4:	3754      	adds	r7, #84	@ 0x54
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80040b4:	4907      	ldr	r1, [pc, #28]	@ (80040d4 <MX_FATFS_Init+0x24>)
 80040b6:	4808      	ldr	r0, [pc, #32]	@ (80040d8 <MX_FATFS_Init+0x28>)
 80040b8:	f003 fe9e 	bl	8007df8 <FATFS_LinkDriver>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	e003      	b.n	80040d0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <MX_FATFS_Init+0x2c>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80040ce:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20002310 	.word	0x20002310
 80040d8:	20000024 	.word	0x20000024
 80040dc:	20002314 	.word	0x20002314

080040e0 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80040e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2110      	movs	r1, #16
 80040f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040fc:	f7fd fe36 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fd fb1f 	bl	8001744 <HAL_Delay>
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}

0800410a <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800410e:	2201      	movs	r2, #1
 8004110:	2110      	movs	r1, #16
 8004112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004116:	f7fd fe29 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f7fd fb12 	bl	8001744 <HAL_Delay>
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}

08004124 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800412e:	bf00      	nop
 8004130:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <SPI_TxByte+0x30>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d1f8      	bne.n	8004130 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800413e:	1df9      	adds	r1, r7, #7
 8004140:	2364      	movs	r3, #100	@ 0x64
 8004142:	2201      	movs	r2, #1
 8004144:	4803      	ldr	r0, [pc, #12]	@ (8004154 <SPI_TxByte+0x30>)
 8004146:	f7fe fcb6 	bl	8002ab6 <HAL_SPI_Transmit>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200000c0 	.word	0x200000c0

08004158 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004164:	bf00      	nop
 8004166:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <SPI_TxBuffer+0x30>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d1f8      	bne.n	8004166 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004174:	887a      	ldrh	r2, [r7, #2]
 8004176:	2364      	movs	r3, #100	@ 0x64
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4803      	ldr	r0, [pc, #12]	@ (8004188 <SPI_TxBuffer+0x30>)
 800417c:	f7fe fc9b 	bl	8002ab6 <HAL_SPI_Transmit>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200000c0 	.word	0x200000c0

0800418c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8004192:	23ff      	movs	r3, #255	@ 0xff
 8004194:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004196:	bf00      	nop
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <SPI_RxByte+0x34>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d1f8      	bne.n	8004198 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80041a6:	1dba      	adds	r2, r7, #6
 80041a8:	1df9      	adds	r1, r7, #7
 80041aa:	2364      	movs	r3, #100	@ 0x64
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2301      	movs	r3, #1
 80041b0:	4803      	ldr	r0, [pc, #12]	@ (80041c0 <SPI_RxByte+0x34>)
 80041b2:	f7fe fdf6 	bl	8002da2 <HAL_SPI_TransmitReceive>

	return data;
 80041b6:	79bb      	ldrb	r3, [r7, #6]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200000c0 	.word	0x200000c0

080041c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80041cc:	f7ff ffde 	bl	800418c <SPI_RxByte>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	701a      	strb	r2, [r3, #0]
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80041e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <SD_ReadyWait+0x30>)
 80041e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80041ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80041ee:	f7ff ffcd 	bl	800418c <SPI_RxByte>
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2bff      	cmp	r3, #255	@ 0xff
 80041fa:	d003      	beq.n	8004204 <SD_ReadyWait+0x24>
 80041fc:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <SD_ReadyWait+0x30>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f4      	bne.n	80041ee <SD_ReadyWait+0xe>

	return res;
 8004204:	79fb      	ldrb	r3, [r7, #7]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20002318 	.word	0x20002318

08004214 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800421a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800421e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004220:	f7ff ff73 	bl	800410a <DESELECT>
	for(int i = 0; i < 10; i++)
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	e005      	b.n	8004236 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800422a:	20ff      	movs	r0, #255	@ 0xff
 800422c:	f7ff ff7a 	bl	8004124 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3301      	adds	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b09      	cmp	r3, #9
 800423a:	ddf6      	ble.n	800422a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800423c:	f7ff ff58 	bl	80040f0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004240:	2340      	movs	r3, #64	@ 0x40
 8004242:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004254:	2395      	movs	r3, #149	@ 0x95
 8004256:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004258:	463b      	mov	r3, r7
 800425a:	2106      	movs	r1, #6
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff7b 	bl	8004158 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8004262:	e002      	b.n	800426a <SD_PowerOn+0x56>
	{
		cnt--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3b01      	subs	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800426a:	f7ff ff8f 	bl	800418c <SPI_RxByte>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d002      	beq.n	800427a <SD_PowerOn+0x66>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f4      	bne.n	8004264 <SD_PowerOn+0x50>
	}

	DESELECT();
 800427a:	f7ff ff46 	bl	800410a <DESELECT>
	SPI_TxByte(0XFF);
 800427e:	20ff      	movs	r0, #255	@ 0xff
 8004280:	f7ff ff50 	bl	8004124 <SPI_TxByte>

	PowerFlag = 1;
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <SD_PowerOn+0x80>)
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	2000231b 	.word	0x2000231b

08004298 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800429c:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <SD_PowerOff+0x14>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	2000231b 	.word	0x2000231b

080042b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80042b4:	4b03      	ldr	r3, [pc, #12]	@ (80042c4 <SD_CheckPower+0x14>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000231b 	.word	0x2000231b

080042c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80042d2:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <SD_RxDataBlock+0x58>)
 80042d4:	22c8      	movs	r2, #200	@ 0xc8
 80042d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80042d8:	f7ff ff58 	bl	800418c <SPI_RxByte>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2bff      	cmp	r3, #255	@ 0xff
 80042e4:	d103      	bne.n	80042ee <SD_RxDataBlock+0x26>
 80042e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <SD_RxDataBlock+0x58>)
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f4      	bne.n	80042d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80042f2:	d001      	beq.n	80042f8 <SD_RxDataBlock+0x30>
 80042f4:	2300      	movs	r3, #0
 80042f6:	e00f      	b.n	8004318 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff60 	bl	80041c4 <SPI_RxBytePtr>
	} while(len--);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	603a      	str	r2, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f4      	bne.n	80042f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800430e:	f7ff ff3d 	bl	800418c <SPI_RxByte>
	SPI_RxByte();
 8004312:	f7ff ff3b 	bl	800418c <SPI_RxByte>

	return TRUE;
 8004316:	2301      	movs	r3, #1
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20002316 	.word	0x20002316

08004324 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004334:	f7ff ff54 	bl	80041e0 <SD_ReadyWait>
 8004338:	4603      	mov	r3, r0
 800433a:	2bff      	cmp	r3, #255	@ 0xff
 800433c:	d001      	beq.n	8004342 <SD_TxDataBlock+0x1e>
 800433e:	2300      	movs	r3, #0
 8004340:	e02f      	b.n	80043a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff feed 	bl	8004124 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	2bfd      	cmp	r3, #253	@ 0xfd
 800434e:	d020      	beq.n	8004392 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff feff 	bl	8004158 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800435a:	f7ff ff17 	bl	800418c <SPI_RxByte>
		SPI_RxByte();
 800435e:	f7ff ff15 	bl	800418c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004362:	e00b      	b.n	800437c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004364:	f7ff ff12 	bl	800418c <SPI_RxByte>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2b05      	cmp	r3, #5
 8004374:	d006      	beq.n	8004384 <SD_TxDataBlock+0x60>
			i++;
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	3301      	adds	r3, #1
 800437a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800437c:	7bbb      	ldrb	r3, [r7, #14]
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d9f0      	bls.n	8004364 <SD_TxDataBlock+0x40>
 8004382:	e000      	b.n	8004386 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004384:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004386:	bf00      	nop
 8004388:	f7ff ff00 	bl	800418c <SPI_RxByte>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0fa      	beq.n	8004388 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2b05      	cmp	r3, #5
 800439a:	d101      	bne.n	80043a0 <SD_TxDataBlock+0x7c>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	4603      	mov	r3, r0
 80043b2:	6039      	str	r1, [r7, #0]
 80043b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80043b6:	f7ff ff13 	bl	80041e0 <SD_ReadyWait>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2bff      	cmp	r3, #255	@ 0xff
 80043be:	d001      	beq.n	80043c4 <SD_SendCmd+0x1a>
 80043c0:	23ff      	movs	r3, #255	@ 0xff
 80043c2:	e042      	b.n	800444a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff feac 	bl	8004124 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	0e1b      	lsrs	r3, r3, #24
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fea6 	bl	8004124 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fea0 	bl	8004124 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fe9a 	bl	8004124 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fe95 	bl	8004124 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	d102      	bne.n	8004406 <SD_SendCmd+0x5c>
 8004400:	2395      	movs	r3, #149	@ 0x95
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	e007      	b.n	8004416 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2b48      	cmp	r3, #72	@ 0x48
 800440a:	d102      	bne.n	8004412 <SD_SendCmd+0x68>
 800440c:	2387      	movs	r3, #135	@ 0x87
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e001      	b.n	8004416 <SD_SendCmd+0x6c>
	else crc = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe83 	bl	8004124 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b4c      	cmp	r3, #76	@ 0x4c
 8004422:	d101      	bne.n	8004428 <SD_SendCmd+0x7e>
 8004424:	f7ff feb2 	bl	800418c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004428:	230a      	movs	r3, #10
 800442a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800442c:	f7ff feae 	bl	800418c <SPI_RxByte>
 8004430:	4603      	mov	r3, r0
 8004432:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004434:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da05      	bge.n	8004448 <SD_SendCmd+0x9e>
 800443c:	7bbb      	ldrb	r3, [r7, #14]
 800443e:	3b01      	subs	r3, #1
 8004440:	73bb      	strb	r3, [r7, #14]
 8004442:	7bbb      	ldrb	r3, [r7, #14]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f1      	bne.n	800442c <SD_SendCmd+0x82>

	return res;
 8004448:	7b7b      	ldrb	r3, [r7, #13]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <SD_disk_initialize+0x14>
 8004464:	2301      	movs	r3, #1
 8004466:	e0d1      	b.n	800460c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004468:	4b6a      	ldr	r3, [pc, #424]	@ (8004614 <SD_disk_initialize+0x1c0>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <SD_disk_initialize+0x2a>
 8004476:	4b67      	ldr	r3, [pc, #412]	@ (8004614 <SD_disk_initialize+0x1c0>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e0c6      	b.n	800460c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800447e:	f7ff fec9 	bl	8004214 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004482:	f7ff fe35 	bl	80040f0 <SELECT>

	/* check disk type */
	type = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800448a:	2100      	movs	r1, #0
 800448c:	2040      	movs	r0, #64	@ 0x40
 800448e:	f7ff ff8c 	bl	80043aa <SD_SendCmd>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	f040 80a1 	bne.w	80045dc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800449a:	4b5f      	ldr	r3, [pc, #380]	@ (8004618 <SD_disk_initialize+0x1c4>)
 800449c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80044a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80044a6:	2048      	movs	r0, #72	@ 0x48
 80044a8:	f7ff ff7f 	bl	80043aa <SD_SendCmd>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d155      	bne.n	800455e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	e00c      	b.n	80044d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80044b8:	7bfc      	ldrb	r4, [r7, #15]
 80044ba:	f7ff fe67 	bl	800418c <SPI_RxByte>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	f104 0310 	add.w	r3, r4, #16
 80044c6:	443b      	add	r3, r7
 80044c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	3301      	adds	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d9ef      	bls.n	80044b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80044d8:	7abb      	ldrb	r3, [r7, #10]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d17e      	bne.n	80045dc <SD_disk_initialize+0x188>
 80044de:	7afb      	ldrb	r3, [r7, #11]
 80044e0:	2baa      	cmp	r3, #170	@ 0xaa
 80044e2:	d17b      	bne.n	80045dc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80044e4:	2100      	movs	r1, #0
 80044e6:	2077      	movs	r0, #119	@ 0x77
 80044e8:	f7ff ff5f 	bl	80043aa <SD_SendCmd>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d807      	bhi.n	8004502 <SD_disk_initialize+0xae>
 80044f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80044f6:	2069      	movs	r0, #105	@ 0x69
 80044f8:	f7ff ff57 	bl	80043aa <SD_SendCmd>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8004502:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <SD_disk_initialize+0x1c4>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ec      	bne.n	80044e4 <SD_disk_initialize+0x90>
 800450a:	e000      	b.n	800450e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800450c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800450e:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <SD_disk_initialize+0x1c4>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d062      	beq.n	80045dc <SD_disk_initialize+0x188>
 8004516:	2100      	movs	r1, #0
 8004518:	207a      	movs	r0, #122	@ 0x7a
 800451a:	f7ff ff46 	bl	80043aa <SD_SendCmd>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d15b      	bne.n	80045dc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e00c      	b.n	8004544 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800452a:	7bfc      	ldrb	r4, [r7, #15]
 800452c:	f7ff fe2e 	bl	800418c <SPI_RxByte>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	f104 0310 	add.w	r3, r4, #16
 8004538:	443b      	add	r3, r7
 800453a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	3301      	adds	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d9ef      	bls.n	800452a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800454a:	7a3b      	ldrb	r3, [r7, #8]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <SD_disk_initialize+0x104>
 8004554:	230c      	movs	r3, #12
 8004556:	e000      	b.n	800455a <SD_disk_initialize+0x106>
 8004558:	2304      	movs	r3, #4
 800455a:	73bb      	strb	r3, [r7, #14]
 800455c:	e03e      	b.n	80045dc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800455e:	2100      	movs	r1, #0
 8004560:	2077      	movs	r0, #119	@ 0x77
 8004562:	f7ff ff22 	bl	80043aa <SD_SendCmd>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d808      	bhi.n	800457e <SD_disk_initialize+0x12a>
 800456c:	2100      	movs	r1, #0
 800456e:	2069      	movs	r0, #105	@ 0x69
 8004570:	f7ff ff1b 	bl	80043aa <SD_SendCmd>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d801      	bhi.n	800457e <SD_disk_initialize+0x12a>
 800457a:	2302      	movs	r3, #2
 800457c:	e000      	b.n	8004580 <SD_disk_initialize+0x12c>
 800457e:	2301      	movs	r3, #1
 8004580:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004582:	7bbb      	ldrb	r3, [r7, #14]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d10e      	bne.n	80045a6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004588:	2100      	movs	r1, #0
 800458a:	2077      	movs	r0, #119	@ 0x77
 800458c:	f7ff ff0d 	bl	80043aa <SD_SendCmd>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d80e      	bhi.n	80045b4 <SD_disk_initialize+0x160>
 8004596:	2100      	movs	r1, #0
 8004598:	2069      	movs	r0, #105	@ 0x69
 800459a:	f7ff ff06 	bl	80043aa <SD_SendCmd>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <SD_disk_initialize+0x160>
 80045a4:	e00c      	b.n	80045c0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80045a6:	2100      	movs	r1, #0
 80045a8:	2041      	movs	r0, #65	@ 0x41
 80045aa:	f7ff fefe 	bl	80043aa <SD_SendCmd>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80045b4:	4b18      	ldr	r3, [pc, #96]	@ (8004618 <SD_disk_initialize+0x1c4>)
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e2      	bne.n	8004582 <SD_disk_initialize+0x12e>
 80045bc:	e000      	b.n	80045c0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80045be:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80045c0:	4b15      	ldr	r3, [pc, #84]	@ (8004618 <SD_disk_initialize+0x1c4>)
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <SD_disk_initialize+0x184>
 80045c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045cc:	2050      	movs	r0, #80	@ 0x50
 80045ce:	f7ff feec 	bl	80043aa <SD_SendCmd>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <SD_disk_initialize+0x188>
 80045d8:	2300      	movs	r3, #0
 80045da:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80045dc:	4a0f      	ldr	r2, [pc, #60]	@ (800461c <SD_disk_initialize+0x1c8>)
 80045de:	7bbb      	ldrb	r3, [r7, #14]
 80045e0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80045e2:	f7ff fd92 	bl	800410a <DESELECT>
	SPI_RxByte();
 80045e6:	f7ff fdd1 	bl	800418c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80045ea:	7bbb      	ldrb	r3, [r7, #14]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80045f0:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <SD_disk_initialize+0x1c0>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <SD_disk_initialize+0x1c0>)
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e001      	b.n	8004606 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004602:	f7ff fe49 	bl	8004298 <SD_PowerOff>
	}

	return Stat;
 8004606:	4b03      	ldr	r3, [pc, #12]	@ (8004614 <SD_disk_initialize+0x1c0>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bd90      	pop	{r4, r7, pc}
 8004614:	20000020 	.word	0x20000020
 8004618:	20002316 	.word	0x20002316
 800461c:	2000231a 	.word	0x2000231a

08004620 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <SD_disk_status+0x14>
 8004630:	2301      	movs	r3, #1
 8004632:	e002      	b.n	800463a <SD_disk_status+0x1a>
	return Stat;
 8004634:	4b04      	ldr	r3, [pc, #16]	@ (8004648 <SD_disk_status+0x28>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000020 	.word	0x20000020

0800464c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <SD_disk_read+0x1c>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <SD_disk_read+0x20>
 8004668:	2304      	movs	r3, #4
 800466a:	e051      	b.n	8004710 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800466c:	4b2a      	ldr	r3, [pc, #168]	@ (8004718 <SD_disk_read+0xcc>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <SD_disk_read+0x32>
 800467a:	2303      	movs	r3, #3
 800467c:	e048      	b.n	8004710 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800467e:	4b27      	ldr	r3, [pc, #156]	@ (800471c <SD_disk_read+0xd0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <SD_disk_read+0x44>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	025b      	lsls	r3, r3, #9
 800468e:	607b      	str	r3, [r7, #4]

	SELECT();
 8004690:	f7ff fd2e 	bl	80040f0 <SELECT>

	if (count == 1)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d111      	bne.n	80046be <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	2051      	movs	r0, #81	@ 0x51
 800469e:	f7ff fe84 	bl	80043aa <SD_SendCmd>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d129      	bne.n	80046fc <SD_disk_read+0xb0>
 80046a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046ac:	68b8      	ldr	r0, [r7, #8]
 80046ae:	f7ff fe0b 	bl	80042c8 <SD_RxDataBlock>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d021      	beq.n	80046fc <SD_disk_read+0xb0>
 80046b8:	2300      	movs	r3, #0
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	e01e      	b.n	80046fc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	2052      	movs	r0, #82	@ 0x52
 80046c2:	f7ff fe72 	bl	80043aa <SD_SendCmd>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d117      	bne.n	80046fc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80046cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046d0:	68b8      	ldr	r0, [r7, #8]
 80046d2:	f7ff fdf9 	bl	80042c8 <SD_RxDataBlock>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <SD_disk_read+0xa6>
				buff += 512;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046e2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ed      	bne.n	80046cc <SD_disk_read+0x80>
 80046f0:	e000      	b.n	80046f4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80046f2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80046f4:	2100      	movs	r1, #0
 80046f6:	204c      	movs	r0, #76	@ 0x4c
 80046f8:	f7ff fe57 	bl	80043aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80046fc:	f7ff fd05 	bl	800410a <DESELECT>
	SPI_RxByte();
 8004700:	f7ff fd44 	bl	800418c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000020 	.word	0x20000020
 800471c:	2000231a 	.word	0x2000231a

08004720 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <SD_disk_write+0x1c>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <SD_disk_write+0x20>
 800473c:	2304      	movs	r3, #4
 800473e:	e06b      	b.n	8004818 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004740:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <SD_disk_write+0x100>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <SD_disk_write+0x32>
 800474e:	2303      	movs	r3, #3
 8004750:	e062      	b.n	8004818 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004752:	4b33      	ldr	r3, [pc, #204]	@ (8004820 <SD_disk_write+0x100>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <SD_disk_write+0x44>
 8004760:	2302      	movs	r3, #2
 8004762:	e059      	b.n	8004818 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004764:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <SD_disk_write+0x104>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <SD_disk_write+0x56>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	025b      	lsls	r3, r3, #9
 8004774:	607b      	str	r3, [r7, #4]

	SELECT();
 8004776:	f7ff fcbb 	bl	80040f0 <SELECT>

	if (count == 1)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d110      	bne.n	80047a2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	2058      	movs	r0, #88	@ 0x58
 8004784:	f7ff fe11 	bl	80043aa <SD_SendCmd>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d13a      	bne.n	8004804 <SD_disk_write+0xe4>
 800478e:	21fe      	movs	r1, #254	@ 0xfe
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f7ff fdc7 	bl	8004324 <SD_TxDataBlock>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d033      	beq.n	8004804 <SD_disk_write+0xe4>
			count = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	e030      	b.n	8004804 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80047a2:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <SD_disk_write+0x104>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80047ae:	2100      	movs	r1, #0
 80047b0:	2077      	movs	r0, #119	@ 0x77
 80047b2:	f7ff fdfa 	bl	80043aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	2057      	movs	r0, #87	@ 0x57
 80047ba:	f7ff fdf6 	bl	80043aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	2059      	movs	r0, #89	@ 0x59
 80047c2:	f7ff fdf2 	bl	80043aa <SD_SendCmd>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11b      	bne.n	8004804 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80047cc:	21fc      	movs	r1, #252	@ 0xfc
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	f7ff fda8 	bl	8004324 <SD_TxDataBlock>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <SD_disk_write+0xd0>
				buff += 512;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047e0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ee      	bne.n	80047cc <SD_disk_write+0xac>
 80047ee:	e000      	b.n	80047f2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80047f0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80047f2:	21fd      	movs	r1, #253	@ 0xfd
 80047f4:	2000      	movs	r0, #0
 80047f6:	f7ff fd95 	bl	8004324 <SD_TxDataBlock>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <SD_disk_write+0xe4>
			{
				count = 1;
 8004800:	2301      	movs	r3, #1
 8004802:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004804:	f7ff fc81 	bl	800410a <DESELECT>
	SPI_RxByte();
 8004808:	f7ff fcc0 	bl	800418c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000020 	.word	0x20000020
 8004824:	2000231a 	.word	0x2000231a

08004828 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b08b      	sub	sp, #44	@ 0x2c
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	603a      	str	r2, [r7, #0]
 8004832:	71fb      	strb	r3, [r7, #7]
 8004834:	460b      	mov	r3, r1
 8004836:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <SD_disk_ioctl+0x1e>
 8004842:	2304      	movs	r3, #4
 8004844:	e113      	b.n	8004a6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800484c:	79bb      	ldrb	r3, [r7, #6]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d124      	bne.n	800489c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d012      	beq.n	8004880 <SD_disk_ioctl+0x58>
 800485a:	2b02      	cmp	r3, #2
 800485c:	dc1a      	bgt.n	8004894 <SD_disk_ioctl+0x6c>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <SD_disk_ioctl+0x40>
 8004862:	2b01      	cmp	r3, #1
 8004864:	d006      	beq.n	8004874 <SD_disk_ioctl+0x4c>
 8004866:	e015      	b.n	8004894 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004868:	f7ff fd16 	bl	8004298 <SD_PowerOff>
			res = RES_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004872:	e0fa      	b.n	8004a6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004874:	f7ff fcce 	bl	8004214 <SD_PowerOn>
			res = RES_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800487e:	e0f4      	b.n	8004a6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	1c5c      	adds	r4, r3, #1
 8004884:	f7ff fd14 	bl	80042b0 <SD_CheckPower>
 8004888:	4603      	mov	r3, r0
 800488a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004892:	e0ea      	b.n	8004a6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800489a:	e0e6      	b.n	8004a6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800489c:	4b76      	ldr	r3, [pc, #472]	@ (8004a78 <SD_disk_ioctl+0x250>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SD_disk_ioctl+0x86>
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0df      	b.n	8004a6e <SD_disk_ioctl+0x246>

		SELECT();
 80048ae:	f7ff fc1f 	bl	80040f0 <SELECT>

		switch (ctrl)
 80048b2:	79bb      	ldrb	r3, [r7, #6]
 80048b4:	2b0d      	cmp	r3, #13
 80048b6:	f200 80c9 	bhi.w	8004a4c <SD_disk_ioctl+0x224>
 80048ba:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <SD_disk_ioctl+0x98>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080049b7 	.word	0x080049b7
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	080049a7 	.word	0x080049a7
 80048cc:	08004a4d 	.word	0x08004a4d
 80048d0:	08004a4d 	.word	0x08004a4d
 80048d4:	08004a4d 	.word	0x08004a4d
 80048d8:	08004a4d 	.word	0x08004a4d
 80048dc:	08004a4d 	.word	0x08004a4d
 80048e0:	08004a4d 	.word	0x08004a4d
 80048e4:	08004a4d 	.word	0x08004a4d
 80048e8:	08004a4d 	.word	0x08004a4d
 80048ec:	080049c9 	.word	0x080049c9
 80048f0:	080049ed 	.word	0x080049ed
 80048f4:	08004a11 	.word	0x08004a11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80048f8:	2100      	movs	r1, #0
 80048fa:	2049      	movs	r0, #73	@ 0x49
 80048fc:	f7ff fd55 	bl	80043aa <SD_SendCmd>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 80a6 	bne.w	8004a54 <SD_disk_ioctl+0x22c>
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	2110      	movs	r1, #16
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fcda 	bl	80042c8 <SD_RxDataBlock>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 809c 	beq.w	8004a54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800491c:	7b3b      	ldrb	r3, [r7, #12]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10d      	bne.n	8004942 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004926:	7d7b      	ldrb	r3, [r7, #21]
 8004928:	461a      	mov	r2, r3
 800492a:	7d3b      	ldrb	r3, [r7, #20]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	b29b      	uxth	r3, r3
 8004930:	4413      	add	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004938:	8bfb      	ldrh	r3, [r7, #30]
 800493a:	029a      	lsls	r2, r3, #10
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e02d      	b.n	800499e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004942:	7c7b      	ldrb	r3, [r7, #17]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	b2da      	uxtb	r2, r3
 800494a:	7dbb      	ldrb	r3, [r7, #22]
 800494c:	09db      	lsrs	r3, r3, #7
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	b2da      	uxtb	r2, r3
 8004954:	7d7b      	ldrb	r3, [r7, #21]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 0306 	and.w	r3, r3, #6
 800495e:	b2db      	uxtb	r3, r3
 8004960:	4413      	add	r3, r2
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3302      	adds	r3, #2
 8004966:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800496a:	7d3b      	ldrb	r3, [r7, #20]
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	7cfb      	ldrb	r3, [r7, #19]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	b29b      	uxth	r3, r3
 8004978:	4413      	add	r3, r2
 800497a:	b29a      	uxth	r2, r3
 800497c:	7cbb      	ldrb	r3, [r7, #18]
 800497e:	029b      	lsls	r3, r3, #10
 8004980:	b29b      	uxth	r3, r3
 8004982:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004986:	b29b      	uxth	r3, r3
 8004988:	4413      	add	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	3301      	adds	r3, #1
 800498e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004990:	8bfa      	ldrh	r2, [r7, #30]
 8004992:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004996:	3b09      	subs	r3, #9
 8004998:	409a      	lsls	r2, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80049a4:	e056      	b.n	8004a54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049b4:	e055      	b.n	8004a62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80049b6:	f7ff fc13 	bl	80041e0 <SD_ReadyWait>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2bff      	cmp	r3, #255	@ 0xff
 80049be:	d14b      	bne.n	8004a58 <SD_disk_ioctl+0x230>
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049c6:	e047      	b.n	8004a58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80049c8:	2100      	movs	r1, #0
 80049ca:	2049      	movs	r0, #73	@ 0x49
 80049cc:	f7ff fced 	bl	80043aa <SD_SendCmd>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d142      	bne.n	8004a5c <SD_disk_ioctl+0x234>
 80049d6:	2110      	movs	r1, #16
 80049d8:	6a38      	ldr	r0, [r7, #32]
 80049da:	f7ff fc75 	bl	80042c8 <SD_RxDataBlock>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d03b      	beq.n	8004a5c <SD_disk_ioctl+0x234>
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049ea:	e037      	b.n	8004a5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80049ec:	2100      	movs	r1, #0
 80049ee:	204a      	movs	r0, #74	@ 0x4a
 80049f0:	f7ff fcdb 	bl	80043aa <SD_SendCmd>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d132      	bne.n	8004a60 <SD_disk_ioctl+0x238>
 80049fa:	2110      	movs	r1, #16
 80049fc:	6a38      	ldr	r0, [r7, #32]
 80049fe:	f7ff fc63 	bl	80042c8 <SD_RxDataBlock>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d02b      	beq.n	8004a60 <SD_disk_ioctl+0x238>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a0e:	e027      	b.n	8004a60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004a10:	2100      	movs	r1, #0
 8004a12:	207a      	movs	r0, #122	@ 0x7a
 8004a14:	f7ff fcc9 	bl	80043aa <SD_SendCmd>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d116      	bne.n	8004a4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004a24:	e00b      	b.n	8004a3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004a26:	6a3c      	ldr	r4, [r7, #32]
 8004a28:	1c63      	adds	r3, r4, #1
 8004a2a:	623b      	str	r3, [r7, #32]
 8004a2c:	f7ff fbae 	bl	800418c <SPI_RxByte>
 8004a30:	4603      	mov	r3, r0
 8004a32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004a34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d9ef      	bls.n	8004a26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a52:	e006      	b.n	8004a62 <SD_disk_ioctl+0x23a>
			break;
 8004a54:	bf00      	nop
 8004a56:	e004      	b.n	8004a62 <SD_disk_ioctl+0x23a>
			break;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <SD_disk_ioctl+0x23a>
			break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <SD_disk_ioctl+0x23a>
			break;
 8004a60:	bf00      	nop
		}

		DESELECT();
 8004a62:	f7ff fb52 	bl	800410a <DESELECT>
		SPI_RxByte();
 8004a66:	f7ff fb91 	bl	800418c <SPI_RxByte>
	}

	return res;
 8004a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	372c      	adds	r7, #44	@ 0x2c
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd90      	pop	{r4, r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000020 	.word	0x20000020

08004a7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <USER_initialize+0x24>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
    return SD_disk_initialize(pdrv);
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fce0 	bl	8004454 <SD_disk_initialize>
 8004a94:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000021 	.word	0x20000021

08004aa4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <USER_status+0x24>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
    return SD_disk_status(pdrv);
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fdb2 	bl	8004620 <SD_disk_status>
 8004abc:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000021 	.word	0x20000021

08004acc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004adc:	7bf8      	ldrb	r0, [r7, #15]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	f7ff fdb2 	bl	800464c <SD_disk_read>
 8004ae8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004b02:	7bf8      	ldrb	r0, [r7, #15]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	f7ff fe09 	bl	8004720 <SD_disk_write>
 8004b0e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	603a      	str	r2, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
 8004b24:	460b      	mov	r3, r1
 8004b26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004b2c:	79b9      	ldrb	r1, [r7, #6]
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fe78 	bl	8004828 <SD_disk_ioctl>
 8004b38:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	4a08      	ldr	r2, [pc, #32]	@ (8004b74 <disk_status+0x30>)
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	79fa      	ldrb	r2, [r7, #7]
 8004b5c:	4905      	ldr	r1, [pc, #20]	@ (8004b74 <disk_status+0x30>)
 8004b5e:	440a      	add	r2, r1
 8004b60:	7a12      	ldrb	r2, [r2, #8]
 8004b62:	4610      	mov	r0, r2
 8004b64:	4798      	blx	r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20002544 	.word	0x20002544

08004b78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc0 <disk_initialize+0x48>)
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d111      	bne.n	8004bb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <disk_initialize+0x48>)
 8004b94:	2101      	movs	r1, #1
 8004b96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <disk_initialize+0x48>)
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	79fa      	ldrb	r2, [r7, #7]
 8004ba6:	4906      	ldr	r1, [pc, #24]	@ (8004bc0 <disk_initialize+0x48>)
 8004ba8:	440a      	add	r2, r1
 8004baa:	7a12      	ldrb	r2, [r2, #8]
 8004bac:	4610      	mov	r0, r2
 8004bae:	4798      	blx	r3
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20002544 	.word	0x20002544

08004bc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c00 <disk_read+0x3c>)
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	689c      	ldr	r4, [r3, #8]
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	4a07      	ldr	r2, [pc, #28]	@ (8004c00 <disk_read+0x3c>)
 8004be4:	4413      	add	r3, r2
 8004be6:	7a18      	ldrb	r0, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	47a0      	blx	r4
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20002544 	.word	0x20002544

08004c04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <disk_write+0x3c>)
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68dc      	ldr	r4, [r3, #12]
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	4a07      	ldr	r2, [pc, #28]	@ (8004c40 <disk_write+0x3c>)
 8004c24:	4413      	add	r3, r2
 8004c26:	7a18      	ldrb	r0, [r3, #8]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	47a0      	blx	r4
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd90      	pop	{r4, r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20002544 	.word	0x20002544

08004c44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	603a      	str	r2, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
 8004c50:	460b      	mov	r3, r1
 8004c52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	4a09      	ldr	r2, [pc, #36]	@ (8004c7c <disk_ioctl+0x38>)
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	79fa      	ldrb	r2, [r7, #7]
 8004c62:	4906      	ldr	r1, [pc, #24]	@ (8004c7c <disk_ioctl+0x38>)
 8004c64:	440a      	add	r2, r1
 8004c66:	7a10      	ldrb	r0, [r2, #8]
 8004c68:	79b9      	ldrb	r1, [r7, #6]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	4798      	blx	r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20002544 	.word	0x20002544

08004c80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	b21a      	sxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b21b      	sxth	r3, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b21b      	sxth	r3, r3
 8004ca0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3303      	adds	r3, #3
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	3202      	adds	r2, #2
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	3201      	adds	r2, #1
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	return rv;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	887a      	ldrh	r2, [r7, #2]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	1c53      	adds	r3, r2, #1
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1c59      	adds	r1, r3, #1
 8004da8:	6179      	str	r1, [r7, #20]
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f1      	bne.n	8004d9e <mem_cpy+0x1a>
	}
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004dc6:	b480      	push	{r7}
 8004dc8:	b087      	sub	sp, #28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	617a      	str	r2, [r7, #20]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f3      	bne.n	8004dd6 <mem_set+0x10>
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	@ 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	61fa      	str	r2, [r7, #28]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	61ba      	str	r2, [r7, #24]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	1acb      	subs	r3, r1, r3
 8004e28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <mem_cmp+0x40>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0eb      	beq.n	8004e14 <mem_cmp+0x18>

	return r;
 8004e3c:	697b      	ldr	r3, [r7, #20]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3724      	adds	r7, #36	@ 0x24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e54:	e002      	b.n	8004e5c <chk_chr+0x12>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <chk_chr+0x26>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d1f2      	bne.n	8004e56 <chk_chr+0xc>
	return *str;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	781b      	ldrb	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e029      	b.n	8004ee8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004e94:	4a27      	ldr	r2, [pc, #156]	@ (8004f34 <chk_lock+0xb4>)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4413      	add	r3, r2
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01d      	beq.n	8004ede <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ea2:	4a24      	ldr	r2, [pc, #144]	@ (8004f34 <chk_lock+0xb4>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4413      	add	r3, r2
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d116      	bne.n	8004ee2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f34 <chk_lock+0xb4>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4413      	add	r3, r2
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d10c      	bne.n	8004ee2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <chk_lock+0xb4>)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	4413      	add	r3, r2
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d102      	bne.n	8004ee2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004edc:	e007      	b.n	8004eee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d9d2      	bls.n	8004e94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d109      	bne.n	8004f08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <chk_lock+0x80>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d101      	bne.n	8004f04 <chk_lock+0x84>
 8004f00:	2300      	movs	r3, #0
 8004f02:	e010      	b.n	8004f26 <chk_lock+0xa6>
 8004f04:	2312      	movs	r3, #18
 8004f06:	e00e      	b.n	8004f26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <chk_lock+0xa0>
 8004f0e:	4a09      	ldr	r2, [pc, #36]	@ (8004f34 <chk_lock+0xb4>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	4413      	add	r3, r2
 8004f16:	330c      	adds	r3, #12
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f1e:	d101      	bne.n	8004f24 <chk_lock+0xa4>
 8004f20:	2310      	movs	r3, #16
 8004f22:	e000      	b.n	8004f26 <chk_lock+0xa6>
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20002324 	.word	0x20002324

08004f38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e002      	b.n	8004f4a <enq_lock+0x12>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3301      	adds	r3, #1
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d806      	bhi.n	8004f5e <enq_lock+0x26>
 8004f50:	4a09      	ldr	r2, [pc, #36]	@ (8004f78 <enq_lock+0x40>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	4413      	add	r3, r2
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f2      	bne.n	8004f44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20002324 	.word	0x20002324

08004f7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e01f      	b.n	8004fcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004f8c:	4a41      	ldr	r2, [pc, #260]	@ (8005094 <inc_lock+0x118>)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d113      	bne.n	8004fc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8005094 <inc_lock+0x118>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d109      	bne.n	8004fc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004fb2:	4a38      	ldr	r2, [pc, #224]	@ (8005094 <inc_lock+0x118>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4413      	add	r3, r2
 8004fba:	3308      	adds	r3, #8
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d006      	beq.n	8004fd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d9dc      	bls.n	8004f8c <inc_lock+0x10>
 8004fd2:	e000      	b.n	8004fd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004fd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d132      	bne.n	8005042 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e002      	b.n	8004fe8 <inc_lock+0x6c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d806      	bhi.n	8004ffc <inc_lock+0x80>
 8004fee:	4a29      	ldr	r2, [pc, #164]	@ (8005094 <inc_lock+0x118>)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	4413      	add	r3, r2
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f2      	bne.n	8004fe2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d101      	bne.n	8005006 <inc_lock+0x8a>
 8005002:	2300      	movs	r3, #0
 8005004:	e040      	b.n	8005088 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4922      	ldr	r1, [pc, #136]	@ (8005094 <inc_lock+0x118>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	440b      	add	r3, r1
 8005012:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	491e      	ldr	r1, [pc, #120]	@ (8005094 <inc_lock+0x118>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	440b      	add	r3, r1
 8005020:	3304      	adds	r3, #4
 8005022:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	491a      	ldr	r1, [pc, #104]	@ (8005094 <inc_lock+0x118>)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	440b      	add	r3, r1
 8005030:	3308      	adds	r3, #8
 8005032:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005034:	4a17      	ldr	r2, [pc, #92]	@ (8005094 <inc_lock+0x118>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4413      	add	r3, r2
 800503c:	330c      	adds	r3, #12
 800503e:	2200      	movs	r2, #0
 8005040:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <inc_lock+0xe0>
 8005048:	4a12      	ldr	r2, [pc, #72]	@ (8005094 <inc_lock+0x118>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	4413      	add	r3, r2
 8005050:	330c      	adds	r3, #12
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <inc_lock+0xe0>
 8005058:	2300      	movs	r3, #0
 800505a:	e015      	b.n	8005088 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <inc_lock+0xf8>
 8005062:	4a0c      	ldr	r2, [pc, #48]	@ (8005094 <inc_lock+0x118>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	330c      	adds	r3, #12
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	3301      	adds	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	e001      	b.n	8005078 <inc_lock+0xfc>
 8005074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005078:	4906      	ldr	r1, [pc, #24]	@ (8005094 <inc_lock+0x118>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	440b      	add	r3, r1
 8005080:	330c      	adds	r3, #12
 8005082:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	20002324 	.word	0x20002324

08005098 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d825      	bhi.n	80050f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80050ac:	4a17      	ldr	r2, [pc, #92]	@ (800510c <dec_lock+0x74>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	4413      	add	r3, r2
 80050b4:	330c      	adds	r3, #12
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c0:	d101      	bne.n	80050c6 <dec_lock+0x2e>
 80050c2:	2300      	movs	r3, #0
 80050c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <dec_lock+0x3a>
 80050cc:	89fb      	ldrh	r3, [r7, #14]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050d2:	4a0e      	ldr	r2, [pc, #56]	@ (800510c <dec_lock+0x74>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	4413      	add	r3, r2
 80050da:	330c      	adds	r3, #12
 80050dc:	89fa      	ldrh	r2, [r7, #14]
 80050de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <dec_lock+0x5a>
 80050e6:	4a09      	ldr	r2, [pc, #36]	@ (800510c <dec_lock+0x74>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	4413      	add	r3, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	737b      	strb	r3, [r7, #13]
 80050f6:	e001      	b.n	80050fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80050f8:	2302      	movs	r3, #2
 80050fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80050fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20002324 	.word	0x20002324

08005110 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e010      	b.n	8005140 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800511e:	4a0d      	ldr	r2, [pc, #52]	@ (8005154 <clear_lock+0x44>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	4413      	add	r3, r2
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d105      	bne.n	800513a <clear_lock+0x2a>
 800512e:	4a09      	ldr	r2, [pc, #36]	@ (8005154 <clear_lock+0x44>)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4413      	add	r3, r2
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d9eb      	bls.n	800511e <clear_lock+0xe>
	}
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	20002324 	.word	0x20002324

08005158 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	78db      	ldrb	r3, [r3, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d034      	beq.n	80051d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005170:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7858      	ldrb	r0, [r3, #1]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800517c:	2301      	movs	r3, #1
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	f7ff fd40 	bl	8004c04 <disk_write>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <sync_window+0x38>
			res = FR_DISK_ERR;
 800518a:	2301      	movs	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	e022      	b.n	80051d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d217      	bcs.n	80051d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	789b      	ldrb	r3, [r3, #2]
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e010      	b.n	80051d0 <sync_window+0x78>
					wsect += fs->fsize;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	7858      	ldrb	r0, [r3, #1]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051c2:	2301      	movs	r3, #1
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	f7ff fd1d 	bl	8004c04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d8eb      	bhi.n	80051ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d01b      	beq.n	8005230 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ffad 	bl	8005158 <sync_window>
 80051fe:	4603      	mov	r3, r0
 8005200:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d113      	bne.n	8005230 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7858      	ldrb	r0, [r3, #1]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005212:	2301      	movs	r3, #1
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	f7ff fcd5 	bl	8004bc4 <disk_read>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ff87 	bl	8005158 <sync_window>
 800524a:	4603      	mov	r3, r0
 800524c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d159      	bne.n	8005308 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d149      	bne.n	80052f0 <sync_fs+0xb4>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	791b      	ldrb	r3, [r3, #4]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d145      	bne.n	80052f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	899b      	ldrh	r3, [r3, #12]
 800526e:	461a      	mov	r2, r3
 8005270:	2100      	movs	r1, #0
 8005272:	f7ff fda8 	bl	8004dc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3338      	adds	r3, #56	@ 0x38
 800527a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800527e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fd37 	bl	8004cf6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3338      	adds	r3, #56	@ 0x38
 800528c:	4921      	ldr	r1, [pc, #132]	@ (8005314 <sync_fs+0xd8>)
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fd4c 	bl	8004d2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3338      	adds	r3, #56	@ 0x38
 8005298:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800529c:	491e      	ldr	r1, [pc, #120]	@ (8005318 <sync_fs+0xdc>)
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fd44 	bl	8004d2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3338      	adds	r3, #56	@ 0x38
 80052a8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7ff fd3a 	bl	8004d2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3338      	adds	r3, #56	@ 0x38
 80052bc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f7ff fd30 	bl	8004d2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7858      	ldrb	r0, [r3, #1]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e4:	2301      	movs	r3, #1
 80052e6:	f7ff fc8d 	bl	8004c04 <disk_write>
			fs->fsi_flag = 0;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fca3 	bl	8004c44 <disk_ioctl>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <sync_fs+0xcc>
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	41615252 	.word	0x41615252
 8005318:	61417272 	.word	0x61417272

0800531c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	3b02      	subs	r3, #2
 800532a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	3b02      	subs	r3, #2
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d301      	bcc.n	800533c <clust2sect+0x20>
 8005338:	2300      	movs	r3, #0
 800533a:	e008      	b.n	800534e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	895b      	ldrh	r3, [r3, #10]
 8005340:	461a      	mov	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	fb03 f202 	mul.w	r2, r3, r2
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	4413      	add	r3, r2
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d904      	bls.n	800537a <get_fat+0x20>
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <get_fat+0x26>
		val = 1;	/* Internal error */
 800537a:	2301      	movs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e0ba      	b.n	80054f6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005380:	f04f 33ff 	mov.w	r3, #4294967295
 8005384:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b03      	cmp	r3, #3
 800538c:	f000 8082 	beq.w	8005494 <get_fat+0x13a>
 8005390:	2b03      	cmp	r3, #3
 8005392:	f300 80a6 	bgt.w	80054e2 <get_fat+0x188>
 8005396:	2b01      	cmp	r3, #1
 8005398:	d002      	beq.n	80053a0 <get_fat+0x46>
 800539a:	2b02      	cmp	r3, #2
 800539c:	d055      	beq.n	800544a <get_fat+0xf0>
 800539e:	e0a0      	b.n	80054e2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	899b      	ldrh	r3, [r3, #12]
 80053b6:	4619      	mov	r1, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80053be:	4413      	add	r3, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6938      	ldr	r0, [r7, #16]
 80053c4:	f7ff ff0c 	bl	80051e0 <move_window>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 808c 	bne.w	80054e8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	60fa      	str	r2, [r7, #12]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	8992      	ldrh	r2, [r2, #12]
 80053da:	fbb3 f1f2 	udiv	r1, r3, r2
 80053de:	fb01 f202 	mul.w	r2, r1, r2
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	899b      	ldrh	r3, [r3, #12]
 80053f6:	4619      	mov	r1, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80053fe:	4413      	add	r3, r2
 8005400:	4619      	mov	r1, r3
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f7ff feec 	bl	80051e0 <move_window>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d16e      	bne.n	80054ec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	899b      	ldrh	r3, [r3, #12]
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	fbb3 f1f2 	udiv	r1, r3, r2
 800541a:	fb01 f202 	mul.w	r2, r1, r2
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4313      	orrs	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <get_fat+0xe6>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	e002      	b.n	8005446 <get_fat+0xec>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005446:	617b      	str	r3, [r7, #20]
			break;
 8005448:	e055      	b.n	80054f6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	899b      	ldrh	r3, [r3, #12]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	b29b      	uxth	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	fbb3 f3f1 	udiv	r3, r3, r1
 800545e:	4413      	add	r3, r2
 8005460:	4619      	mov	r1, r3
 8005462:	6938      	ldr	r0, [r7, #16]
 8005464:	f7ff febc 	bl	80051e0 <move_window>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d140      	bne.n	80054f0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	8992      	ldrh	r2, [r2, #12]
 800547c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005480:	fb00 f202 	mul.w	r2, r0, r2
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	440b      	add	r3, r1
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fbf9 	bl	8004c80 <ld_word>
 800548e:	4603      	mov	r3, r0
 8005490:	617b      	str	r3, [r7, #20]
			break;
 8005492:	e030      	b.n	80054f6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	899b      	ldrh	r3, [r3, #12]
 800549c:	089b      	lsrs	r3, r3, #2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80054a8:	4413      	add	r3, r2
 80054aa:	4619      	mov	r1, r3
 80054ac:	6938      	ldr	r0, [r7, #16]
 80054ae:	f7ff fe97 	bl	80051e0 <move_window>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11d      	bne.n	80054f4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	8992      	ldrh	r2, [r2, #12]
 80054c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80054ca:	fb00 f202 	mul.w	r2, r0, r2
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fbec 	bl	8004cb0 <ld_dword>
 80054d8:	4603      	mov	r3, r0
 80054da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054de:	617b      	str	r3, [r7, #20]
			break;
 80054e0:	e009      	b.n	80054f6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80054e2:	2301      	movs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e006      	b.n	80054f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054e8:	bf00      	nop
 80054ea:	e004      	b.n	80054f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054f4:	bf00      	nop
		}
	}

	return val;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b089      	sub	sp, #36	@ 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800550c:	2302      	movs	r3, #2
 800550e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b01      	cmp	r3, #1
 8005514:	f240 8109 	bls.w	800572a <put_fat+0x22a>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	f080 8103 	bcs.w	800572a <put_fat+0x22a>
		switch (fs->fs_type) {
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	f000 80b6 	beq.w	800569a <put_fat+0x19a>
 800552e:	2b03      	cmp	r3, #3
 8005530:	f300 80fb 	bgt.w	800572a <put_fat+0x22a>
 8005534:	2b01      	cmp	r3, #1
 8005536:	d003      	beq.n	8005540 <put_fat+0x40>
 8005538:	2b02      	cmp	r3, #2
 800553a:	f000 8083 	beq.w	8005644 <put_fat+0x144>
 800553e:	e0f4      	b.n	800572a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4413      	add	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	899b      	ldrh	r3, [r3, #12]
 8005556:	4619      	mov	r1, r3
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fbb3 f3f1 	udiv	r3, r3, r1
 800555e:	4413      	add	r3, r2
 8005560:	4619      	mov	r1, r3
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff fe3c 	bl	80051e0 <move_window>
 8005568:	4603      	mov	r3, r0
 800556a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800556c:	7ffb      	ldrb	r3, [r7, #31]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 80d4 	bne.w	800571c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	61ba      	str	r2, [r7, #24]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	8992      	ldrh	r2, [r2, #12]
 8005584:	fbb3 f0f2 	udiv	r0, r3, r2
 8005588:	fb00 f202 	mul.w	r2, r0, r2
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	440b      	add	r3, r1
 8005590:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00d      	beq.n	80055b8 <put_fat+0xb8>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b25b      	sxtb	r3, r3
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	b25a      	sxtb	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e001      	b.n	80055bc <put_fat+0xbc>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	899b      	ldrh	r3, [r3, #12]
 80055ce:	4619      	mov	r1, r3
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055d6:	4413      	add	r3, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fe00 	bl	80051e0 <move_window>
 80055e0:	4603      	mov	r3, r0
 80055e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 809a 	bne.w	8005720 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	899b      	ldrh	r3, [r3, #12]
 80055f6:	461a      	mov	r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80055fe:	fb00 f202 	mul.w	r2, r0, r2
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	440b      	add	r3, r1
 8005606:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <put_fat+0x11a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e00e      	b.n	8005638 <put_fat+0x138>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f023 030f 	bic.w	r3, r3, #15
 8005624:	b25a      	sxtb	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	b25b      	sxtb	r3, r3
 8005632:	4313      	orrs	r3, r2
 8005634:	b25b      	sxtb	r3, r3
 8005636:	b2db      	uxtb	r3, r3
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	70da      	strb	r2, [r3, #3]
			break;
 8005642:	e072      	b.n	800572a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	899b      	ldrh	r3, [r3, #12]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	fbb3 f3f1 	udiv	r3, r3, r1
 8005658:	4413      	add	r3, r2
 800565a:	4619      	mov	r1, r3
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fdbf 	bl	80051e0 <move_window>
 8005662:	4603      	mov	r3, r0
 8005664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005666:	7ffb      	ldrb	r3, [r7, #31]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d15b      	bne.n	8005724 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	8992      	ldrh	r2, [r2, #12]
 800567a:	fbb3 f0f2 	udiv	r0, r3, r2
 800567e:	fb00 f202 	mul.w	r2, r0, r2
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	440b      	add	r3, r1
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	b292      	uxth	r2, r2
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fb32 	bl	8004cf6 <st_word>
			fs->wflag = 1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	70da      	strb	r2, [r3, #3]
			break;
 8005698:	e047      	b.n	800572a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	899b      	ldrh	r3, [r3, #12]
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	4619      	mov	r1, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ae:	4413      	add	r3, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff fd94 	bl	80051e0 <move_window>
 80056b8:	4603      	mov	r3, r0
 80056ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d132      	bne.n	8005728 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	8992      	ldrh	r2, [r2, #12]
 80056d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80056da:	fb00 f202 	mul.w	r2, r0, r2
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	440b      	add	r3, r1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fae4 	bl	8004cb0 <ld_dword>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80056ee:	4323      	orrs	r3, r4
 80056f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	8992      	ldrh	r2, [r2, #12]
 8005700:	fbb3 f0f2 	udiv	r0, r3, r2
 8005704:	fb00 f202 	mul.w	r2, r0, r2
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	440b      	add	r3, r1
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fb0c 	bl	8004d2c <st_dword>
			fs->wflag = 1;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	70da      	strb	r2, [r3, #3]
			break;
 800571a:	e006      	b.n	800572a <put_fat+0x22a>
			if (res != FR_OK) break;
 800571c:	bf00      	nop
 800571e:	e004      	b.n	800572a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005728:	bf00      	nop
		}
	}
	return res;
 800572a:	7ffb      	ldrb	r3, [r7, #31]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3724      	adds	r7, #36	@ 0x24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd90      	pop	{r4, r7, pc}

08005734 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d904      	bls.n	800575a <remove_chain+0x26>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	d301      	bcc.n	800575e <remove_chain+0x2a>
 800575a:	2302      	movs	r3, #2
 800575c:	e04b      	b.n	80057f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	69b8      	ldr	r0, [r7, #24]
 800576c:	f7ff fec8 	bl	8005500 <put_fat>
 8005770:	4603      	mov	r3, r0
 8005772:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <remove_chain+0x4a>
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	e03b      	b.n	80057f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fdea 	bl	800535a <get_fat>
 8005786:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d031      	beq.n	80057f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <remove_chain+0x64>
 8005794:	2302      	movs	r3, #2
 8005796:	e02e      	b.n	80057f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d101      	bne.n	80057a4 <remove_chain+0x70>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e028      	b.n	80057f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057a4:	2200      	movs	r2, #0
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	69b8      	ldr	r0, [r7, #24]
 80057aa:	f7ff fea9 	bl	8005500 <put_fat>
 80057ae:	4603      	mov	r3, r0
 80057b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057b2:	7ffb      	ldrb	r3, [r7, #31]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <remove_chain+0x88>
 80057b8:	7ffb      	ldrb	r3, [r7, #31]
 80057ba:	e01c      	b.n	80057f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	3b02      	subs	r3, #2
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d20b      	bcs.n	80057e2 <remove_chain+0xae>
			fs->free_clst++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	791b      	ldrb	r3, [r3, #4]
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d3c6      	bcc.n	800577e <remove_chain+0x4a>
 80057f0:	e000      	b.n	80057f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80057f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b088      	sub	sp, #32
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10d      	bne.n	8005830 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <create_chain+0x2c>
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	429a      	cmp	r2, r3
 8005828:	d31b      	bcc.n	8005862 <create_chain+0x64>
 800582a:	2301      	movs	r3, #1
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e018      	b.n	8005862 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fd91 	bl	800535a <get_fat>
 8005838:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d801      	bhi.n	8005844 <create_chain+0x46>
 8005840:	2301      	movs	r3, #1
 8005842:	e070      	b.n	8005926 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d101      	bne.n	8005850 <create_chain+0x52>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	e06a      	b.n	8005926 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	429a      	cmp	r2, r3
 8005858:	d201      	bcs.n	800585e <create_chain+0x60>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	e063      	b.n	8005926 <create_chain+0x128>
		scl = clst;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3301      	adds	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	429a      	cmp	r2, r3
 8005874:	d307      	bcc.n	8005886 <create_chain+0x88>
				ncl = 2;
 8005876:	2302      	movs	r3, #2
 8005878:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	429a      	cmp	r2, r3
 8005880:	d901      	bls.n	8005886 <create_chain+0x88>
 8005882:	2300      	movs	r3, #0
 8005884:	e04f      	b.n	8005926 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005886:	69f9      	ldr	r1, [r7, #28]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fd66 	bl	800535a <get_fat>
 800588e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00e      	beq.n	80058b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d003      	beq.n	80058a4 <create_chain+0xa6>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d101      	bne.n	80058a8 <create_chain+0xaa>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	e03e      	b.n	8005926 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d1da      	bne.n	8005866 <create_chain+0x68>
 80058b0:	2300      	movs	r3, #0
 80058b2:	e038      	b.n	8005926 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80058b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ba:	69f9      	ldr	r1, [r7, #28]
 80058bc:	6938      	ldr	r0, [r7, #16]
 80058be:	f7ff fe1f 	bl	8005500 <put_fat>
 80058c2:	4603      	mov	r3, r0
 80058c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <create_chain+0xe2>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6938      	ldr	r0, [r7, #16]
 80058d8:	f7ff fe12 	bl	8005500 <put_fat>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d116      	bne.n	8005914 <create_chain+0x116>
		fs->last_clst = ncl;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	3b02      	subs	r3, #2
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d804      	bhi.n	8005904 <create_chain+0x106>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	1e5a      	subs	r2, r3, #1
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	791b      	ldrb	r3, [r3, #4]
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	711a      	strb	r2, [r3, #4]
 8005912:	e007      	b.n	8005924 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d102      	bne.n	8005920 <create_chain+0x122>
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
 800591e:	e000      	b.n	8005922 <create_chain+0x124>
 8005920:	2301      	movs	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005924:	69fb      	ldr	r3, [r7, #28]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	3304      	adds	r3, #4
 8005944:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	899b      	ldrh	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	8952      	ldrh	r2, [r2, #10]
 8005956:	fbb3 f3f2 	udiv	r3, r3, r2
 800595a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	613a      	str	r2, [r7, #16]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <clmt_clust+0x42>
 800596c:	2300      	movs	r3, #0
 800596e:	e010      	b.n	8005992 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	429a      	cmp	r2, r3
 8005976:	d307      	bcc.n	8005988 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	3304      	adds	r3, #4
 8005984:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005986:	e7e9      	b.n	800595c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005988:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
}
 8005992:	4618      	mov	r0, r3
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b4:	d204      	bcs.n	80059c0 <dir_sdi+0x22>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80059c0:	2302      	movs	r3, #2
 80059c2:	e071      	b.n	8005aa8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <dir_sdi+0x46>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d902      	bls.n	80059e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10c      	bne.n	8005a04 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	8912      	ldrh	r2, [r2, #8]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d301      	bcc.n	80059fa <dir_sdi+0x5c>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e056      	b.n	8005aa8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	61da      	str	r2, [r3, #28]
 8005a02:	e02d      	b.n	8005a60 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	895b      	ldrh	r3, [r3, #10]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	899b      	ldrh	r3, [r3, #12]
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a14:	e019      	b.n	8005a4a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fc9d 	bl	800535a <get_fat>
 8005a20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d101      	bne.n	8005a2e <dir_sdi+0x90>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e03c      	b.n	8005aa8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d904      	bls.n	8005a3e <dir_sdi+0xa0>
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d301      	bcc.n	8005a42 <dir_sdi+0xa4>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e032      	b.n	8005aa8 <dir_sdi+0x10a>
			ofs -= csz;
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d2e1      	bcs.n	8005a16 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005a52:	6979      	ldr	r1, [r7, #20]
 8005a54:	6938      	ldr	r0, [r7, #16]
 8005a56:	f7ff fc61 	bl	800531c <clust2sect>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <dir_sdi+0xd4>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e01a      	b.n	8005aa8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	899b      	ldrh	r3, [r3, #12]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a82:	441a      	add	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	899b      	ldrh	r3, [r3, #12]
 8005a92:	461a      	mov	r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a9a:	fb00 f202 	mul.w	r2, r0, r2
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	18ca      	adds	r2, r1, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	3320      	adds	r3, #32
 8005ac6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <dir_next+0x28>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ad6:	d301      	bcc.n	8005adc <dir_next+0x2c>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	e0bb      	b.n	8005c54 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	899b      	ldrh	r3, [r3, #12]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ae8:	fb01 f202 	mul.w	r2, r1, r2
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f040 809d 	bne.w	8005c2e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	8912      	ldrh	r2, [r2, #8]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f0c0 808d 	bcc.w	8005c2e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	e09a      	b.n	8005c54 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	899b      	ldrh	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	8952      	ldrh	r2, [r2, #10]
 8005b2e:	3a01      	subs	r2, #1
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d17b      	bne.n	8005c2e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7ff fc0b 	bl	800535a <get_fat>
 8005b44:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d801      	bhi.n	8005b50 <dir_next+0xa0>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e081      	b.n	8005c54 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d101      	bne.n	8005b5c <dir_next+0xac>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e07b      	b.n	8005c54 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d359      	bcc.n	8005c1a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61da      	str	r2, [r3, #28]
 8005b72:	2304      	movs	r3, #4
 8005b74:	e06e      	b.n	8005c54 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7ff fe3d 	bl	80057fe <create_chain>
 8005b84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <dir_next+0xe0>
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	e061      	b.n	8005c54 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <dir_next+0xea>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e05c      	b.n	8005c54 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d101      	bne.n	8005ba6 <dir_next+0xf6>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e056      	b.n	8005c54 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff fad6 	bl	8005158 <sync_window>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <dir_next+0x106>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e04e      	b.n	8005c54 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	899b      	ldrh	r3, [r3, #12]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	f7ff f8ff 	bl	8004dc6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fba4 	bl	800531c <clust2sect>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bda:	e012      	b.n	8005c02 <dir_next+0x152>
						fs->wflag = 1;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fab8 	bl	8005158 <sync_window>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <dir_next+0x142>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e030      	b.n	8005c54 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	895b      	ldrh	r3, [r3, #10]
 8005c06:	461a      	mov	r2, r3
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d3e6      	bcc.n	8005bdc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005c20:	6979      	ldr	r1, [r7, #20]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fb7a 	bl	800531c <clust2sect>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	899b      	ldrh	r3, [r3, #12]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c46:	fb00 f202 	mul.w	r2, r0, r2
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	18ca      	adds	r2, r1, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fe95 	bl	800599e <dir_sdi>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d12b      	bne.n	8005cd6 <dir_alloc+0x7a>
		n = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff faa9 	bl	80051e0 <move_window>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11d      	bne.n	8005cd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2be5      	cmp	r3, #229	@ 0xe5
 8005ca0:	d004      	beq.n	8005cac <dir_alloc+0x50>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d102      	bne.n	8005cc0 <dir_alloc+0x64>
 8005cba:	e00c      	b.n	8005cd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fef4 	bl	8005ab0 <dir_next>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0d7      	beq.n	8005c82 <dir_alloc+0x26>
 8005cd2:	e000      	b.n	8005cd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005cd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d101      	bne.n	8005ce0 <dir_alloc+0x84>
 8005cdc:	2307      	movs	r3, #7
 8005cde:	75fb      	strb	r3, [r7, #23]
	return res;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	331a      	adds	r3, #26
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe ffc1 	bl	8004c80 <ld_word>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d109      	bne.n	8005d1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	3314      	adds	r3, #20
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe ffb6 	bl	8004c80 <ld_word>
 8005d14:	4603      	mov	r3, r0
 8005d16:	041b      	lsls	r3, r3, #16
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	331a      	adds	r3, #26
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe ffd9 	bl	8004cf6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d109      	bne.n	8005d60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f103 0214 	add.w	r2, r3, #20
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fe ffcb 	bl	8004cf6 <st_word>
	}
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	331a      	adds	r3, #26
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe ff82 	bl	8004c80 <ld_word>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <cmp_lfn+0x1e>
 8005d82:	2300      	movs	r3, #0
 8005d84:	e059      	b.n	8005e3a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d8e:	1e5a      	subs	r2, r3, #1
 8005d90:	4613      	mov	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	81fb      	strh	r3, [r7, #14]
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	e033      	b.n	8005e0e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005da6:	4a27      	ldr	r2, [pc, #156]	@ (8005e44 <cmp_lfn+0xdc>)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	4413      	add	r3, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe ff63 	bl	8004c80 <ld_word>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005dbe:	89fb      	ldrh	r3, [r7, #14]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01a      	beq.n	8005dfa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8005dc8:	d812      	bhi.n	8005df0 <cmp_lfn+0x88>
 8005dca:	89bb      	ldrh	r3, [r7, #12]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 f85f 	bl	8007e90 <ff_wtoupper>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461c      	mov	r4, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	617a      	str	r2, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f002 f853 	bl	8007e90 <ff_wtoupper>
 8005dea:	4603      	mov	r3, r0
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d001      	beq.n	8005df4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005df0:	2300      	movs	r3, #0
 8005df2:	e022      	b.n	8005e3a <cmp_lfn+0xd2>
			}
			wc = uc;
 8005df4:	89bb      	ldrh	r3, [r7, #12]
 8005df6:	81fb      	strh	r3, [r7, #14]
 8005df8:	e006      	b.n	8005e08 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005dfa:	89bb      	ldrh	r3, [r7, #12]
 8005dfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d001      	beq.n	8005e08 <cmp_lfn+0xa0>
 8005e04:	2300      	movs	r3, #0
 8005e06:	e018      	b.n	8005e3a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d9c8      	bls.n	8005da6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <cmp_lfn+0xd0>
 8005e20:	89fb      	ldrh	r3, [r7, #14]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <cmp_lfn+0xd0>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <cmp_lfn+0xd0>
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005e38:	2301      	movs	r3, #1
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	08009370 	.word	0x08009370

08005e48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	460b      	mov	r3, r1
 8005e58:	71fb      	strb	r3, [r7, #7]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	330d      	adds	r3, #13
 8005e62:	79ba      	ldrb	r2, [r7, #6]
 8005e64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	330b      	adds	r3, #11
 8005e6a:	220f      	movs	r2, #15
 8005e6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	330c      	adds	r3, #12
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	331a      	adds	r3, #26
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe ff3a 	bl	8004cf6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	4613      	mov	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	82fb      	strh	r3, [r7, #22]
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005e9a:	8afb      	ldrh	r3, [r7, #22]
 8005e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <put_lfn+0x6c>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	61fa      	str	r2, [r7, #28]
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005eb4:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <put_lfn+0xcc>)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	4413      	add	r3, r2
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	8afa      	ldrh	r2, [r7, #22]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe ff15 	bl	8004cf6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005ecc:	8afb      	ldrh	r3, [r7, #22]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <put_lfn+0x90>
 8005ed2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ed6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b0c      	cmp	r3, #12
 8005ee2:	d9da      	bls.n	8005e9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005ee4:	8afb      	ldrh	r3, [r7, #22]
 8005ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d006      	beq.n	8005efc <put_lfn+0xb4>
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <put_lfn+0xbc>
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	79fa      	ldrb	r2, [r7, #7]
 8005f08:	701a      	strb	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	08009370 	.word	0x08009370

08005f18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08c      	sub	sp, #48	@ 0x30
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005f26:	220b      	movs	r2, #11
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7fe ff2a 	bl	8004d84 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d92b      	bls.n	8005f8e <gen_numname+0x76>
		sr = seq;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005f3a:	e022      	b.n	8005f82 <gen_numname+0x6a>
			wc = *lfn++;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	1c9a      	adds	r2, r3, #2
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005f46:	2300      	movs	r3, #0
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f4a:	e017      	b.n	8005f7c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005a      	lsls	r2, r3, #1
 8005f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	4413      	add	r3, r2
 8005f58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005f5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <gen_numname+0x5e>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005f70:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005f74:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	3301      	adds	r3, #1
 8005f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	2b0f      	cmp	r3, #15
 8005f80:	d9e4      	bls.n	8005f4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1d8      	bne.n	8005f3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005f8e:	2307      	movs	r3, #7
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	3330      	adds	r3, #48	@ 0x30
 8005f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fa6:	2b39      	cmp	r3, #57	@ 0x39
 8005fa8:	d904      	bls.n	8005fb4 <gen_numname+0x9c>
 8005faa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fae:	3307      	adds	r3, #7
 8005fb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005fba:	3330      	adds	r3, #48	@ 0x30
 8005fbc:	443b      	add	r3, r7
 8005fbe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005fc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1df      	bne.n	8005f92 <gen_numname+0x7a>
	ns[i] = '~';
 8005fd2:	f107 0214 	add.w	r2, r7, #20
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	4413      	add	r3, r2
 8005fda:	227e      	movs	r2, #126	@ 0x7e
 8005fdc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe2:	e002      	b.n	8005fea <gen_numname+0xd2>
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d205      	bcs.n	8005ffe <gen_numname+0xe6>
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	4413      	add	r3, r2
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d1f2      	bne.n	8005fe4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	2b07      	cmp	r3, #7
 8006002:	d807      	bhi.n	8006014 <gen_numname+0xfc>
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	62ba      	str	r2, [r7, #40]	@ 0x28
 800600a:	3330      	adds	r3, #48	@ 0x30
 800600c:	443b      	add	r3, r7
 800600e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006012:	e000      	b.n	8006016 <gen_numname+0xfe>
 8006014:	2120      	movs	r1, #32
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	627a      	str	r2, [r7, #36]	@ 0x24
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	460a      	mov	r2, r1
 8006022:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	2b07      	cmp	r3, #7
 8006028:	d9e9      	bls.n	8005ffe <gen_numname+0xe6>
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	3730      	adds	r7, #48	@ 0x30
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006040:	230b      	movs	r3, #11
 8006042:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	0852      	lsrs	r2, r2, #1
 800604a:	01db      	lsls	r3, r3, #7
 800604c:	4313      	orrs	r3, r2
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	6079      	str	r1, [r7, #4]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	4413      	add	r3, r2
 800605a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	3b01      	subs	r3, #1
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ed      	bne.n	8006044 <sum_sfn+0x10>
	return sum;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006084:	2100      	movs	r1, #0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fc89 	bl	800599e <dir_sdi>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <dir_find+0x24>
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	e0a9      	b.n	80061ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800609a:	23ff      	movs	r3, #255	@ 0xff
 800609c:	753b      	strb	r3, [r7, #20]
 800609e:	7d3b      	ldrb	r3, [r7, #20]
 80060a0:	757b      	strb	r3, [r7, #21]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4619      	mov	r1, r3
 80060b0:	6938      	ldr	r0, [r7, #16]
 80060b2:	f7ff f895 	bl	80051e0 <move_window>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 8090 	bne.w	80061e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80060ca:	7dbb      	ldrb	r3, [r7, #22]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <dir_find+0x60>
 80060d0:	2304      	movs	r3, #4
 80060d2:	75fb      	strb	r3, [r7, #23]
 80060d4:	e08a      	b.n	80061ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	330b      	adds	r3, #11
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80060ea:	7dbb      	ldrb	r3, [r7, #22]
 80060ec:	2be5      	cmp	r3, #229	@ 0xe5
 80060ee:	d007      	beq.n	8006100 <dir_find+0x8a>
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <dir_find+0x98>
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b0f      	cmp	r3, #15
 80060fe:	d006      	beq.n	800610e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006100:	23ff      	movs	r3, #255	@ 0xff
 8006102:	757b      	strb	r3, [r7, #21]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
 800610c:	e05e      	b.n	80061cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b0f      	cmp	r3, #15
 8006112:	d136      	bne.n	8006182 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d154      	bne.n	80061cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006122:	7dbb      	ldrb	r3, [r7, #22]
 8006124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	7b5b      	ldrb	r3, [r3, #13]
 8006132:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006134:	7dbb      	ldrb	r3, [r7, #22]
 8006136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800613a:	75bb      	strb	r3, [r7, #22]
 800613c:	7dbb      	ldrb	r3, [r7, #22]
 800613e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006148:	7dba      	ldrb	r2, [r7, #22]
 800614a:	7d7b      	ldrb	r3, [r7, #21]
 800614c:	429a      	cmp	r2, r3
 800614e:	d115      	bne.n	800617c <dir_find+0x106>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	330d      	adds	r3, #13
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	7d3a      	ldrb	r2, [r7, #20]
 800615a:	429a      	cmp	r2, r3
 800615c:	d10e      	bne.n	800617c <dir_find+0x106>
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f7ff fdfd 	bl	8005d68 <cmp_lfn>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <dir_find+0x106>
 8006174:	7d7b      	ldrb	r3, [r7, #21]
 8006176:	3b01      	subs	r3, #1
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e000      	b.n	800617e <dir_find+0x108>
 800617c:	23ff      	movs	r3, #255	@ 0xff
 800617e:	757b      	strb	r3, [r7, #21]
 8006180:	e024      	b.n	80061cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006182:	7d7b      	ldrb	r3, [r7, #21]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <dir_find+0x126>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff ff51 	bl	8006034 <sum_sfn>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	7d3b      	ldrb	r3, [r7, #20]
 8006198:	4293      	cmp	r3, r2
 800619a:	d024      	beq.n	80061e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <dir_find+0x14a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a18      	ldr	r0, [r3, #32]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3324      	adds	r3, #36	@ 0x24
 80061b2:	220b      	movs	r2, #11
 80061b4:	4619      	mov	r1, r3
 80061b6:	f7fe fe21 	bl	8004dfc <mem_cmp>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d014      	beq.n	80061ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061c0:	23ff      	movs	r3, #255	@ 0xff
 80061c2:	757b      	strb	r3, [r7, #21]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80061cc:	2100      	movs	r1, #0
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fc6e 	bl	8005ab0 <dir_next>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f43f af65 	beq.w	80060aa <dir_find+0x34>
 80061e0:	e004      	b.n	80061ec <dir_find+0x176>
		if (res != FR_OK) break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80061ea:	bf00      	nop

	return res;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08c      	sub	sp, #48	@ 0x30
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800620c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <dir_register+0x20>
 8006214:	2306      	movs	r3, #6
 8006216:	e0e0      	b.n	80063da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
 800621c:	e002      	b.n	8006224 <dir_register+0x2c>
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	3301      	adds	r3, #1
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f4      	bne.n	800621e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	220c      	movs	r2, #12
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fd9f 	bl	8004d84 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d032      	beq.n	80062b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2240      	movs	r2, #64	@ 0x40
 8006254:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006258:	2301      	movs	r3, #1
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800625c:	e016      	b.n	800628c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	f107 010c 	add.w	r1, r7, #12
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	f7ff fe53 	bl	8005f18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff feff 	bl	8006076 <dir_find>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800627e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	3301      	adds	r3, #1
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	2b63      	cmp	r3, #99	@ 0x63
 8006290:	d9e5      	bls.n	800625e <dir_register+0x66>
 8006292:	e000      	b.n	8006296 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006294:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	2b64      	cmp	r3, #100	@ 0x64
 800629a:	d101      	bne.n	80062a0 <dir_register+0xa8>
 800629c:	2307      	movs	r3, #7
 800629e:	e09c      	b.n	80063da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80062a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d002      	beq.n	80062ae <dir_register+0xb6>
 80062a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062ac:	e095      	b.n	80063da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80062ae:	7dfa      	ldrb	r2, [r7, #23]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <dir_register+0xd8>
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	330c      	adds	r3, #12
 80062c4:	4a47      	ldr	r2, [pc, #284]	@ (80063e4 <dir_register+0x1ec>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	3301      	adds	r3, #1
 80062ce:	e000      	b.n	80062d2 <dir_register+0xda>
 80062d0:	2301      	movs	r3, #1
 80062d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80062d4:	6a39      	ldr	r1, [r7, #32]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fcc0 	bl	8005c5c <dir_alloc>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80062e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d148      	bne.n	800637c <dir_register+0x184>
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d042      	beq.n	800637c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	015b      	lsls	r3, r3, #5
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fb4b 	bl	800599e <dir_sdi>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800630e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006312:	2b00      	cmp	r3, #0
 8006314:	d132      	bne.n	800637c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3324      	adds	r3, #36	@ 0x24
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fe8a 	bl	8006034 <sum_sfn>
 8006320:	4603      	mov	r3, r0
 8006322:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	4619      	mov	r1, r3
 800632a:	69f8      	ldr	r0, [r7, #28]
 800632c:	f7fe ff58 	bl	80051e0 <move_window>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11d      	bne.n	800637a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	6918      	ldr	r0, [r3, #16]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a19      	ldr	r1, [r3, #32]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	7efb      	ldrb	r3, [r7, #27]
 800634c:	f7ff fd7c 	bl	8005e48 <put_lfn>
				fs->wflag = 1;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2201      	movs	r2, #1
 8006354:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006356:	2100      	movs	r1, #0
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fba9 	bl	8005ab0 <dir_next>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006364:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <dir_register+0x184>
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	3b01      	subs	r3, #1
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1d5      	bne.n	8006324 <dir_register+0x12c>
 8006378:	e000      	b.n	800637c <dir_register+0x184>
				if (res != FR_OK) break;
 800637a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800637c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006380:	2b00      	cmp	r3, #0
 8006382:	d128      	bne.n	80063d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4619      	mov	r1, r3
 800638a:	69f8      	ldr	r0, [r7, #28]
 800638c:	f7fe ff28 	bl	80051e0 <move_window>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11b      	bne.n	80063d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	2220      	movs	r2, #32
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fd0d 	bl	8004dc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a18      	ldr	r0, [r3, #32]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3324      	adds	r3, #36	@ 0x24
 80063b4:	220b      	movs	r2, #11
 80063b6:	4619      	mov	r1, r3
 80063b8:	f7fe fce4 	bl	8004d84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	330c      	adds	r3, #12
 80063c8:	f002 0218 	and.w	r2, r2, #24
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2201      	movs	r2, #1
 80063d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3730      	adds	r7, #48	@ 0x30
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	4ec4ec4f 	.word	0x4ec4ec4f

080063e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	@ 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	61ba      	str	r2, [r7, #24]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006418:	2b1f      	cmp	r3, #31
 800641a:	d940      	bls.n	800649e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800641c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800641e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006420:	d006      	beq.n	8006430 <create_name+0x48>
 8006422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006424:	2b5c      	cmp	r3, #92	@ 0x5c
 8006426:	d110      	bne.n	800644a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006428:	e002      	b.n	8006430 <create_name+0x48>
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3301      	adds	r3, #1
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b2f      	cmp	r3, #47	@ 0x2f
 800643a:	d0f6      	beq.n	800642a <create_name+0x42>
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	4413      	add	r3, r2
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b5c      	cmp	r3, #92	@ 0x5c
 8006446:	d0f0      	beq.n	800642a <create_name+0x42>
			break;
 8006448:	e02a      	b.n	80064a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2bfe      	cmp	r3, #254	@ 0xfe
 800644e:	d901      	bls.n	8006454 <create_name+0x6c>
 8006450:	2306      	movs	r3, #6
 8006452:	e17d      	b.n	8006750 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006456:	b2db      	uxtb	r3, r3
 8006458:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800645a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800645c:	2101      	movs	r1, #1
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fcda 	bl	8007e18 <ff_convert>
 8006464:	4603      	mov	r3, r0
 8006466:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006468:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <create_name+0x8a>
 800646e:	2306      	movs	r3, #6
 8006470:	e16e      	b.n	8006750 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006474:	2b7f      	cmp	r3, #127	@ 0x7f
 8006476:	d809      	bhi.n	800648c <create_name+0xa4>
 8006478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800647a:	4619      	mov	r1, r3
 800647c:	488d      	ldr	r0, [pc, #564]	@ (80066b4 <create_name+0x2cc>)
 800647e:	f7fe fce4 	bl	8004e4a <chk_chr>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <create_name+0xa4>
 8006488:	2306      	movs	r3, #6
 800648a:	e161      	b.n	8006750 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	617a      	str	r2, [r7, #20]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800649a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800649c:	e7b4      	b.n	8006408 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800649e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	441a      	add	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064ac:	2b1f      	cmp	r3, #31
 80064ae:	d801      	bhi.n	80064b4 <create_name+0xcc>
 80064b0:	2304      	movs	r3, #4
 80064b2:	e000      	b.n	80064b6 <create_name+0xce>
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80064ba:	e011      	b.n	80064e0 <create_name+0xf8>
		w = lfn[di - 1];
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80064c2:	3b01      	subs	r3, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80064ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d002      	beq.n	80064da <create_name+0xf2>
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d8:	d106      	bne.n	80064e8 <create_name+0x100>
		di--;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	3b01      	subs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ea      	bne.n	80064bc <create_name+0xd4>
 80064e6:	e000      	b.n	80064ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80064e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	2200      	movs	r2, #0
 80064f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <create_name+0x118>
 80064fc:	2306      	movs	r3, #6
 80064fe:	e127      	b.n	8006750 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3324      	adds	r3, #36	@ 0x24
 8006504:	220b      	movs	r2, #11
 8006506:	2120      	movs	r1, #32
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fc5c 	bl	8004dc6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e002      	b.n	800651a <create_name+0x132>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	3301      	adds	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	2b20      	cmp	r3, #32
 8006526:	d0f5      	beq.n	8006514 <create_name+0x12c>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	2b2e      	cmp	r3, #46	@ 0x2e
 8006534:	d0ee      	beq.n	8006514 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <create_name+0x168>
 800653c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006540:	f043 0303 	orr.w	r3, r3, #3
 8006544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006548:	e002      	b.n	8006550 <create_name+0x168>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	3b01      	subs	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <create_name+0x182>
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800655c:	3b01      	subs	r3, #1
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	2b2e      	cmp	r3, #46	@ 0x2e
 8006568:	d1ef      	bne.n	800654a <create_name+0x162>

	i = b = 0; ni = 8;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006570:	2300      	movs	r3, #0
 8006572:	623b      	str	r3, [r7, #32]
 8006574:	2308      	movs	r3, #8
 8006576:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	61ba      	str	r2, [r7, #24]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8090 	beq.w	80066b0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006590:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006592:	2b20      	cmp	r3, #32
 8006594:	d006      	beq.n	80065a4 <create_name+0x1bc>
 8006596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006598:	2b2e      	cmp	r3, #46	@ 0x2e
 800659a:	d10a      	bne.n	80065b2 <create_name+0x1ca>
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d006      	beq.n	80065b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80065a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a8:	f043 0303 	orr.w	r3, r3, #3
 80065ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065b0:	e07d      	b.n	80066ae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80065b2:	6a3a      	ldr	r2, [r7, #32]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d203      	bcs.n	80065c2 <create_name+0x1da>
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d123      	bne.n	800660a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2b0b      	cmp	r3, #11
 80065c6:	d106      	bne.n	80065d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80065c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065cc:	f043 0303 	orr.w	r3, r3, #3
 80065d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065d4:	e075      	b.n	80066c2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d005      	beq.n	80065ea <create_name+0x202>
 80065de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e2:	f043 0303 	orr.w	r3, r3, #3
 80065e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d866      	bhi.n	80066c0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	2308      	movs	r3, #8
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	230b      	movs	r3, #11
 80065fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80065fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006608:	e051      	b.n	80066ae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800660a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800660c:	2b7f      	cmp	r3, #127	@ 0x7f
 800660e:	d914      	bls.n	800663a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006610:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fbff 	bl	8007e18 <ff_convert>
 800661a:	4603      	mov	r3, r0
 800661c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800661e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <create_name+0x246>
 8006624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006626:	3b80      	subs	r3, #128	@ 0x80
 8006628:	4a23      	ldr	r2, [pc, #140]	@ (80066b8 <create_name+0x2d0>)
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800662e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006632:	f043 0302 	orr.w	r3, r3, #2
 8006636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800663a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <create_name+0x268>
 8006640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006642:	4619      	mov	r1, r3
 8006644:	481d      	ldr	r0, [pc, #116]	@ (80066bc <create_name+0x2d4>)
 8006646:	f7fe fc00 	bl	8004e4a <chk_chr>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006650:	235f      	movs	r3, #95	@ 0x5f
 8006652:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006658:	f043 0303 	orr.w	r3, r3, #3
 800665c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006660:	e01b      	b.n	800669a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d909      	bls.n	800667c <create_name+0x294>
 8006668:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800666a:	2b5a      	cmp	r3, #90	@ 0x5a
 800666c:	d806      	bhi.n	800667c <create_name+0x294>
					b |= 2;
 800666e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006672:	f043 0302 	orr.w	r3, r3, #2
 8006676:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800667a:	e00e      	b.n	800669a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800667c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800667e:	2b60      	cmp	r3, #96	@ 0x60
 8006680:	d90b      	bls.n	800669a <create_name+0x2b2>
 8006682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006684:	2b7a      	cmp	r3, #122	@ 0x7a
 8006686:	d808      	bhi.n	800669a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006688:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006694:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006696:	3b20      	subs	r3, #32
 8006698:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	623a      	str	r2, [r7, #32]
 80066a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066a2:	b2d1      	uxtb	r1, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4413      	add	r3, r2
 80066a8:	460a      	mov	r2, r1
 80066aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80066ae:	e763      	b.n	8006578 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80066b0:	bf00      	nop
 80066b2:	e006      	b.n	80066c2 <create_name+0x2da>
 80066b4:	08009274 	.word	0x08009274
 80066b8:	080092f0 	.word	0x080092f0
 80066bc:	08009280 	.word	0x08009280
			if (si > di) break;			/* No extension */
 80066c0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066c8:	2be5      	cmp	r3, #229	@ 0xe5
 80066ca:	d103      	bne.n	80066d4 <create_name+0x2ec>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2205      	movs	r2, #5
 80066d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d104      	bne.n	80066e4 <create_name+0x2fc>
 80066da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80066e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066e8:	f003 030c 	and.w	r3, r3, #12
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	d005      	beq.n	80066fc <create_name+0x314>
 80066f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d105      	bne.n	8006708 <create_name+0x320>
 80066fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d117      	bne.n	8006744 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006714:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	2b01      	cmp	r3, #1
 800671e:	d105      	bne.n	800672c <create_name+0x344>
 8006720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006724:	f043 0310 	orr.w	r3, r3, #16
 8006728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800672c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006730:	f003 030c 	and.w	r3, r3, #12
 8006734:	2b04      	cmp	r3, #4
 8006736:	d105      	bne.n	8006744 <create_name+0x35c>
 8006738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800674a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800674e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006750:	4618      	mov	r0, r3
 8006752:	3728      	adds	r7, #40	@ 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800676c:	e002      	b.n	8006774 <follow_path+0x1c>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b2f      	cmp	r3, #47	@ 0x2f
 800677a:	d0f8      	beq.n	800676e <follow_path+0x16>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b5c      	cmp	r3, #92	@ 0x5c
 8006782:	d0f4      	beq.n	800676e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b1f      	cmp	r3, #31
 8006790:	d80a      	bhi.n	80067a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2280      	movs	r2, #128	@ 0x80
 8006796:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff f8fe 	bl	800599e <dir_sdi>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
 80067a6:	e048      	b.n	800683a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067a8:	463b      	mov	r3, r7
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff fe1b 	bl	80063e8 <create_name>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d139      	bne.n	8006830 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fc5a 	bl	8006076 <dir_find>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80067cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d12c      	bne.n	8006834 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d127      	bne.n	8006834 <follow_path+0xdc>
 80067e4:	2305      	movs	r3, #5
 80067e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80067e8:	e024      	b.n	8006834 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d121      	bne.n	8006838 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	799b      	ldrb	r3, [r3, #6]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006800:	2305      	movs	r3, #5
 8006802:	75fb      	strb	r3, [r7, #23]
 8006804:	e019      	b.n	800683a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	8992      	ldrh	r2, [r2, #12]
 8006814:	fbb3 f0f2 	udiv	r0, r3, r2
 8006818:	fb00 f202 	mul.w	r2, r0, r2
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	440b      	add	r3, r1
 8006820:	4619      	mov	r1, r3
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fa61 	bl	8005cea <ld_clust>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800682e:	e7bb      	b.n	80067a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <follow_path+0xe2>
				break;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006838:	bf00      	nop
			}
		}
	}

	return res;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d031      	beq.n	80068be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e002      	b.n	8006868 <get_ldnumber+0x24>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	3301      	adds	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b1f      	cmp	r3, #31
 800686e:	d903      	bls.n	8006878 <get_ldnumber+0x34>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b3a      	cmp	r3, #58	@ 0x3a
 8006876:	d1f4      	bne.n	8006862 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b3a      	cmp	r3, #58	@ 0x3a
 800687e:	d11c      	bne.n	80068ba <get_ldnumber+0x76>
			tp = *path;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	60fa      	str	r2, [r7, #12]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	3b30      	subs	r3, #48	@ 0x30
 8006890:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b09      	cmp	r3, #9
 8006896:	d80e      	bhi.n	80068b6 <get_ldnumber+0x72>
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	429a      	cmp	r2, r3
 800689e:	d10a      	bne.n	80068b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <get_ldnumber+0x72>
					vol = (int)i;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	3301      	adds	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	e002      	b.n	80068c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068be:	693b      	ldr	r3, [r7, #16]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	70da      	strb	r2, [r3, #3]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fe fc7a 	bl	80051e0 <move_window>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <check_fs+0x2a>
 80068f2:	2304      	movs	r3, #4
 80068f4:	e038      	b.n	8006968 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3338      	adds	r3, #56	@ 0x38
 80068fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe f9be 	bl	8004c80 <ld_word>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800690c:	429a      	cmp	r2, r3
 800690e:	d001      	beq.n	8006914 <check_fs+0x48>
 8006910:	2303      	movs	r3, #3
 8006912:	e029      	b.n	8006968 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800691a:	2be9      	cmp	r3, #233	@ 0xe9
 800691c:	d009      	beq.n	8006932 <check_fs+0x66>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006924:	2beb      	cmp	r3, #235	@ 0xeb
 8006926:	d11e      	bne.n	8006966 <check_fs+0x9a>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800692e:	2b90      	cmp	r3, #144	@ 0x90
 8006930:	d119      	bne.n	8006966 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3338      	adds	r3, #56	@ 0x38
 8006936:	3336      	adds	r3, #54	@ 0x36
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe f9b9 	bl	8004cb0 <ld_dword>
 800693e:	4603      	mov	r3, r0
 8006940:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006944:	4a0a      	ldr	r2, [pc, #40]	@ (8006970 <check_fs+0xa4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <check_fs+0x82>
 800694a:	2300      	movs	r3, #0
 800694c:	e00c      	b.n	8006968 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3338      	adds	r3, #56	@ 0x38
 8006952:	3352      	adds	r3, #82	@ 0x52
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f9ab 	bl	8004cb0 <ld_dword>
 800695a:	4603      	mov	r3, r0
 800695c:	4a05      	ldr	r2, [pc, #20]	@ (8006974 <check_fs+0xa8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d101      	bne.n	8006966 <check_fs+0x9a>
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006966:	2302      	movs	r3, #2
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	00544146 	.word	0x00544146
 8006974:	33544146 	.word	0x33544146

08006978 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b096      	sub	sp, #88	@ 0x58
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff ff59 	bl	8006844 <get_ldnumber>
 8006992:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006996:	2b00      	cmp	r3, #0
 8006998:	da01      	bge.n	800699e <find_volume+0x26>
 800699a:	230b      	movs	r3, #11
 800699c:	e265      	b.n	8006e6a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800699e:	4a9f      	ldr	r2, [pc, #636]	@ (8006c1c <find_volume+0x2a4>)
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <find_volume+0x3a>
 80069ae:	230c      	movs	r3, #12
 80069b0:	e25b      	b.n	8006e6a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80069c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01a      	beq.n	80069fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80069c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe f8b9 	bl	8004b44 <disk_status>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10c      	bne.n	80069fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <find_volume+0x82>
 80069ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80069f6:	230a      	movs	r3, #10
 80069f8:	e237      	b.n	8006e6a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80069fa:	2300      	movs	r3, #0
 80069fc:	e235      	b.n	8006e6a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe f8b1 	bl	8004b78 <disk_initialize>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e21e      	b.n	8006e6a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <find_volume+0xca>
 8006a32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a3e:	230a      	movs	r3, #10
 8006a40:	e213      	b.n	8006e6a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	7858      	ldrb	r0, [r3, #1]
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	330c      	adds	r3, #12
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2102      	movs	r1, #2
 8006a4e:	f7fe f8f9 	bl	8004c44 <disk_ioctl>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <find_volume+0xe4>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e206      	b.n	8006e6a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	899b      	ldrh	r3, [r3, #12]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a64:	d80d      	bhi.n	8006a82 <find_volume+0x10a>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a68:	899b      	ldrh	r3, [r3, #12]
 8006a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a6e:	d308      	bcc.n	8006a82 <find_volume+0x10a>
 8006a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a72:	899b      	ldrh	r3, [r3, #12]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	899b      	ldrh	r3, [r3, #12]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <find_volume+0x10e>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e1f1      	b.n	8006e6a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a8e:	f7ff ff1d 	bl	80068cc <check_fs>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d149      	bne.n	8006b34 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aa4:	e01e      	b.n	8006ae4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006ab4:	4413      	add	r3, r2
 8006ab6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	3304      	adds	r3, #4
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d006      	beq.n	8006ad0 <find_volume+0x158>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe f8f2 	bl	8004cb0 <ld_dword>
 8006acc:	4602      	mov	r2, r0
 8006ace:	e000      	b.n	8006ad2 <find_volume+0x15a>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	3358      	adds	r3, #88	@ 0x58
 8006ad8:	443b      	add	r3, r7
 8006ada:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d9dd      	bls.n	8006aa6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006aea:	2300      	movs	r3, #0
 8006aec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <find_volume+0x182>
 8006af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af6:	3b01      	subs	r3, #1
 8006af8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3358      	adds	r3, #88	@ 0x58
 8006b00:	443b      	add	r3, r7
 8006b02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b06:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <find_volume+0x1a2>
 8006b0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b12:	f7ff fedb 	bl	80068cc <check_fs>
 8006b16:	4603      	mov	r3, r0
 8006b18:	e000      	b.n	8006b1c <find_volume+0x1a4>
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006b20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d905      	bls.n	8006b34 <find_volume+0x1bc>
 8006b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d9e2      	bls.n	8006afa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d101      	bne.n	8006b40 <find_volume+0x1c8>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e194      	b.n	8006e6a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d901      	bls.n	8006b4c <find_volume+0x1d4>
 8006b48:	230d      	movs	r3, #13
 8006b4a:	e18e      	b.n	8006e6a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	3338      	adds	r3, #56	@ 0x38
 8006b50:	330b      	adds	r3, #11
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe f894 	bl	8004c80 <ld_word>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	899b      	ldrh	r3, [r3, #12]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d001      	beq.n	8006b68 <find_volume+0x1f0>
 8006b64:	230d      	movs	r3, #13
 8006b66:	e180      	b.n	8006e6a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	3338      	adds	r3, #56	@ 0x38
 8006b6c:	3316      	adds	r3, #22
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe f886 	bl	8004c80 <ld_word>
 8006b74:	4603      	mov	r3, r0
 8006b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <find_volume+0x214>
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b80:	3338      	adds	r3, #56	@ 0x38
 8006b82:	3324      	adds	r3, #36	@ 0x24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe f893 	bl	8004cb0 <ld_dword>
 8006b8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b90:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	789b      	ldrb	r3, [r3, #2]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d005      	beq.n	8006bb0 <find_volume+0x238>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	789b      	ldrb	r3, [r3, #2]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d001      	beq.n	8006bb0 <find_volume+0x238>
 8006bac:	230d      	movs	r3, #13
 8006bae:	e15c      	b.n	8006e6a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	789b      	ldrb	r3, [r3, #2]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	895b      	ldrh	r3, [r3, #10]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <find_volume+0x26c>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	895b      	ldrh	r3, [r3, #10]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	895b      	ldrh	r3, [r3, #10]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <find_volume+0x270>
 8006be4:	230d      	movs	r3, #13
 8006be6:	e140      	b.n	8006e6a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	3338      	adds	r3, #56	@ 0x38
 8006bec:	3311      	adds	r3, #17
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe f846 	bl	8004c80 <ld_word>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	891b      	ldrh	r3, [r3, #8]
 8006c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c02:	8992      	ldrh	r2, [r2, #12]
 8006c04:	0952      	lsrs	r2, r2, #5
 8006c06:	b292      	uxth	r2, r2
 8006c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c0c:	fb01 f202 	mul.w	r2, r1, r2
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <find_volume+0x2a8>
 8006c18:	230d      	movs	r3, #13
 8006c1a:	e126      	b.n	8006e6a <find_volume+0x4f2>
 8006c1c:	2000231c 	.word	0x2000231c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c22:	3338      	adds	r3, #56	@ 0x38
 8006c24:	3313      	adds	r3, #19
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe f82a 	bl	8004c80 <ld_word>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <find_volume+0x2cc>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	3338      	adds	r3, #56	@ 0x38
 8006c3a:	3320      	adds	r3, #32
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe f837 	bl	8004cb0 <ld_dword>
 8006c42:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c46:	3338      	adds	r3, #56	@ 0x38
 8006c48:	330e      	adds	r3, #14
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe f818 	bl	8004c80 <ld_word>
 8006c50:	4603      	mov	r3, r0
 8006c52:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <find_volume+0x2e6>
 8006c5a:	230d      	movs	r3, #13
 8006c5c:	e105      	b.n	8006e6a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c5e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c62:	4413      	add	r3, r2
 8006c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c66:	8911      	ldrh	r1, [r2, #8]
 8006c68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c6a:	8992      	ldrh	r2, [r2, #12]
 8006c6c:	0952      	lsrs	r2, r2, #5
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c74:	b292      	uxth	r2, r2
 8006c76:	4413      	add	r3, r2
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d201      	bcs.n	8006c86 <find_volume+0x30e>
 8006c82:	230d      	movs	r3, #13
 8006c84:	e0f1      	b.n	8006e6a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c8e:	8952      	ldrh	r2, [r2, #10]
 8006c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <find_volume+0x328>
 8006c9c:	230d      	movs	r3, #13
 8006c9e:	e0e4      	b.n	8006e6a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d802      	bhi.n	8006cb6 <find_volume+0x33e>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d802      	bhi.n	8006cc6 <find_volume+0x34e>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	1c9a      	adds	r2, r3, #2
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cd2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006cd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd8:	441a      	add	r2, r3
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006cde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	441a      	add	r2, r3
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d11e      	bne.n	8006d2e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf2:	3338      	adds	r3, #56	@ 0x38
 8006cf4:	332a      	adds	r3, #42	@ 0x2a
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd ffc2 	bl	8004c80 <ld_word>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <find_volume+0x38e>
 8006d02:	230d      	movs	r3, #13
 8006d04:	e0b1      	b.n	8006e6a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	891b      	ldrh	r3, [r3, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <find_volume+0x39a>
 8006d0e:	230d      	movs	r3, #13
 8006d10:	e0ab      	b.n	8006e6a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	3338      	adds	r3, #56	@ 0x38
 8006d16:	332c      	adds	r3, #44	@ 0x2c
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fd ffc9 	bl	8004cb0 <ld_dword>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2c:	e01f      	b.n	8006d6e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	891b      	ldrh	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <find_volume+0x3c2>
 8006d36:	230d      	movs	r3, #13
 8006d38:	e097      	b.n	8006e6a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d40:	441a      	add	r2, r3
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d103      	bne.n	8006d56 <find_volume+0x3de>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	e00a      	b.n	8006d6c <find_volume+0x3f4>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	69da      	ldr	r2, [r3, #28]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	085a      	lsrs	r2, r3, #1
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	899b      	ldrh	r3, [r3, #12]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d80:	8989      	ldrh	r1, [r1, #12]
 8006d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d201      	bcs.n	8006d8e <find_volume+0x416>
 8006d8a:	230d      	movs	r3, #13
 8006d8c:	e06d      	b.n	8006e6a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295
 8006d94:	619a      	str	r2, [r3, #24]
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	2280      	movs	r2, #128	@ 0x80
 8006da2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006da4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d149      	bne.n	8006e40 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dae:	3338      	adds	r3, #56	@ 0x38
 8006db0:	3330      	adds	r3, #48	@ 0x30
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fd ff64 	bl	8004c80 <ld_word>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d140      	bne.n	8006e40 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dc6:	f7fe fa0b 	bl	80051e0 <move_window>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d137      	bne.n	8006e40 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	3338      	adds	r3, #56	@ 0x38
 8006dda:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fd ff4e 	bl	8004c80 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d127      	bne.n	8006e40 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	3338      	adds	r3, #56	@ 0x38
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fd ff5b 	bl	8004cb0 <ld_dword>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e74 <find_volume+0x4fc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d11e      	bne.n	8006e40 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	3338      	adds	r3, #56	@ 0x38
 8006e06:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fd ff50 	bl	8004cb0 <ld_dword>
 8006e10:	4603      	mov	r3, r0
 8006e12:	4a19      	ldr	r2, [pc, #100]	@ (8006e78 <find_volume+0x500>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d113      	bne.n	8006e40 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	3338      	adds	r3, #56	@ 0x38
 8006e1c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fd ff45 	bl	8004cb0 <ld_dword>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	3338      	adds	r3, #56	@ 0x38
 8006e30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fd ff3b 	bl	8004cb0 <ld_dword>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e48:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <find_volume+0x504>)
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <find_volume+0x504>)
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	4b09      	ldr	r3, [pc, #36]	@ (8006e7c <find_volume+0x504>)
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	4a08      	ldr	r2, [pc, #32]	@ (8006e80 <find_volume+0x508>)
 8006e60:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e64:	f7fe f954 	bl	8005110 <clear_lock>
#endif
	return FR_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3758      	adds	r7, #88	@ 0x58
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	41615252 	.word	0x41615252
 8006e78:	61417272 	.word	0x61417272
 8006e7c:	20002320 	.word	0x20002320
 8006e80:	20002344 	.word	0x20002344

08006e84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006e8e:	2309      	movs	r3, #9
 8006e90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01c      	beq.n	8006ed2 <validate+0x4e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d018      	beq.n	8006ed2 <validate+0x4e>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d013      	beq.n	8006ed2 <validate+0x4e>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	889a      	ldrh	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	88db      	ldrh	r3, [r3, #6]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d10c      	bne.n	8006ed2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fd fe40 	bl	8004b44 <disk_status>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <validate+0x4e>
			res = FR_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <validate+0x5a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	e000      	b.n	8006ee0 <validate+0x5c>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	6013      	str	r3, [r2, #0]
	return res;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006f02:	f107 0310 	add.w	r3, r7, #16
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff fc9c 	bl	8006844 <get_ldnumber>
 8006f0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da01      	bge.n	8006f18 <f_mount+0x28>
 8006f14:	230b      	movs	r3, #11
 8006f16:	e02b      	b.n	8006f70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006f18:	4a17      	ldr	r2, [pc, #92]	@ (8006f78 <f_mount+0x88>)
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006f28:	69b8      	ldr	r0, [r7, #24]
 8006f2a:	f7fe f8f1 	bl	8005110 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	490d      	ldr	r1, [pc, #52]	@ (8006f78 <f_mount+0x88>)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <f_mount+0x66>
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d001      	beq.n	8006f5a <f_mount+0x6a>
 8006f56:	2300      	movs	r3, #0
 8006f58:	e00a      	b.n	8006f70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f5a:	f107 010c 	add.w	r1, r7, #12
 8006f5e:	f107 0308 	add.w	r3, r7, #8
 8006f62:	2200      	movs	r2, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fd07 	bl	8006978 <find_volume>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	2000231c 	.word	0x2000231c

08006f7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b09a      	sub	sp, #104	@ 0x68
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <f_open+0x18>
 8006f90:	2309      	movs	r3, #9
 8006f92:	e1b7      	b.n	8007304 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006f9c:	79fa      	ldrb	r2, [r7, #7]
 8006f9e:	f107 0114 	add.w	r1, r7, #20
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff fce6 	bl	8006978 <find_volume>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006fb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 819b 	bne.w	80072f2 <f_open+0x376>
		dj.obj.fs = fs;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	f107 0318 	add.w	r3, r7, #24
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff fbc5 	bl	8006758 <follow_path>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006fd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d118      	bne.n	800700e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006fdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	da03      	bge.n	8006fee <f_open+0x72>
				res = FR_INVALID_NAME;
 8006fe6:	2306      	movs	r3, #6
 8006fe8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006fec:	e00f      	b.n	800700e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf8c      	ite	hi
 8006ff4:	2301      	movhi	r3, #1
 8006ff6:	2300      	movls	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f107 0318 	add.w	r3, r7, #24
 8007000:	4611      	mov	r1, r2
 8007002:	4618      	mov	r0, r3
 8007004:	f7fd ff3c 	bl	8004e80 <chk_lock>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	f003 031c 	and.w	r3, r3, #28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d07f      	beq.n	8007118 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007018:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800701c:	2b00      	cmp	r3, #0
 800701e:	d017      	beq.n	8007050 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007020:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007024:	2b04      	cmp	r3, #4
 8007026:	d10e      	bne.n	8007046 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007028:	f7fd ff86 	bl	8004f38 <enq_lock>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d006      	beq.n	8007040 <f_open+0xc4>
 8007032:	f107 0318 	add.w	r3, r7, #24
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff f8de 	bl	80061f8 <dir_register>
 800703c:	4603      	mov	r3, r0
 800703e:	e000      	b.n	8007042 <f_open+0xc6>
 8007040:	2312      	movs	r3, #18
 8007042:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	f043 0308 	orr.w	r3, r3, #8
 800704c:	71fb      	strb	r3, [r7, #7]
 800704e:	e010      	b.n	8007072 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007050:	7fbb      	ldrb	r3, [r7, #30]
 8007052:	f003 0311 	and.w	r3, r3, #17
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <f_open+0xe6>
					res = FR_DENIED;
 800705a:	2307      	movs	r3, #7
 800705c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007060:	e007      	b.n	8007072 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <f_open+0xf6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007072:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007076:	2b00      	cmp	r3, #0
 8007078:	d168      	bne.n	800714c <f_open+0x1d0>
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d063      	beq.n	800714c <f_open+0x1d0>
				dw = GET_FATTIME();
 8007084:	f7fd f82c 	bl	80040e0 <get_fattime>
 8007088:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	330e      	adds	r3, #14
 800708e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007090:	4618      	mov	r0, r3
 8007092:	f7fd fe4b 	bl	8004d2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	3316      	adds	r3, #22
 800709a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fe45 	bl	8004d2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	330b      	adds	r3, #11
 80070a6:	2220      	movs	r2, #32
 80070a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fe1a 	bl	8005cea <ld_clust>
 80070b6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070bc:	2200      	movs	r2, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fe32 	bl	8005d28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	331c      	adds	r3, #28
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fd fe2e 	bl	8004d2c <st_dword>
					fs->wflag = 1;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2201      	movs	r2, #1
 80070d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80070d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d037      	beq.n	800714c <f_open+0x1d0>
						dw = fs->winsect;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80070e2:	f107 0318 	add.w	r3, r7, #24
 80070e6:	2200      	movs	r2, #0
 80070e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe fb22 	bl	8005734 <remove_chain>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80070f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d126      	bne.n	800714c <f_open+0x1d0>
							res = move_window(fs, dw);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe f86c 	bl	80051e0 <move_window>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007112:	3a01      	subs	r2, #1
 8007114:	615a      	str	r2, [r3, #20]
 8007116:	e019      	b.n	800714c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007118:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800711c:	2b00      	cmp	r3, #0
 800711e:	d115      	bne.n	800714c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007120:	7fbb      	ldrb	r3, [r7, #30]
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <f_open+0x1b6>
					res = FR_NO_FILE;
 800712a:	2304      	movs	r3, #4
 800712c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007130:	e00c      	b.n	800714c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <f_open+0x1d0>
 800713c:	7fbb      	ldrb	r3, [r7, #30]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <f_open+0x1d0>
						res = FR_DENIED;
 8007146:	2307      	movs	r3, #7
 8007148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800714c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007150:	2b00      	cmp	r3, #0
 8007152:	d126      	bne.n	80071a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007164:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800716e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b01      	cmp	r3, #1
 8007178:	bf8c      	ite	hi
 800717a:	2301      	movhi	r3, #1
 800717c:	2300      	movls	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	f107 0318 	add.w	r3, r7, #24
 8007186:	4611      	mov	r1, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f7fd fef7 	bl	8004f7c <inc_lock>
 800718e:	4602      	mov	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <f_open+0x226>
 800719c:	2302      	movs	r3, #2
 800719e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80071a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 80a3 	bne.w	80072f2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fd99 	bl	8005cea <ld_clust>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	331c      	adds	r3, #28
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fd fd74 	bl	8004cb0 <ld_dword>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	88da      	ldrh	r2, [r3, #6]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3330      	adds	r3, #48	@ 0x30
 80071fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007202:	2100      	movs	r1, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd fdde 	bl	8004dc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d06e      	beq.n	80072f2 <f_open+0x376>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d06a      	beq.n	80072f2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	895b      	ldrh	r3, [r3, #10]
 8007228:	461a      	mov	r2, r3
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	899b      	ldrh	r3, [r3, #12]
 800722e:	fb02 f303 	mul.w	r3, r2, r3
 8007232:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007240:	e016      	b.n	8007270 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe f887 	bl	800535a <get_fat>
 800724c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800724e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007250:	2b01      	cmp	r3, #1
 8007252:	d802      	bhi.n	800725a <f_open+0x2de>
 8007254:	2302      	movs	r3, #2
 8007256:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800725a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d102      	bne.n	8007268 <f_open+0x2ec>
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007268:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800726a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007270:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007274:	2b00      	cmp	r3, #0
 8007276:	d103      	bne.n	8007280 <f_open+0x304>
 8007278:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800727a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800727c:	429a      	cmp	r2, r3
 800727e:	d8e0      	bhi.n	8007242 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007284:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007286:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800728a:	2b00      	cmp	r3, #0
 800728c:	d131      	bne.n	80072f2 <f_open+0x376>
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	899b      	ldrh	r3, [r3, #12]
 8007292:	461a      	mov	r2, r3
 8007294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007296:	fbb3 f1f2 	udiv	r1, r3, r2
 800729a:	fb01 f202 	mul.w	r2, r1, r2
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d026      	beq.n	80072f2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe f837 	bl	800531c <clust2sect>
 80072ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80072b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <f_open+0x342>
						res = FR_INT_ERR;
 80072b6:	2302      	movs	r3, #2
 80072b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80072bc:	e019      	b.n	80072f2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	899b      	ldrh	r3, [r3, #12]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	7858      	ldrb	r0, [r3, #1]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	2301      	movs	r3, #1
 80072e2:	f7fd fc6f 	bl	8004bc4 <disk_read>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <f_open+0x376>
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80072f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <f_open+0x384>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007300:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007304:	4618      	mov	r0, r3
 8007306:	3768      	adds	r7, #104	@ 0x68
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	@ 0x38
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f107 0214 	add.w	r2, r7, #20
 800732a:	4611      	mov	r1, r2
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fda9 	bl	8006e84 <validate>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007338:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800733c:	2b00      	cmp	r3, #0
 800733e:	d107      	bne.n	8007350 <f_read+0x44>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	7d5b      	ldrb	r3, [r3, #21]
 8007344:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007348:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <f_read+0x4a>
 8007350:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007354:	e135      	b.n	80075c2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	7d1b      	ldrb	r3, [r3, #20]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <f_read+0x5a>
 8007362:	2307      	movs	r3, #7
 8007364:	e12d      	b.n	80075c2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	429a      	cmp	r2, r3
 8007378:	f240 811e 	bls.w	80075b8 <f_read+0x2ac>
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007380:	e11a      	b.n	80075b8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	8992      	ldrh	r2, [r2, #12]
 800738a:	fbb3 f1f2 	udiv	r1, r3, r2
 800738e:	fb01 f202 	mul.w	r2, r1, r2
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 80d5 	bne.w	8007544 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	8992      	ldrh	r2, [r2, #12]
 80073a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	8952      	ldrh	r2, [r2, #10]
 80073aa:	3a01      	subs	r2, #1
 80073ac:	4013      	ands	r3, r2
 80073ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d12f      	bne.n	8007416 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d103      	bne.n	80073c6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073c4:	e013      	b.n	80073ee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	4619      	mov	r1, r3
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7fe faaa 	bl	800592e <clmt_clust>
 80073da:	6338      	str	r0, [r7, #48]	@ 0x30
 80073dc:	e007      	b.n	80073ee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fd ffb7 	bl	800535a <get_fat>
 80073ec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d804      	bhi.n	80073fe <f_read+0xf2>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2202      	movs	r2, #2
 80073f8:	755a      	strb	r2, [r3, #21]
 80073fa:	2302      	movs	r3, #2
 80073fc:	e0e1      	b.n	80075c2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d104      	bne.n	8007410 <f_read+0x104>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	755a      	strb	r2, [r3, #21]
 800740c:	2301      	movs	r3, #1
 800740e:	e0d8      	b.n	80075c2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007414:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f7fd ff7c 	bl	800531c <clust2sect>
 8007424:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <f_read+0x12a>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2202      	movs	r2, #2
 8007430:	755a      	strb	r2, [r3, #21]
 8007432:	2302      	movs	r3, #2
 8007434:	e0c5      	b.n	80075c2 <f_read+0x2b6>
			sect += csect;
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	899b      	ldrh	r3, [r3, #12]
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	fbb3 f3f2 	udiv	r3, r3, r2
 800744a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744e:	2b00      	cmp	r3, #0
 8007450:	d041      	beq.n	80074d6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	4413      	add	r3, r2
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	8952      	ldrh	r2, [r2, #10]
 800745c:	4293      	cmp	r3, r2
 800745e:	d905      	bls.n	800746c <f_read+0x160>
					cc = fs->csize - csect;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	895b      	ldrh	r3, [r3, #10]
 8007464:	461a      	mov	r2, r3
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	7858      	ldrb	r0, [r3, #1]
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007476:	f7fd fba5 	bl	8004bc4 <disk_read>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <f_read+0x17e>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	755a      	strb	r2, [r3, #21]
 8007486:	2301      	movs	r3, #1
 8007488:	e09b      	b.n	80075c2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	b25b      	sxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	da18      	bge.n	80074c6 <f_read+0x1ba>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800749e:	429a      	cmp	r2, r3
 80074a0:	d911      	bls.n	80074c6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1a      	ldr	r2, [r3, #32]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	8992      	ldrh	r2, [r2, #12]
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b4:	18d0      	adds	r0, r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	899b      	ldrh	r3, [r3, #12]
 80074c0:	461a      	mov	r2, r3
 80074c2:	f7fd fc5f 	bl	8004d84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	899b      	ldrh	r3, [r3, #12]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	fb02 f303 	mul.w	r3, r2, r3
 80074d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80074d4:	e05c      	b.n	8007590 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d02e      	beq.n	800753e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	7d1b      	ldrb	r3, [r3, #20]
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da18      	bge.n	800751c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	7858      	ldrb	r0, [r3, #1]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1a      	ldr	r2, [r3, #32]
 80074f8:	2301      	movs	r3, #1
 80074fa:	f7fd fb83 	bl	8004c04 <disk_write>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <f_read+0x202>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	755a      	strb	r2, [r3, #21]
 800750a:	2301      	movs	r3, #1
 800750c:	e059      	b.n	80075c2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	7d1b      	ldrb	r3, [r3, #20]
 8007512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007516:	b2da      	uxtb	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	7858      	ldrb	r0, [r3, #1]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007526:	2301      	movs	r3, #1
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	f7fd fb4b 	bl	8004bc4 <disk_read>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <f_read+0x232>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	755a      	strb	r2, [r3, #21]
 800753a:	2301      	movs	r3, #1
 800753c:	e041      	b.n	80075c2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	899b      	ldrh	r3, [r3, #12]
 8007548:	4618      	mov	r0, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	8992      	ldrh	r2, [r2, #12]
 8007552:	fbb3 f1f2 	udiv	r1, r3, r2
 8007556:	fb01 f202 	mul.w	r2, r1, r2
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	1ac3      	subs	r3, r0, r3
 800755e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d901      	bls.n	800756c <f_read+0x260>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	8992      	ldrh	r2, [r2, #12]
 800757a:	fbb3 f0f2 	udiv	r0, r3, r2
 800757e:	fb00 f202 	mul.w	r2, r0, r2
 8007582:	1a9b      	subs	r3, r3, r2
 8007584:	440b      	add	r3, r1
 8007586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007588:	4619      	mov	r1, r3
 800758a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800758c:	f7fd fbfa 	bl	8004d84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	4413      	add	r3, r2
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759e:	441a      	add	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	619a      	str	r2, [r3, #24]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	441a      	add	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f47f aee1 	bne.w	8007382 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3738      	adds	r7, #56	@ 0x38
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b08c      	sub	sp, #48	@ 0x30
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f107 0210 	add.w	r2, r7, #16
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fc4a 	bl	8006e84 <validate>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80075f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d107      	bne.n	800760e <f_write+0x44>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	7d5b      	ldrb	r3, [r3, #21]
 8007602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <f_write+0x4a>
 800760e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007612:	e16a      	b.n	80078ea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7d1b      	ldrb	r3, [r3, #20]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <f_write+0x5a>
 8007620:	2307      	movs	r3, #7
 8007622:	e162      	b.n	80078ea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	441a      	add	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	429a      	cmp	r2, r3
 8007632:	f080 814c 	bcs.w	80078ce <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	43db      	mvns	r3, r3
 800763c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800763e:	e146      	b.n	80078ce <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	8992      	ldrh	r2, [r2, #12]
 8007648:	fbb3 f1f2 	udiv	r1, r3, r2
 800764c:	fb01 f202 	mul.w	r2, r1, r2
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	f040 80f1 	bne.w	800783a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	8992      	ldrh	r2, [r2, #12]
 8007660:	fbb3 f3f2 	udiv	r3, r3, r2
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	8952      	ldrh	r2, [r2, #10]
 8007668:	3a01      	subs	r2, #1
 800766a:	4013      	ands	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d143      	bne.n	80076fc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10c      	bne.n	8007696 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe f8b6 	bl	80057fe <create_chain>
 8007692:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007694:	e013      	b.n	80076be <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	4619      	mov	r1, r3
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7fe f942 	bl	800592e <clmt_clust>
 80076aa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80076ac:	e007      	b.n	80076be <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe f8a1 	bl	80057fe <create_chain>
 80076bc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80076be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8109 	beq.w	80078d8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d104      	bne.n	80076d6 <f_write+0x10c>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2202      	movs	r2, #2
 80076d0:	755a      	strb	r2, [r3, #21]
 80076d2:	2302      	movs	r3, #2
 80076d4:	e109      	b.n	80078ea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d104      	bne.n	80076e8 <f_write+0x11e>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	755a      	strb	r2, [r3, #21]
 80076e4:	2301      	movs	r3, #1
 80076e6:	e100      	b.n	80078ea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076ec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <f_write+0x132>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076fa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	7d1b      	ldrb	r3, [r3, #20]
 8007700:	b25b      	sxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	da18      	bge.n	8007738 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	7858      	ldrb	r0, [r3, #1]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a1a      	ldr	r2, [r3, #32]
 8007714:	2301      	movs	r3, #1
 8007716:	f7fd fa75 	bl	8004c04 <disk_write>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <f_write+0x160>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	755a      	strb	r2, [r3, #21]
 8007726:	2301      	movs	r3, #1
 8007728:	e0df      	b.n	80078ea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	7d1b      	ldrb	r3, [r3, #20]
 800772e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7fd fdeb 	bl	800531c <clust2sect>
 8007746:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <f_write+0x18e>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2202      	movs	r2, #2
 8007752:	755a      	strb	r2, [r3, #21]
 8007754:	2302      	movs	r3, #2
 8007756:	e0c8      	b.n	80078ea <f_write+0x320>
			sect += csect;
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	4413      	add	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	899b      	ldrh	r3, [r3, #12]
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	fbb3 f3f2 	udiv	r3, r3, r2
 800776c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d043      	beq.n	80077fc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	4413      	add	r3, r2
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	8952      	ldrh	r2, [r2, #10]
 800777e:	4293      	cmp	r3, r2
 8007780:	d905      	bls.n	800778e <f_write+0x1c4>
					cc = fs->csize - csect;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	895b      	ldrh	r3, [r3, #10]
 8007786:	461a      	mov	r2, r3
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	7858      	ldrb	r0, [r3, #1]
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	69f9      	ldr	r1, [r7, #28]
 8007798:	f7fd fa34 	bl	8004c04 <disk_write>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <f_write+0x1e2>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	755a      	strb	r2, [r3, #21]
 80077a8:	2301      	movs	r3, #1
 80077aa:	e09e      	b.n	80078ea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1a      	ldr	r2, [r3, #32]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	6a3a      	ldr	r2, [r7, #32]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d918      	bls.n	80077ec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a1a      	ldr	r2, [r3, #32]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	8992      	ldrh	r2, [r2, #12]
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	18d1      	adds	r1, r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	899b      	ldrh	r3, [r3, #12]
 80077d8:	461a      	mov	r2, r3
 80077da:	f7fd fad3 	bl	8004d84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7d1b      	ldrb	r3, [r3, #20]
 80077e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	899b      	ldrh	r3, [r3, #12]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80077fa:	e04b      	b.n	8007894 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	429a      	cmp	r2, r3
 8007804:	d016      	beq.n	8007834 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800780e:	429a      	cmp	r2, r3
 8007810:	d210      	bcs.n	8007834 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	7858      	ldrb	r0, [r3, #1]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800781c:	2301      	movs	r3, #1
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	f7fd f9d0 	bl	8004bc4 <disk_read>
 8007824:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	755a      	strb	r2, [r3, #21]
 8007830:	2301      	movs	r3, #1
 8007832:	e05a      	b.n	80078ea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	899b      	ldrh	r3, [r3, #12]
 800783e:	4618      	mov	r0, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	8992      	ldrh	r2, [r2, #12]
 8007848:	fbb3 f1f2 	udiv	r1, r3, r2
 800784c:	fb01 f202 	mul.w	r2, r1, r2
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	1ac3      	subs	r3, r0, r3
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d901      	bls.n	8007862 <f_write+0x298>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	8992      	ldrh	r2, [r2, #12]
 8007870:	fbb3 f0f2 	udiv	r0, r3, r2
 8007874:	fb00 f202 	mul.w	r2, r0, r2
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	440b      	add	r3, r1
 800787c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787e:	69f9      	ldr	r1, [r7, #28]
 8007880:	4618      	mov	r0, r3
 8007882:	f7fd fa7f 	bl	8004d84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
 800788a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800788e:	b2da      	uxtb	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	4413      	add	r3, r2
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	699a      	ldr	r2, [r3, #24]
 80078a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a2:	441a      	add	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	619a      	str	r2, [r3, #24]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	bf38      	it	cc
 80078b4:	461a      	movcc	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	441a      	add	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f47f aeb5 	bne.w	8007640 <f_write+0x76>
 80078d6:	e000      	b.n	80078da <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	7d1b      	ldrb	r3, [r3, #20]
 80078de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3730      	adds	r7, #48	@ 0x30
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f107 0208 	add.w	r2, r7, #8
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fabe 	bl	8006e84 <validate>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d168      	bne.n	80079e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7d1b      	ldrb	r3, [r3, #20]
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d062      	beq.n	80079e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7d1b      	ldrb	r3, [r3, #20]
 8007922:	b25b      	sxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	da15      	bge.n	8007954 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	7858      	ldrb	r0, [r3, #1]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	2301      	movs	r3, #1
 8007938:	f7fd f964 	bl	8004c04 <disk_write>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <f_sync+0x54>
 8007942:	2301      	movs	r3, #1
 8007944:	e04f      	b.n	80079e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7d1b      	ldrb	r3, [r3, #20]
 800794a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794e:	b2da      	uxtb	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007954:	f7fc fbc4 	bl	80040e0 <get_fattime>
 8007958:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fd fc3c 	bl	80051e0 <move_window>
 8007968:	4603      	mov	r3, r0
 800796a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d138      	bne.n	80079e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	330b      	adds	r3, #11
 800797c:	781a      	ldrb	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	330b      	adds	r3, #11
 8007982:	f042 0220 	orr.w	r2, r2, #32
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	461a      	mov	r2, r3
 8007994:	68f9      	ldr	r1, [r7, #12]
 8007996:	f7fe f9c7 	bl	8005d28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f103 021c 	add.w	r2, r3, #28
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f7fd f9c0 	bl	8004d2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3316      	adds	r3, #22
 80079b0:	6939      	ldr	r1, [r7, #16]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fd f9ba 	bl	8004d2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3312      	adds	r3, #18
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd f999 	bl	8004cf6 <st_word>
					fs->wflag = 1;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2201      	movs	r2, #1
 80079c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fc35 	bl	800523c <sync_fs>
 80079d2:	4603      	mov	r3, r0
 80079d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7d1b      	ldrb	r3, [r3, #20]
 80079da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff7b 	bl	80078f2 <f_sync>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d118      	bne.n	8007a38 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f107 0208 	add.w	r2, r7, #8
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fa38 	bl	8006e84 <validate>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fd fb38 	bl	8005098 <dec_lock>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b092      	sub	sp, #72	@ 0x48
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007a4e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	2200      	movs	r2, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe ff8d 	bl	8006978 <find_volume>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007a64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 8099 	bne.w	8007ba0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	699a      	ldr	r2, [r3, #24]
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	3b02      	subs	r3, #2
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d804      	bhi.n	8007a8c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e089      	b.n	8007ba0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d128      	bne.n	8007aea <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fd fc57 	bl	800535a <get_fat>
 8007aac:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d103      	bne.n	8007abe <f_getfree+0x7c>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007abc:	e063      	b.n	8007b86 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d103      	bne.n	8007acc <f_getfree+0x8a>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007aca:	e05c      	b.n	8007b86 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <f_getfree+0x96>
 8007ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ada:	3301      	adds	r3, #1
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d3db      	bcc.n	8007aa0 <f_getfree+0x5e>
 8007ae8:	e04d      	b.n	8007b86 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af4:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007afa:	2300      	movs	r3, #0
 8007afc:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d113      	bne.n	8007b2c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f7fd fb67 	bl	80051e0 <move_window>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007b18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d131      	bne.n	8007b84 <f_getfree+0x142>
							p = fs->win;
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	3338      	adds	r3, #56	@ 0x38
 8007b24:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	899b      	ldrh	r3, [r3, #12]
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d10f      	bne.n	8007b54 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b36:	f7fd f8a3 	bl	8004c80 <ld_word>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <f_getfree+0x104>
 8007b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b42:	3301      	adds	r3, #1
 8007b44:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	3302      	adds	r3, #2
 8007b4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4e:	3b02      	subs	r3, #2
 8007b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b52:	e010      	b.n	8007b76 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b56:	f7fd f8ab 	bl	8004cb0 <ld_dword>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <f_getfree+0x128>
 8007b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b66:	3301      	adds	r3, #1
 8007b68:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b72:	3b04      	subs	r3, #4
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1bd      	bne.n	8007afe <f_getfree+0xbc>
 8007b82:	e000      	b.n	8007b86 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007b84:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b8a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b90:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	791a      	ldrb	r2, [r3, #4]
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	f042 0201 	orr.w	r2, r2, #1
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007ba0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3748      	adds	r7, #72	@ 0x48
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007bc0:	e01c      	b.n	8007bfc <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007bc2:	f107 0310 	add.w	r3, r7, #16
 8007bc6:	f107 0114 	add.w	r1, r7, #20
 8007bca:	2201      	movs	r2, #1
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff fb9d 	bl	800730c <f_read>
		if (rc != 1) break;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d117      	bne.n	8007c08 <f_gets+0x5c>
		c = s[0];
 8007bd8:	7d3b      	ldrb	r3, [r7, #20]
 8007bda:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b0d      	cmp	r3, #13
 8007be0:	d00b      	beq.n	8007bfa <f_gets+0x4e>
		*p++ = c;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	61ba      	str	r2, [r7, #24]
 8007be8:	7dfa      	ldrb	r2, [r7, #23]
 8007bea:	701a      	strb	r2, [r3, #0]
		n++;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2b0a      	cmp	r3, #10
 8007bf6:	d009      	beq.n	8007c0c <f_gets+0x60>
 8007bf8:	e000      	b.n	8007bfc <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007bfa:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	dbdd      	blt.n	8007bc2 <f_gets+0x16>
 8007c06:	e002      	b.n	8007c0e <f_gets+0x62>
		if (rc != 1) break;
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007c0c:	bf00      	nop
	}
	*p = 0;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <f_gets+0x72>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	e000      	b.n	8007c20 <f_gets+0x74>
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3720      	adds	r7, #32
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	2b0a      	cmp	r3, #10
 8007c38:	d103      	bne.n	8007c42 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007c3a:	210d      	movs	r1, #13
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff fff3 	bl	8007c28 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	db25      	blt.n	8007c9a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	60fa      	str	r2, [r7, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c60:	dd12      	ble.n	8007c88 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f103 010c 	add.w	r1, r3, #12
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	f7ff fcaa 	bl	80075ca <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d101      	bne.n	8007c82 <putc_bfd+0x5a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e001      	b.n	8007c86 <putc_bfd+0x5e>
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	e000      	b.n	8007c9c <putc_bfd+0x74>
	if (i < 0) return;
 8007c9a:	bf00      	nop
}
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	db16      	blt.n	8007ce0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f103 010c 	add.w	r1, r3, #12
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f107 030c 	add.w	r3, r7, #12
 8007cc6:	f7ff fc80 	bl	80075ca <f_write>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d107      	bne.n	8007ce0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d102      	bne.n	8007ce0 <putc_flush+0x3e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	e001      	b.n	8007ce4 <putc_flush+0x42>
	return EOF;
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	609a      	str	r2, [r3, #8]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b096      	sub	sp, #88	@ 0x58
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff ffe0 	bl	8007cec <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007d2c:	e009      	b.n	8007d42 <f_puts+0x2c>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	f107 030c 	add.w	r3, r7, #12
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff ff73 	bl	8007c28 <putc_bfd>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f1      	bne.n	8007d2e <f_puts+0x18>
	return putc_flush(&pb);
 8007d4a:	f107 030c 	add.w	r3, r7, #12
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff ffa7 	bl	8007ca2 <putc_flush>
 8007d54:	4603      	mov	r3, r0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3758      	adds	r7, #88	@ 0x58
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d76:	4b1f      	ldr	r3, [pc, #124]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007d78:	7a5b      	ldrb	r3, [r3, #9]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d131      	bne.n	8007de4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d80:	4b1c      	ldr	r3, [pc, #112]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007d82:	7a5b      	ldrb	r3, [r3, #9]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d8e:	4b19      	ldr	r3, [pc, #100]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007d90:	7a5b      	ldrb	r3, [r3, #9]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	4a17      	ldr	r2, [pc, #92]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d9e:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007da0:	7a5b      	ldrb	r3, [r3, #9]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	4b13      	ldr	r3, [pc, #76]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007da8:	4413      	add	r3, r2
 8007daa:	79fa      	ldrb	r2, [r7, #7]
 8007dac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007dae:	4b11      	ldr	r3, [pc, #68]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007db0:	7a5b      	ldrb	r3, [r3, #9]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	b2d1      	uxtb	r1, r2
 8007db8:	4a0e      	ldr	r2, [pc, #56]	@ (8007df4 <FATFS_LinkDriverEx+0x94>)
 8007dba:	7251      	strb	r1, [r2, #9]
 8007dbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007dbe:	7dbb      	ldrb	r3, [r7, #22]
 8007dc0:	3330      	adds	r3, #48	@ 0x30
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	223a      	movs	r2, #58	@ 0x3a
 8007dce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	222f      	movs	r2, #47	@ 0x2f
 8007dd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3303      	adds	r3, #3
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20002544 	.word	0x20002544

08007df8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e02:	2200      	movs	r2, #0
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff ffaa 	bl	8007d60 <FATFS_LinkDriverEx>
 8007e0c:	4603      	mov	r3, r0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e28:	d802      	bhi.n	8007e30 <ff_convert+0x18>
		c = chr;
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	81fb      	strh	r3, [r7, #14]
 8007e2e:	e025      	b.n	8007e7c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	2bff      	cmp	r3, #255	@ 0xff
 8007e3a:	d805      	bhi.n	8007e48 <ff_convert+0x30>
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	3b80      	subs	r3, #128	@ 0x80
 8007e40:	4a12      	ldr	r2, [pc, #72]	@ (8007e8c <ff_convert+0x74>)
 8007e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e46:	e000      	b.n	8007e4a <ff_convert+0x32>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	81fb      	strh	r3, [r7, #14]
 8007e4c:	e016      	b.n	8007e7c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007e4e:	2300      	movs	r3, #0
 8007e50:	81fb      	strh	r3, [r7, #14]
 8007e52:	e009      	b.n	8007e68 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007e54:	89fb      	ldrh	r3, [r7, #14]
 8007e56:	4a0d      	ldr	r2, [pc, #52]	@ (8007e8c <ff_convert+0x74>)
 8007e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d006      	beq.n	8007e70 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007e62:	89fb      	ldrh	r3, [r7, #14]
 8007e64:	3301      	adds	r3, #1
 8007e66:	81fb      	strh	r3, [r7, #14]
 8007e68:	89fb      	ldrh	r3, [r7, #14]
 8007e6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e6c:	d9f2      	bls.n	8007e54 <ff_convert+0x3c>
 8007e6e:	e000      	b.n	8007e72 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007e70:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007e72:	89fb      	ldrh	r3, [r7, #14]
 8007e74:	3380      	adds	r3, #128	@ 0x80
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	08009380 	.word	0x08009380

08007e90 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ea0:	d201      	bcs.n	8007ea6 <ff_wtoupper+0x16>
 8007ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8007f9c <ff_wtoupper+0x10c>)
 8007ea4:	e000      	b.n	8007ea8 <ff_wtoupper+0x18>
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa0 <ff_wtoupper+0x110>)
 8007ea8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	1c9a      	adds	r2, r3, #2
 8007eae:	617a      	str	r2, [r7, #20]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007eb4:	8a7b      	ldrh	r3, [r7, #18]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d068      	beq.n	8007f8c <ff_wtoupper+0xfc>
 8007eba:	88fa      	ldrh	r2, [r7, #6]
 8007ebc:	8a7b      	ldrh	r3, [r7, #18]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d364      	bcc.n	8007f8c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	1c9a      	adds	r2, r3, #2
 8007ec6:	617a      	str	r2, [r7, #20]
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	823b      	strh	r3, [r7, #16]
 8007ecc:	8a3b      	ldrh	r3, [r7, #16]
 8007ece:	0a1b      	lsrs	r3, r3, #8
 8007ed0:	81fb      	strh	r3, [r7, #14]
 8007ed2:	8a3b      	ldrh	r3, [r7, #16]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007ed8:	88fa      	ldrh	r2, [r7, #6]
 8007eda:	8a79      	ldrh	r1, [r7, #18]
 8007edc:	8a3b      	ldrh	r3, [r7, #16]
 8007ede:	440b      	add	r3, r1
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	da49      	bge.n	8007f78 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007ee4:	89fb      	ldrh	r3, [r7, #14]
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d84f      	bhi.n	8007f8a <ff_wtoupper+0xfa>
 8007eea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <ff_wtoupper+0x60>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f15 	.word	0x08007f15
 8007ef4:	08007f27 	.word	0x08007f27
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f4d 	.word	0x08007f4d
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08007f5d 	.word	0x08007f5d
 8007f0c:	08007f65 	.word	0x08007f65
 8007f10:	08007f6d 	.word	0x08007f6d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	8a7b      	ldrh	r3, [r7, #18]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	80fb      	strh	r3, [r7, #6]
 8007f24:	e027      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	8a7b      	ldrh	r3, [r7, #18]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	80fb      	strh	r3, [r7, #6]
 8007f3a:	e01c      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	3b10      	subs	r3, #16
 8007f40:	80fb      	strh	r3, [r7, #6]
 8007f42:	e018      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	3b20      	subs	r3, #32
 8007f48:	80fb      	strh	r3, [r7, #6]
 8007f4a:	e014      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	3b30      	subs	r3, #48	@ 0x30
 8007f50:	80fb      	strh	r3, [r7, #6]
 8007f52:	e010      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	3b1a      	subs	r3, #26
 8007f58:	80fb      	strh	r3, [r7, #6]
 8007f5a:	e00c      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	e008      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	3b50      	subs	r3, #80	@ 0x50
 8007f68:	80fb      	strh	r3, [r7, #6]
 8007f6a:	e004      	b.n	8007f76 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007f72:	80fb      	strh	r3, [r7, #6]
 8007f74:	bf00      	nop
			}
			break;
 8007f76:	e008      	b.n	8007f8a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007f78:	89fb      	ldrh	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d195      	bne.n	8007eaa <ff_wtoupper+0x1a>
 8007f7e:	8a3b      	ldrh	r3, [r7, #16]
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4413      	add	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007f88:	e78f      	b.n	8007eaa <ff_wtoupper+0x1a>
			break;
 8007f8a:	bf00      	nop
	}

	return chr;
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	08009480 	.word	0x08009480
 8007fa0:	08009674 	.word	0x08009674

08007fa4 <__sflush_r>:
 8007fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	0716      	lsls	r6, r2, #28
 8007fae:	4605      	mov	r5, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	d454      	bmi.n	800805e <__sflush_r+0xba>
 8007fb4:	684b      	ldr	r3, [r1, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dc02      	bgt.n	8007fc0 <__sflush_r+0x1c>
 8007fba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd48      	ble.n	8008052 <__sflush_r+0xae>
 8007fc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d045      	beq.n	8008052 <__sflush_r+0xae>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fcc:	682f      	ldr	r7, [r5, #0]
 8007fce:	6a21      	ldr	r1, [r4, #32]
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	d030      	beq.n	8008036 <__sflush_r+0x92>
 8007fd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0759      	lsls	r1, r3, #29
 8007fda:	d505      	bpl.n	8007fe8 <__sflush_r+0x44>
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fe2:	b10b      	cbz	r3, 8007fe8 <__sflush_r+0x44>
 8007fe4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b0      	blx	r6
 8007ff2:	1c43      	adds	r3, r0, #1
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	d106      	bne.n	8008006 <__sflush_r+0x62>
 8007ff8:	6829      	ldr	r1, [r5, #0]
 8007ffa:	291d      	cmp	r1, #29
 8007ffc:	d82b      	bhi.n	8008056 <__sflush_r+0xb2>
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <__sflush_r+0x104>)
 8008000:	410a      	asrs	r2, r1
 8008002:	07d6      	lsls	r6, r2, #31
 8008004:	d427      	bmi.n	8008056 <__sflush_r+0xb2>
 8008006:	2200      	movs	r2, #0
 8008008:	6062      	str	r2, [r4, #4]
 800800a:	04d9      	lsls	r1, r3, #19
 800800c:	6922      	ldr	r2, [r4, #16]
 800800e:	6022      	str	r2, [r4, #0]
 8008010:	d504      	bpl.n	800801c <__sflush_r+0x78>
 8008012:	1c42      	adds	r2, r0, #1
 8008014:	d101      	bne.n	800801a <__sflush_r+0x76>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b903      	cbnz	r3, 800801c <__sflush_r+0x78>
 800801a:	6560      	str	r0, [r4, #84]	@ 0x54
 800801c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800801e:	602f      	str	r7, [r5, #0]
 8008020:	b1b9      	cbz	r1, 8008052 <__sflush_r+0xae>
 8008022:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008026:	4299      	cmp	r1, r3
 8008028:	d002      	beq.n	8008030 <__sflush_r+0x8c>
 800802a:	4628      	mov	r0, r5
 800802c:	f000 fa2e 	bl	800848c <_free_r>
 8008030:	2300      	movs	r3, #0
 8008032:	6363      	str	r3, [r4, #52]	@ 0x34
 8008034:	e00d      	b.n	8008052 <__sflush_r+0xae>
 8008036:	2301      	movs	r3, #1
 8008038:	4628      	mov	r0, r5
 800803a:	47b0      	blx	r6
 800803c:	4602      	mov	r2, r0
 800803e:	1c50      	adds	r0, r2, #1
 8008040:	d1c9      	bne.n	8007fd6 <__sflush_r+0x32>
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0c6      	beq.n	8007fd6 <__sflush_r+0x32>
 8008048:	2b1d      	cmp	r3, #29
 800804a:	d001      	beq.n	8008050 <__sflush_r+0xac>
 800804c:	2b16      	cmp	r3, #22
 800804e:	d11e      	bne.n	800808e <__sflush_r+0xea>
 8008050:	602f      	str	r7, [r5, #0]
 8008052:	2000      	movs	r0, #0
 8008054:	e022      	b.n	800809c <__sflush_r+0xf8>
 8008056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800805a:	b21b      	sxth	r3, r3
 800805c:	e01b      	b.n	8008096 <__sflush_r+0xf2>
 800805e:	690f      	ldr	r7, [r1, #16]
 8008060:	2f00      	cmp	r7, #0
 8008062:	d0f6      	beq.n	8008052 <__sflush_r+0xae>
 8008064:	0793      	lsls	r3, r2, #30
 8008066:	680e      	ldr	r6, [r1, #0]
 8008068:	bf08      	it	eq
 800806a:	694b      	ldreq	r3, [r1, #20]
 800806c:	600f      	str	r7, [r1, #0]
 800806e:	bf18      	it	ne
 8008070:	2300      	movne	r3, #0
 8008072:	eba6 0807 	sub.w	r8, r6, r7
 8008076:	608b      	str	r3, [r1, #8]
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	dde9      	ble.n	8008052 <__sflush_r+0xae>
 800807e:	6a21      	ldr	r1, [r4, #32]
 8008080:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008082:	4643      	mov	r3, r8
 8008084:	463a      	mov	r2, r7
 8008086:	4628      	mov	r0, r5
 8008088:	47b0      	blx	r6
 800808a:	2800      	cmp	r0, #0
 800808c:	dc08      	bgt.n	80080a0 <__sflush_r+0xfc>
 800808e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a0:	4407      	add	r7, r0
 80080a2:	eba8 0800 	sub.w	r8, r8, r0
 80080a6:	e7e7      	b.n	8008078 <__sflush_r+0xd4>
 80080a8:	dfbffffe 	.word	0xdfbffffe

080080ac <_fflush_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	690b      	ldr	r3, [r1, #16]
 80080b0:	4605      	mov	r5, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	b913      	cbnz	r3, 80080bc <_fflush_r+0x10>
 80080b6:	2500      	movs	r5, #0
 80080b8:	4628      	mov	r0, r5
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	b118      	cbz	r0, 80080c6 <_fflush_r+0x1a>
 80080be:	6a03      	ldr	r3, [r0, #32]
 80080c0:	b90b      	cbnz	r3, 80080c6 <_fflush_r+0x1a>
 80080c2:	f000 f8bb 	bl	800823c <__sinit>
 80080c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f3      	beq.n	80080b6 <_fflush_r+0xa>
 80080ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080d0:	07d0      	lsls	r0, r2, #31
 80080d2:	d404      	bmi.n	80080de <_fflush_r+0x32>
 80080d4:	0599      	lsls	r1, r3, #22
 80080d6:	d402      	bmi.n	80080de <_fflush_r+0x32>
 80080d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080da:	f000 f9d4 	bl	8008486 <__retarget_lock_acquire_recursive>
 80080de:	4628      	mov	r0, r5
 80080e0:	4621      	mov	r1, r4
 80080e2:	f7ff ff5f 	bl	8007fa4 <__sflush_r>
 80080e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e8:	07da      	lsls	r2, r3, #31
 80080ea:	4605      	mov	r5, r0
 80080ec:	d4e4      	bmi.n	80080b8 <_fflush_r+0xc>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	059b      	lsls	r3, r3, #22
 80080f2:	d4e1      	bmi.n	80080b8 <_fflush_r+0xc>
 80080f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f6:	f000 f9c7 	bl	8008488 <__retarget_lock_release_recursive>
 80080fa:	e7dd      	b.n	80080b8 <_fflush_r+0xc>

080080fc <fflush>:
 80080fc:	4601      	mov	r1, r0
 80080fe:	b920      	cbnz	r0, 800810a <fflush+0xe>
 8008100:	4a04      	ldr	r2, [pc, #16]	@ (8008114 <fflush+0x18>)
 8008102:	4905      	ldr	r1, [pc, #20]	@ (8008118 <fflush+0x1c>)
 8008104:	4805      	ldr	r0, [pc, #20]	@ (800811c <fflush+0x20>)
 8008106:	f000 b8b1 	b.w	800826c <_fwalk_sglue>
 800810a:	4b05      	ldr	r3, [pc, #20]	@ (8008120 <fflush+0x24>)
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	f7ff bfcd 	b.w	80080ac <_fflush_r>
 8008112:	bf00      	nop
 8008114:	20000038 	.word	0x20000038
 8008118:	080080ad 	.word	0x080080ad
 800811c:	20000048 	.word	0x20000048
 8008120:	20000044 	.word	0x20000044

08008124 <std>:
 8008124:	2300      	movs	r3, #0
 8008126:	b510      	push	{r4, lr}
 8008128:	4604      	mov	r4, r0
 800812a:	e9c0 3300 	strd	r3, r3, [r0]
 800812e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008132:	6083      	str	r3, [r0, #8]
 8008134:	8181      	strh	r1, [r0, #12]
 8008136:	6643      	str	r3, [r0, #100]	@ 0x64
 8008138:	81c2      	strh	r2, [r0, #14]
 800813a:	6183      	str	r3, [r0, #24]
 800813c:	4619      	mov	r1, r3
 800813e:	2208      	movs	r2, #8
 8008140:	305c      	adds	r0, #92	@ 0x5c
 8008142:	f000 f926 	bl	8008392 <memset>
 8008146:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <std+0x58>)
 8008148:	6263      	str	r3, [r4, #36]	@ 0x24
 800814a:	4b0d      	ldr	r3, [pc, #52]	@ (8008180 <std+0x5c>)
 800814c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800814e:	4b0d      	ldr	r3, [pc, #52]	@ (8008184 <std+0x60>)
 8008150:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008152:	4b0d      	ldr	r3, [pc, #52]	@ (8008188 <std+0x64>)
 8008154:	6323      	str	r3, [r4, #48]	@ 0x30
 8008156:	4b0d      	ldr	r3, [pc, #52]	@ (800818c <std+0x68>)
 8008158:	6224      	str	r4, [r4, #32]
 800815a:	429c      	cmp	r4, r3
 800815c:	d006      	beq.n	800816c <std+0x48>
 800815e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008162:	4294      	cmp	r4, r2
 8008164:	d002      	beq.n	800816c <std+0x48>
 8008166:	33d0      	adds	r3, #208	@ 0xd0
 8008168:	429c      	cmp	r4, r3
 800816a:	d105      	bne.n	8008178 <std+0x54>
 800816c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008174:	f000 b986 	b.w	8008484 <__retarget_lock_init_recursive>
 8008178:	bd10      	pop	{r4, pc}
 800817a:	bf00      	nop
 800817c:	0800830d 	.word	0x0800830d
 8008180:	0800832f 	.word	0x0800832f
 8008184:	08008367 	.word	0x08008367
 8008188:	0800838b 	.word	0x0800838b
 800818c:	20002550 	.word	0x20002550

08008190 <stdio_exit_handler>:
 8008190:	4a02      	ldr	r2, [pc, #8]	@ (800819c <stdio_exit_handler+0xc>)
 8008192:	4903      	ldr	r1, [pc, #12]	@ (80081a0 <stdio_exit_handler+0x10>)
 8008194:	4803      	ldr	r0, [pc, #12]	@ (80081a4 <stdio_exit_handler+0x14>)
 8008196:	f000 b869 	b.w	800826c <_fwalk_sglue>
 800819a:	bf00      	nop
 800819c:	20000038 	.word	0x20000038
 80081a0:	080080ad 	.word	0x080080ad
 80081a4:	20000048 	.word	0x20000048

080081a8 <cleanup_stdio>:
 80081a8:	6841      	ldr	r1, [r0, #4]
 80081aa:	4b0c      	ldr	r3, [pc, #48]	@ (80081dc <cleanup_stdio+0x34>)
 80081ac:	4299      	cmp	r1, r3
 80081ae:	b510      	push	{r4, lr}
 80081b0:	4604      	mov	r4, r0
 80081b2:	d001      	beq.n	80081b8 <cleanup_stdio+0x10>
 80081b4:	f7ff ff7a 	bl	80080ac <_fflush_r>
 80081b8:	68a1      	ldr	r1, [r4, #8]
 80081ba:	4b09      	ldr	r3, [pc, #36]	@ (80081e0 <cleanup_stdio+0x38>)
 80081bc:	4299      	cmp	r1, r3
 80081be:	d002      	beq.n	80081c6 <cleanup_stdio+0x1e>
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff ff73 	bl	80080ac <_fflush_r>
 80081c6:	68e1      	ldr	r1, [r4, #12]
 80081c8:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <cleanup_stdio+0x3c>)
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d004      	beq.n	80081d8 <cleanup_stdio+0x30>
 80081ce:	4620      	mov	r0, r4
 80081d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d4:	f7ff bf6a 	b.w	80080ac <_fflush_r>
 80081d8:	bd10      	pop	{r4, pc}
 80081da:	bf00      	nop
 80081dc:	20002550 	.word	0x20002550
 80081e0:	200025b8 	.word	0x200025b8
 80081e4:	20002620 	.word	0x20002620

080081e8 <global_stdio_init.part.0>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008218 <global_stdio_init.part.0+0x30>)
 80081ec:	4c0b      	ldr	r4, [pc, #44]	@ (800821c <global_stdio_init.part.0+0x34>)
 80081ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008220 <global_stdio_init.part.0+0x38>)
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	4620      	mov	r0, r4
 80081f4:	2200      	movs	r2, #0
 80081f6:	2104      	movs	r1, #4
 80081f8:	f7ff ff94 	bl	8008124 <std>
 80081fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008200:	2201      	movs	r2, #1
 8008202:	2109      	movs	r1, #9
 8008204:	f7ff ff8e 	bl	8008124 <std>
 8008208:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800820c:	2202      	movs	r2, #2
 800820e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008212:	2112      	movs	r1, #18
 8008214:	f7ff bf86 	b.w	8008124 <std>
 8008218:	20002688 	.word	0x20002688
 800821c:	20002550 	.word	0x20002550
 8008220:	08008191 	.word	0x08008191

08008224 <__sfp_lock_acquire>:
 8008224:	4801      	ldr	r0, [pc, #4]	@ (800822c <__sfp_lock_acquire+0x8>)
 8008226:	f000 b92e 	b.w	8008486 <__retarget_lock_acquire_recursive>
 800822a:	bf00      	nop
 800822c:	20002691 	.word	0x20002691

08008230 <__sfp_lock_release>:
 8008230:	4801      	ldr	r0, [pc, #4]	@ (8008238 <__sfp_lock_release+0x8>)
 8008232:	f000 b929 	b.w	8008488 <__retarget_lock_release_recursive>
 8008236:	bf00      	nop
 8008238:	20002691 	.word	0x20002691

0800823c <__sinit>:
 800823c:	b510      	push	{r4, lr}
 800823e:	4604      	mov	r4, r0
 8008240:	f7ff fff0 	bl	8008224 <__sfp_lock_acquire>
 8008244:	6a23      	ldr	r3, [r4, #32]
 8008246:	b11b      	cbz	r3, 8008250 <__sinit+0x14>
 8008248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800824c:	f7ff bff0 	b.w	8008230 <__sfp_lock_release>
 8008250:	4b04      	ldr	r3, [pc, #16]	@ (8008264 <__sinit+0x28>)
 8008252:	6223      	str	r3, [r4, #32]
 8008254:	4b04      	ldr	r3, [pc, #16]	@ (8008268 <__sinit+0x2c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f5      	bne.n	8008248 <__sinit+0xc>
 800825c:	f7ff ffc4 	bl	80081e8 <global_stdio_init.part.0>
 8008260:	e7f2      	b.n	8008248 <__sinit+0xc>
 8008262:	bf00      	nop
 8008264:	080081a9 	.word	0x080081a9
 8008268:	20002688 	.word	0x20002688

0800826c <_fwalk_sglue>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	4607      	mov	r7, r0
 8008272:	4688      	mov	r8, r1
 8008274:	4614      	mov	r4, r2
 8008276:	2600      	movs	r6, #0
 8008278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800827c:	f1b9 0901 	subs.w	r9, r9, #1
 8008280:	d505      	bpl.n	800828e <_fwalk_sglue+0x22>
 8008282:	6824      	ldr	r4, [r4, #0]
 8008284:	2c00      	cmp	r4, #0
 8008286:	d1f7      	bne.n	8008278 <_fwalk_sglue+0xc>
 8008288:	4630      	mov	r0, r6
 800828a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828e:	89ab      	ldrh	r3, [r5, #12]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d907      	bls.n	80082a4 <_fwalk_sglue+0x38>
 8008294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008298:	3301      	adds	r3, #1
 800829a:	d003      	beq.n	80082a4 <_fwalk_sglue+0x38>
 800829c:	4629      	mov	r1, r5
 800829e:	4638      	mov	r0, r7
 80082a0:	47c0      	blx	r8
 80082a2:	4306      	orrs	r6, r0
 80082a4:	3568      	adds	r5, #104	@ 0x68
 80082a6:	e7e9      	b.n	800827c <_fwalk_sglue+0x10>

080082a8 <iprintf>:
 80082a8:	b40f      	push	{r0, r1, r2, r3}
 80082aa:	b507      	push	{r0, r1, r2, lr}
 80082ac:	4906      	ldr	r1, [pc, #24]	@ (80082c8 <iprintf+0x20>)
 80082ae:	ab04      	add	r3, sp, #16
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b6:	6881      	ldr	r1, [r0, #8]
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	f000 fb61 	bl	8008980 <_vfiprintf_r>
 80082be:	b003      	add	sp, #12
 80082c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082c4:	b004      	add	sp, #16
 80082c6:	4770      	bx	lr
 80082c8:	20000044 	.word	0x20000044

080082cc <siprintf>:
 80082cc:	b40e      	push	{r1, r2, r3}
 80082ce:	b500      	push	{lr}
 80082d0:	b09c      	sub	sp, #112	@ 0x70
 80082d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80082d4:	9002      	str	r0, [sp, #8]
 80082d6:	9006      	str	r0, [sp, #24]
 80082d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80082dc:	4809      	ldr	r0, [pc, #36]	@ (8008304 <siprintf+0x38>)
 80082de:	9107      	str	r1, [sp, #28]
 80082e0:	9104      	str	r1, [sp, #16]
 80082e2:	4909      	ldr	r1, [pc, #36]	@ (8008308 <siprintf+0x3c>)
 80082e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e8:	9105      	str	r1, [sp, #20]
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	a902      	add	r1, sp, #8
 80082f0:	f000 fa20 	bl	8008734 <_svfiprintf_r>
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	b01c      	add	sp, #112	@ 0x70
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	20000044 	.word	0x20000044
 8008308:	ffff0208 	.word	0xffff0208

0800830c <__sread>:
 800830c:	b510      	push	{r4, lr}
 800830e:	460c      	mov	r4, r1
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	f000 f868 	bl	80083e8 <_read_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	bfab      	itete	ge
 800831c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800831e:	89a3      	ldrhlt	r3, [r4, #12]
 8008320:	181b      	addge	r3, r3, r0
 8008322:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008326:	bfac      	ite	ge
 8008328:	6563      	strge	r3, [r4, #84]	@ 0x54
 800832a:	81a3      	strhlt	r3, [r4, #12]
 800832c:	bd10      	pop	{r4, pc}

0800832e <__swrite>:
 800832e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008332:	461f      	mov	r7, r3
 8008334:	898b      	ldrh	r3, [r1, #12]
 8008336:	05db      	lsls	r3, r3, #23
 8008338:	4605      	mov	r5, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4616      	mov	r6, r2
 800833e:	d505      	bpl.n	800834c <__swrite+0x1e>
 8008340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008344:	2302      	movs	r3, #2
 8008346:	2200      	movs	r2, #0
 8008348:	f000 f83c 	bl	80083c4 <_lseek_r>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008352:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	4632      	mov	r2, r6
 800835a:	463b      	mov	r3, r7
 800835c:	4628      	mov	r0, r5
 800835e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008362:	f000 b853 	b.w	800840c <_write_r>

08008366 <__sseek>:
 8008366:	b510      	push	{r4, lr}
 8008368:	460c      	mov	r4, r1
 800836a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836e:	f000 f829 	bl	80083c4 <_lseek_r>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	bf15      	itete	ne
 8008378:	6560      	strne	r0, [r4, #84]	@ 0x54
 800837a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800837e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008382:	81a3      	strheq	r3, [r4, #12]
 8008384:	bf18      	it	ne
 8008386:	81a3      	strhne	r3, [r4, #12]
 8008388:	bd10      	pop	{r4, pc}

0800838a <__sclose>:
 800838a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838e:	f000 b809 	b.w	80083a4 <_close_r>

08008392 <memset>:
 8008392:	4402      	add	r2, r0
 8008394:	4603      	mov	r3, r0
 8008396:	4293      	cmp	r3, r2
 8008398:	d100      	bne.n	800839c <memset+0xa>
 800839a:	4770      	bx	lr
 800839c:	f803 1b01 	strb.w	r1, [r3], #1
 80083a0:	e7f9      	b.n	8008396 <memset+0x4>
	...

080083a4 <_close_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d06      	ldr	r5, [pc, #24]	@ (80083c0 <_close_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	f7f8 ff1e 	bl	80011f0 <_close>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_close_r+0x1a>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_close_r+0x1a>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	2000268c 	.word	0x2000268c

080083c4 <_lseek_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d07      	ldr	r5, [pc, #28]	@ (80083e4 <_lseek_r+0x20>)
 80083c8:	4604      	mov	r4, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	4611      	mov	r1, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	602a      	str	r2, [r5, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7f8 ff33 	bl	800123e <_lseek>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_lseek_r+0x1e>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_lseek_r+0x1e>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	2000268c 	.word	0x2000268c

080083e8 <_read_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	@ (8008408 <_read_r+0x20>)
 80083ec:	4604      	mov	r4, r0
 80083ee:	4608      	mov	r0, r1
 80083f0:	4611      	mov	r1, r2
 80083f2:	2200      	movs	r2, #0
 80083f4:	602a      	str	r2, [r5, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f7f8 fec1 	bl	800117e <_read>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_read_r+0x1e>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_read_r+0x1e>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	2000268c 	.word	0x2000268c

0800840c <_write_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	@ (800842c <_write_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f8 fecc 	bl	80011b8 <_write>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_write_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_write_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	2000268c 	.word	0x2000268c

08008430 <__errno>:
 8008430:	4b01      	ldr	r3, [pc, #4]	@ (8008438 <__errno+0x8>)
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	20000044 	.word	0x20000044

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4d0d      	ldr	r5, [pc, #52]	@ (8008474 <__libc_init_array+0x38>)
 8008440:	4c0d      	ldr	r4, [pc, #52]	@ (8008478 <__libc_init_array+0x3c>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	2600      	movs	r6, #0
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	4d0b      	ldr	r5, [pc, #44]	@ (800847c <__libc_init_array+0x40>)
 800844e:	4c0c      	ldr	r4, [pc, #48]	@ (8008480 <__libc_init_array+0x44>)
 8008450:	f000 fec2 	bl	80091d8 <_init>
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	2600      	movs	r6, #0
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	0800976c 	.word	0x0800976c
 8008478:	0800976c 	.word	0x0800976c
 800847c:	0800976c 	.word	0x0800976c
 8008480:	08009770 	.word	0x08009770

08008484 <__retarget_lock_init_recursive>:
 8008484:	4770      	bx	lr

08008486 <__retarget_lock_acquire_recursive>:
 8008486:	4770      	bx	lr

08008488 <__retarget_lock_release_recursive>:
 8008488:	4770      	bx	lr
	...

0800848c <_free_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4605      	mov	r5, r0
 8008490:	2900      	cmp	r1, #0
 8008492:	d041      	beq.n	8008518 <_free_r+0x8c>
 8008494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008498:	1f0c      	subs	r4, r1, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	bfb8      	it	lt
 800849e:	18e4      	addlt	r4, r4, r3
 80084a0:	f000 f8e0 	bl	8008664 <__malloc_lock>
 80084a4:	4a1d      	ldr	r2, [pc, #116]	@ (800851c <_free_r+0x90>)
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	b933      	cbnz	r3, 80084b8 <_free_r+0x2c>
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	6014      	str	r4, [r2, #0]
 80084ae:	4628      	mov	r0, r5
 80084b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b4:	f000 b8dc 	b.w	8008670 <__malloc_unlock>
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d908      	bls.n	80084ce <_free_r+0x42>
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	1821      	adds	r1, r4, r0
 80084c0:	428b      	cmp	r3, r1
 80084c2:	bf01      	itttt	eq
 80084c4:	6819      	ldreq	r1, [r3, #0]
 80084c6:	685b      	ldreq	r3, [r3, #4]
 80084c8:	1809      	addeq	r1, r1, r0
 80084ca:	6021      	streq	r1, [r4, #0]
 80084cc:	e7ed      	b.n	80084aa <_free_r+0x1e>
 80084ce:	461a      	mov	r2, r3
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b10b      	cbz	r3, 80084d8 <_free_r+0x4c>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d9fa      	bls.n	80084ce <_free_r+0x42>
 80084d8:	6811      	ldr	r1, [r2, #0]
 80084da:	1850      	adds	r0, r2, r1
 80084dc:	42a0      	cmp	r0, r4
 80084de:	d10b      	bne.n	80084f8 <_free_r+0x6c>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	4401      	add	r1, r0
 80084e4:	1850      	adds	r0, r2, r1
 80084e6:	4283      	cmp	r3, r0
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	d1e0      	bne.n	80084ae <_free_r+0x22>
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	6053      	str	r3, [r2, #4]
 80084f2:	4408      	add	r0, r1
 80084f4:	6010      	str	r0, [r2, #0]
 80084f6:	e7da      	b.n	80084ae <_free_r+0x22>
 80084f8:	d902      	bls.n	8008500 <_free_r+0x74>
 80084fa:	230c      	movs	r3, #12
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	e7d6      	b.n	80084ae <_free_r+0x22>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	1821      	adds	r1, r4, r0
 8008504:	428b      	cmp	r3, r1
 8008506:	bf04      	itt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	bf04      	itt	eq
 8008510:	1809      	addeq	r1, r1, r0
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	6054      	str	r4, [r2, #4]
 8008516:	e7ca      	b.n	80084ae <_free_r+0x22>
 8008518:	bd38      	pop	{r3, r4, r5, pc}
 800851a:	bf00      	nop
 800851c:	20002698 	.word	0x20002698

08008520 <sbrk_aligned>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4e0f      	ldr	r6, [pc, #60]	@ (8008560 <sbrk_aligned+0x40>)
 8008524:	460c      	mov	r4, r1
 8008526:	6831      	ldr	r1, [r6, #0]
 8008528:	4605      	mov	r5, r0
 800852a:	b911      	cbnz	r1, 8008532 <sbrk_aligned+0x12>
 800852c:	f000 fd7c 	bl	8009028 <_sbrk_r>
 8008530:	6030      	str	r0, [r6, #0]
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f000 fd77 	bl	8009028 <_sbrk_r>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	d103      	bne.n	8008546 <sbrk_aligned+0x26>
 800853e:	f04f 34ff 	mov.w	r4, #4294967295
 8008542:	4620      	mov	r0, r4
 8008544:	bd70      	pop	{r4, r5, r6, pc}
 8008546:	1cc4      	adds	r4, r0, #3
 8008548:	f024 0403 	bic.w	r4, r4, #3
 800854c:	42a0      	cmp	r0, r4
 800854e:	d0f8      	beq.n	8008542 <sbrk_aligned+0x22>
 8008550:	1a21      	subs	r1, r4, r0
 8008552:	4628      	mov	r0, r5
 8008554:	f000 fd68 	bl	8009028 <_sbrk_r>
 8008558:	3001      	adds	r0, #1
 800855a:	d1f2      	bne.n	8008542 <sbrk_aligned+0x22>
 800855c:	e7ef      	b.n	800853e <sbrk_aligned+0x1e>
 800855e:	bf00      	nop
 8008560:	20002694 	.word	0x20002694

08008564 <_malloc_r>:
 8008564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008568:	1ccd      	adds	r5, r1, #3
 800856a:	f025 0503 	bic.w	r5, r5, #3
 800856e:	3508      	adds	r5, #8
 8008570:	2d0c      	cmp	r5, #12
 8008572:	bf38      	it	cc
 8008574:	250c      	movcc	r5, #12
 8008576:	2d00      	cmp	r5, #0
 8008578:	4606      	mov	r6, r0
 800857a:	db01      	blt.n	8008580 <_malloc_r+0x1c>
 800857c:	42a9      	cmp	r1, r5
 800857e:	d904      	bls.n	800858a <_malloc_r+0x26>
 8008580:	230c      	movs	r3, #12
 8008582:	6033      	str	r3, [r6, #0]
 8008584:	2000      	movs	r0, #0
 8008586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008660 <_malloc_r+0xfc>
 800858e:	f000 f869 	bl	8008664 <__malloc_lock>
 8008592:	f8d8 3000 	ldr.w	r3, [r8]
 8008596:	461c      	mov	r4, r3
 8008598:	bb44      	cbnz	r4, 80085ec <_malloc_r+0x88>
 800859a:	4629      	mov	r1, r5
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ffbf 	bl	8008520 <sbrk_aligned>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	4604      	mov	r4, r0
 80085a6:	d158      	bne.n	800865a <_malloc_r+0xf6>
 80085a8:	f8d8 4000 	ldr.w	r4, [r8]
 80085ac:	4627      	mov	r7, r4
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	d143      	bne.n	800863a <_malloc_r+0xd6>
 80085b2:	2c00      	cmp	r4, #0
 80085b4:	d04b      	beq.n	800864e <_malloc_r+0xea>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	4639      	mov	r1, r7
 80085ba:	4630      	mov	r0, r6
 80085bc:	eb04 0903 	add.w	r9, r4, r3
 80085c0:	f000 fd32 	bl	8009028 <_sbrk_r>
 80085c4:	4581      	cmp	r9, r0
 80085c6:	d142      	bne.n	800864e <_malloc_r+0xea>
 80085c8:	6821      	ldr	r1, [r4, #0]
 80085ca:	1a6d      	subs	r5, r5, r1
 80085cc:	4629      	mov	r1, r5
 80085ce:	4630      	mov	r0, r6
 80085d0:	f7ff ffa6 	bl	8008520 <sbrk_aligned>
 80085d4:	3001      	adds	r0, #1
 80085d6:	d03a      	beq.n	800864e <_malloc_r+0xea>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	442b      	add	r3, r5
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	f8d8 3000 	ldr.w	r3, [r8]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	bb62      	cbnz	r2, 8008640 <_malloc_r+0xdc>
 80085e6:	f8c8 7000 	str.w	r7, [r8]
 80085ea:	e00f      	b.n	800860c <_malloc_r+0xa8>
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	1b52      	subs	r2, r2, r5
 80085f0:	d420      	bmi.n	8008634 <_malloc_r+0xd0>
 80085f2:	2a0b      	cmp	r2, #11
 80085f4:	d917      	bls.n	8008626 <_malloc_r+0xc2>
 80085f6:	1961      	adds	r1, r4, r5
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	6025      	str	r5, [r4, #0]
 80085fc:	bf18      	it	ne
 80085fe:	6059      	strne	r1, [r3, #4]
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	bf08      	it	eq
 8008604:	f8c8 1000 	streq.w	r1, [r8]
 8008608:	5162      	str	r2, [r4, r5]
 800860a:	604b      	str	r3, [r1, #4]
 800860c:	4630      	mov	r0, r6
 800860e:	f000 f82f 	bl	8008670 <__malloc_unlock>
 8008612:	f104 000b 	add.w	r0, r4, #11
 8008616:	1d23      	adds	r3, r4, #4
 8008618:	f020 0007 	bic.w	r0, r0, #7
 800861c:	1ac2      	subs	r2, r0, r3
 800861e:	bf1c      	itt	ne
 8008620:	1a1b      	subne	r3, r3, r0
 8008622:	50a3      	strne	r3, [r4, r2]
 8008624:	e7af      	b.n	8008586 <_malloc_r+0x22>
 8008626:	6862      	ldr	r2, [r4, #4]
 8008628:	42a3      	cmp	r3, r4
 800862a:	bf0c      	ite	eq
 800862c:	f8c8 2000 	streq.w	r2, [r8]
 8008630:	605a      	strne	r2, [r3, #4]
 8008632:	e7eb      	b.n	800860c <_malloc_r+0xa8>
 8008634:	4623      	mov	r3, r4
 8008636:	6864      	ldr	r4, [r4, #4]
 8008638:	e7ae      	b.n	8008598 <_malloc_r+0x34>
 800863a:	463c      	mov	r4, r7
 800863c:	687f      	ldr	r7, [r7, #4]
 800863e:	e7b6      	b.n	80085ae <_malloc_r+0x4a>
 8008640:	461a      	mov	r2, r3
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	42a3      	cmp	r3, r4
 8008646:	d1fb      	bne.n	8008640 <_malloc_r+0xdc>
 8008648:	2300      	movs	r3, #0
 800864a:	6053      	str	r3, [r2, #4]
 800864c:	e7de      	b.n	800860c <_malloc_r+0xa8>
 800864e:	230c      	movs	r3, #12
 8008650:	6033      	str	r3, [r6, #0]
 8008652:	4630      	mov	r0, r6
 8008654:	f000 f80c 	bl	8008670 <__malloc_unlock>
 8008658:	e794      	b.n	8008584 <_malloc_r+0x20>
 800865a:	6005      	str	r5, [r0, #0]
 800865c:	e7d6      	b.n	800860c <_malloc_r+0xa8>
 800865e:	bf00      	nop
 8008660:	20002698 	.word	0x20002698

08008664 <__malloc_lock>:
 8008664:	4801      	ldr	r0, [pc, #4]	@ (800866c <__malloc_lock+0x8>)
 8008666:	f7ff bf0e 	b.w	8008486 <__retarget_lock_acquire_recursive>
 800866a:	bf00      	nop
 800866c:	20002690 	.word	0x20002690

08008670 <__malloc_unlock>:
 8008670:	4801      	ldr	r0, [pc, #4]	@ (8008678 <__malloc_unlock+0x8>)
 8008672:	f7ff bf09 	b.w	8008488 <__retarget_lock_release_recursive>
 8008676:	bf00      	nop
 8008678:	20002690 	.word	0x20002690

0800867c <__ssputs_r>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	688e      	ldr	r6, [r1, #8]
 8008682:	461f      	mov	r7, r3
 8008684:	42be      	cmp	r6, r7
 8008686:	680b      	ldr	r3, [r1, #0]
 8008688:	4682      	mov	sl, r0
 800868a:	460c      	mov	r4, r1
 800868c:	4690      	mov	r8, r2
 800868e:	d82d      	bhi.n	80086ec <__ssputs_r+0x70>
 8008690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008694:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008698:	d026      	beq.n	80086e8 <__ssputs_r+0x6c>
 800869a:	6965      	ldr	r5, [r4, #20]
 800869c:	6909      	ldr	r1, [r1, #16]
 800869e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086a2:	eba3 0901 	sub.w	r9, r3, r1
 80086a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086aa:	1c7b      	adds	r3, r7, #1
 80086ac:	444b      	add	r3, r9
 80086ae:	106d      	asrs	r5, r5, #1
 80086b0:	429d      	cmp	r5, r3
 80086b2:	bf38      	it	cc
 80086b4:	461d      	movcc	r5, r3
 80086b6:	0553      	lsls	r3, r2, #21
 80086b8:	d527      	bpl.n	800870a <__ssputs_r+0x8e>
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7ff ff52 	bl	8008564 <_malloc_r>
 80086c0:	4606      	mov	r6, r0
 80086c2:	b360      	cbz	r0, 800871e <__ssputs_r+0xa2>
 80086c4:	6921      	ldr	r1, [r4, #16]
 80086c6:	464a      	mov	r2, r9
 80086c8:	f000 fcbe 	bl	8009048 <memcpy>
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	6126      	str	r6, [r4, #16]
 80086da:	6165      	str	r5, [r4, #20]
 80086dc:	444e      	add	r6, r9
 80086de:	eba5 0509 	sub.w	r5, r5, r9
 80086e2:	6026      	str	r6, [r4, #0]
 80086e4:	60a5      	str	r5, [r4, #8]
 80086e6:	463e      	mov	r6, r7
 80086e8:	42be      	cmp	r6, r7
 80086ea:	d900      	bls.n	80086ee <__ssputs_r+0x72>
 80086ec:	463e      	mov	r6, r7
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	4632      	mov	r2, r6
 80086f2:	4641      	mov	r1, r8
 80086f4:	f000 fc7e 	bl	8008ff4 <memmove>
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	1b9b      	subs	r3, r3, r6
 80086fc:	60a3      	str	r3, [r4, #8]
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	4433      	add	r3, r6
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	2000      	movs	r0, #0
 8008706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870a:	462a      	mov	r2, r5
 800870c:	f000 fcaa 	bl	8009064 <_realloc_r>
 8008710:	4606      	mov	r6, r0
 8008712:	2800      	cmp	r0, #0
 8008714:	d1e0      	bne.n	80086d8 <__ssputs_r+0x5c>
 8008716:	6921      	ldr	r1, [r4, #16]
 8008718:	4650      	mov	r0, sl
 800871a:	f7ff feb7 	bl	800848c <_free_r>
 800871e:	230c      	movs	r3, #12
 8008720:	f8ca 3000 	str.w	r3, [sl]
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e7e9      	b.n	8008706 <__ssputs_r+0x8a>
	...

08008734 <_svfiprintf_r>:
 8008734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	4698      	mov	r8, r3
 800873a:	898b      	ldrh	r3, [r1, #12]
 800873c:	061b      	lsls	r3, r3, #24
 800873e:	b09d      	sub	sp, #116	@ 0x74
 8008740:	4607      	mov	r7, r0
 8008742:	460d      	mov	r5, r1
 8008744:	4614      	mov	r4, r2
 8008746:	d510      	bpl.n	800876a <_svfiprintf_r+0x36>
 8008748:	690b      	ldr	r3, [r1, #16]
 800874a:	b973      	cbnz	r3, 800876a <_svfiprintf_r+0x36>
 800874c:	2140      	movs	r1, #64	@ 0x40
 800874e:	f7ff ff09 	bl	8008564 <_malloc_r>
 8008752:	6028      	str	r0, [r5, #0]
 8008754:	6128      	str	r0, [r5, #16]
 8008756:	b930      	cbnz	r0, 8008766 <_svfiprintf_r+0x32>
 8008758:	230c      	movs	r3, #12
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	b01d      	add	sp, #116	@ 0x74
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008766:	2340      	movs	r3, #64	@ 0x40
 8008768:	616b      	str	r3, [r5, #20]
 800876a:	2300      	movs	r3, #0
 800876c:	9309      	str	r3, [sp, #36]	@ 0x24
 800876e:	2320      	movs	r3, #32
 8008770:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008774:	f8cd 800c 	str.w	r8, [sp, #12]
 8008778:	2330      	movs	r3, #48	@ 0x30
 800877a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008918 <_svfiprintf_r+0x1e4>
 800877e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008782:	f04f 0901 	mov.w	r9, #1
 8008786:	4623      	mov	r3, r4
 8008788:	469a      	mov	sl, r3
 800878a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800878e:	b10a      	cbz	r2, 8008794 <_svfiprintf_r+0x60>
 8008790:	2a25      	cmp	r2, #37	@ 0x25
 8008792:	d1f9      	bne.n	8008788 <_svfiprintf_r+0x54>
 8008794:	ebba 0b04 	subs.w	fp, sl, r4
 8008798:	d00b      	beq.n	80087b2 <_svfiprintf_r+0x7e>
 800879a:	465b      	mov	r3, fp
 800879c:	4622      	mov	r2, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	4638      	mov	r0, r7
 80087a2:	f7ff ff6b 	bl	800867c <__ssputs_r>
 80087a6:	3001      	adds	r0, #1
 80087a8:	f000 80a7 	beq.w	80088fa <_svfiprintf_r+0x1c6>
 80087ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087ae:	445a      	add	r2, fp
 80087b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087b2:	f89a 3000 	ldrb.w	r3, [sl]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 809f 	beq.w	80088fa <_svfiprintf_r+0x1c6>
 80087bc:	2300      	movs	r3, #0
 80087be:	f04f 32ff 	mov.w	r2, #4294967295
 80087c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087c6:	f10a 0a01 	add.w	sl, sl, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	9307      	str	r3, [sp, #28]
 80087ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80087d4:	4654      	mov	r4, sl
 80087d6:	2205      	movs	r2, #5
 80087d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087dc:	484e      	ldr	r0, [pc, #312]	@ (8008918 <_svfiprintf_r+0x1e4>)
 80087de:	f7f7 fd1f 	bl	8000220 <memchr>
 80087e2:	9a04      	ldr	r2, [sp, #16]
 80087e4:	b9d8      	cbnz	r0, 800881e <_svfiprintf_r+0xea>
 80087e6:	06d0      	lsls	r0, r2, #27
 80087e8:	bf44      	itt	mi
 80087ea:	2320      	movmi	r3, #32
 80087ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f0:	0711      	lsls	r1, r2, #28
 80087f2:	bf44      	itt	mi
 80087f4:	232b      	movmi	r3, #43	@ 0x2b
 80087f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087fa:	f89a 3000 	ldrb.w	r3, [sl]
 80087fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008800:	d015      	beq.n	800882e <_svfiprintf_r+0xfa>
 8008802:	9a07      	ldr	r2, [sp, #28]
 8008804:	4654      	mov	r4, sl
 8008806:	2000      	movs	r0, #0
 8008808:	f04f 0c0a 	mov.w	ip, #10
 800880c:	4621      	mov	r1, r4
 800880e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008812:	3b30      	subs	r3, #48	@ 0x30
 8008814:	2b09      	cmp	r3, #9
 8008816:	d94b      	bls.n	80088b0 <_svfiprintf_r+0x17c>
 8008818:	b1b0      	cbz	r0, 8008848 <_svfiprintf_r+0x114>
 800881a:	9207      	str	r2, [sp, #28]
 800881c:	e014      	b.n	8008848 <_svfiprintf_r+0x114>
 800881e:	eba0 0308 	sub.w	r3, r0, r8
 8008822:	fa09 f303 	lsl.w	r3, r9, r3
 8008826:	4313      	orrs	r3, r2
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	46a2      	mov	sl, r4
 800882c:	e7d2      	b.n	80087d4 <_svfiprintf_r+0xa0>
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	1d19      	adds	r1, r3, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	9103      	str	r1, [sp, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfbb      	ittet	lt
 800883a:	425b      	neglt	r3, r3
 800883c:	f042 0202 	orrlt.w	r2, r2, #2
 8008840:	9307      	strge	r3, [sp, #28]
 8008842:	9307      	strlt	r3, [sp, #28]
 8008844:	bfb8      	it	lt
 8008846:	9204      	strlt	r2, [sp, #16]
 8008848:	7823      	ldrb	r3, [r4, #0]
 800884a:	2b2e      	cmp	r3, #46	@ 0x2e
 800884c:	d10a      	bne.n	8008864 <_svfiprintf_r+0x130>
 800884e:	7863      	ldrb	r3, [r4, #1]
 8008850:	2b2a      	cmp	r3, #42	@ 0x2a
 8008852:	d132      	bne.n	80088ba <_svfiprintf_r+0x186>
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	9203      	str	r2, [sp, #12]
 800885c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008860:	3402      	adds	r4, #2
 8008862:	9305      	str	r3, [sp, #20]
 8008864:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008928 <_svfiprintf_r+0x1f4>
 8008868:	7821      	ldrb	r1, [r4, #0]
 800886a:	2203      	movs	r2, #3
 800886c:	4650      	mov	r0, sl
 800886e:	f7f7 fcd7 	bl	8000220 <memchr>
 8008872:	b138      	cbz	r0, 8008884 <_svfiprintf_r+0x150>
 8008874:	9b04      	ldr	r3, [sp, #16]
 8008876:	eba0 000a 	sub.w	r0, r0, sl
 800887a:	2240      	movs	r2, #64	@ 0x40
 800887c:	4082      	lsls	r2, r0
 800887e:	4313      	orrs	r3, r2
 8008880:	3401      	adds	r4, #1
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008888:	4824      	ldr	r0, [pc, #144]	@ (800891c <_svfiprintf_r+0x1e8>)
 800888a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800888e:	2206      	movs	r2, #6
 8008890:	f7f7 fcc6 	bl	8000220 <memchr>
 8008894:	2800      	cmp	r0, #0
 8008896:	d036      	beq.n	8008906 <_svfiprintf_r+0x1d2>
 8008898:	4b21      	ldr	r3, [pc, #132]	@ (8008920 <_svfiprintf_r+0x1ec>)
 800889a:	bb1b      	cbnz	r3, 80088e4 <_svfiprintf_r+0x1b0>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	3307      	adds	r3, #7
 80088a0:	f023 0307 	bic.w	r3, r3, #7
 80088a4:	3308      	adds	r3, #8
 80088a6:	9303      	str	r3, [sp, #12]
 80088a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088aa:	4433      	add	r3, r6
 80088ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ae:	e76a      	b.n	8008786 <_svfiprintf_r+0x52>
 80088b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088b4:	460c      	mov	r4, r1
 80088b6:	2001      	movs	r0, #1
 80088b8:	e7a8      	b.n	800880c <_svfiprintf_r+0xd8>
 80088ba:	2300      	movs	r3, #0
 80088bc:	3401      	adds	r4, #1
 80088be:	9305      	str	r3, [sp, #20]
 80088c0:	4619      	mov	r1, r3
 80088c2:	f04f 0c0a 	mov.w	ip, #10
 80088c6:	4620      	mov	r0, r4
 80088c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088cc:	3a30      	subs	r2, #48	@ 0x30
 80088ce:	2a09      	cmp	r2, #9
 80088d0:	d903      	bls.n	80088da <_svfiprintf_r+0x1a6>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0c6      	beq.n	8008864 <_svfiprintf_r+0x130>
 80088d6:	9105      	str	r1, [sp, #20]
 80088d8:	e7c4      	b.n	8008864 <_svfiprintf_r+0x130>
 80088da:	fb0c 2101 	mla	r1, ip, r1, r2
 80088de:	4604      	mov	r4, r0
 80088e0:	2301      	movs	r3, #1
 80088e2:	e7f0      	b.n	80088c6 <_svfiprintf_r+0x192>
 80088e4:	ab03      	add	r3, sp, #12
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	462a      	mov	r2, r5
 80088ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008924 <_svfiprintf_r+0x1f0>)
 80088ec:	a904      	add	r1, sp, #16
 80088ee:	4638      	mov	r0, r7
 80088f0:	f3af 8000 	nop.w
 80088f4:	1c42      	adds	r2, r0, #1
 80088f6:	4606      	mov	r6, r0
 80088f8:	d1d6      	bne.n	80088a8 <_svfiprintf_r+0x174>
 80088fa:	89ab      	ldrh	r3, [r5, #12]
 80088fc:	065b      	lsls	r3, r3, #25
 80088fe:	f53f af2d 	bmi.w	800875c <_svfiprintf_r+0x28>
 8008902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008904:	e72c      	b.n	8008760 <_svfiprintf_r+0x2c>
 8008906:	ab03      	add	r3, sp, #12
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	462a      	mov	r2, r5
 800890c:	4b05      	ldr	r3, [pc, #20]	@ (8008924 <_svfiprintf_r+0x1f0>)
 800890e:	a904      	add	r1, sp, #16
 8008910:	4638      	mov	r0, r7
 8008912:	f000 f9bb 	bl	8008c8c <_printf_i>
 8008916:	e7ed      	b.n	80088f4 <_svfiprintf_r+0x1c0>
 8008918:	08009730 	.word	0x08009730
 800891c:	0800973a 	.word	0x0800973a
 8008920:	00000000 	.word	0x00000000
 8008924:	0800867d 	.word	0x0800867d
 8008928:	08009736 	.word	0x08009736

0800892c <__sfputc_r>:
 800892c:	6893      	ldr	r3, [r2, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	b410      	push	{r4}
 8008934:	6093      	str	r3, [r2, #8]
 8008936:	da08      	bge.n	800894a <__sfputc_r+0x1e>
 8008938:	6994      	ldr	r4, [r2, #24]
 800893a:	42a3      	cmp	r3, r4
 800893c:	db01      	blt.n	8008942 <__sfputc_r+0x16>
 800893e:	290a      	cmp	r1, #10
 8008940:	d103      	bne.n	800894a <__sfputc_r+0x1e>
 8008942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008946:	f000 bac1 	b.w	8008ecc <__swbuf_r>
 800894a:	6813      	ldr	r3, [r2, #0]
 800894c:	1c58      	adds	r0, r3, #1
 800894e:	6010      	str	r0, [r2, #0]
 8008950:	7019      	strb	r1, [r3, #0]
 8008952:	4608      	mov	r0, r1
 8008954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008958:	4770      	bx	lr

0800895a <__sfputs_r>:
 800895a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	4614      	mov	r4, r2
 8008962:	18d5      	adds	r5, r2, r3
 8008964:	42ac      	cmp	r4, r5
 8008966:	d101      	bne.n	800896c <__sfputs_r+0x12>
 8008968:	2000      	movs	r0, #0
 800896a:	e007      	b.n	800897c <__sfputs_r+0x22>
 800896c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008970:	463a      	mov	r2, r7
 8008972:	4630      	mov	r0, r6
 8008974:	f7ff ffda 	bl	800892c <__sfputc_r>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d1f3      	bne.n	8008964 <__sfputs_r+0xa>
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008980 <_vfiprintf_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	460d      	mov	r5, r1
 8008986:	b09d      	sub	sp, #116	@ 0x74
 8008988:	4614      	mov	r4, r2
 800898a:	4698      	mov	r8, r3
 800898c:	4606      	mov	r6, r0
 800898e:	b118      	cbz	r0, 8008998 <_vfiprintf_r+0x18>
 8008990:	6a03      	ldr	r3, [r0, #32]
 8008992:	b90b      	cbnz	r3, 8008998 <_vfiprintf_r+0x18>
 8008994:	f7ff fc52 	bl	800823c <__sinit>
 8008998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800899a:	07d9      	lsls	r1, r3, #31
 800899c:	d405      	bmi.n	80089aa <_vfiprintf_r+0x2a>
 800899e:	89ab      	ldrh	r3, [r5, #12]
 80089a0:	059a      	lsls	r2, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_vfiprintf_r+0x2a>
 80089a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089a6:	f7ff fd6e 	bl	8008486 <__retarget_lock_acquire_recursive>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	071b      	lsls	r3, r3, #28
 80089ae:	d501      	bpl.n	80089b4 <_vfiprintf_r+0x34>
 80089b0:	692b      	ldr	r3, [r5, #16]
 80089b2:	b99b      	cbnz	r3, 80089dc <_vfiprintf_r+0x5c>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 fac6 	bl	8008f48 <__swsetup_r>
 80089bc:	b170      	cbz	r0, 80089dc <_vfiprintf_r+0x5c>
 80089be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089c0:	07dc      	lsls	r4, r3, #31
 80089c2:	d504      	bpl.n	80089ce <_vfiprintf_r+0x4e>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b01d      	add	sp, #116	@ 0x74
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	0598      	lsls	r0, r3, #22
 80089d2:	d4f7      	bmi.n	80089c4 <_vfiprintf_r+0x44>
 80089d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d6:	f7ff fd57 	bl	8008488 <__retarget_lock_release_recursive>
 80089da:	e7f3      	b.n	80089c4 <_vfiprintf_r+0x44>
 80089dc:	2300      	movs	r3, #0
 80089de:	9309      	str	r3, [sp, #36]	@ 0x24
 80089e0:	2320      	movs	r3, #32
 80089e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ea:	2330      	movs	r3, #48	@ 0x30
 80089ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b9c <_vfiprintf_r+0x21c>
 80089f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089f4:	f04f 0901 	mov.w	r9, #1
 80089f8:	4623      	mov	r3, r4
 80089fa:	469a      	mov	sl, r3
 80089fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a00:	b10a      	cbz	r2, 8008a06 <_vfiprintf_r+0x86>
 8008a02:	2a25      	cmp	r2, #37	@ 0x25
 8008a04:	d1f9      	bne.n	80089fa <_vfiprintf_r+0x7a>
 8008a06:	ebba 0b04 	subs.w	fp, sl, r4
 8008a0a:	d00b      	beq.n	8008a24 <_vfiprintf_r+0xa4>
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	4622      	mov	r2, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff ffa1 	bl	800895a <__sfputs_r>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	f000 80a7 	beq.w	8008b6c <_vfiprintf_r+0x1ec>
 8008a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a20:	445a      	add	r2, fp
 8008a22:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a24:	f89a 3000 	ldrb.w	r3, [sl]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 809f 	beq.w	8008b6c <_vfiprintf_r+0x1ec>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a38:	f10a 0a01 	add.w	sl, sl, #1
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a44:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a46:	4654      	mov	r4, sl
 8008a48:	2205      	movs	r2, #5
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	4853      	ldr	r0, [pc, #332]	@ (8008b9c <_vfiprintf_r+0x21c>)
 8008a50:	f7f7 fbe6 	bl	8000220 <memchr>
 8008a54:	9a04      	ldr	r2, [sp, #16]
 8008a56:	b9d8      	cbnz	r0, 8008a90 <_vfiprintf_r+0x110>
 8008a58:	06d1      	lsls	r1, r2, #27
 8008a5a:	bf44      	itt	mi
 8008a5c:	2320      	movmi	r3, #32
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a62:	0713      	lsls	r3, r2, #28
 8008a64:	bf44      	itt	mi
 8008a66:	232b      	movmi	r3, #43	@ 0x2b
 8008a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a72:	d015      	beq.n	8008aa0 <_vfiprintf_r+0x120>
 8008a74:	9a07      	ldr	r2, [sp, #28]
 8008a76:	4654      	mov	r4, sl
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a84:	3b30      	subs	r3, #48	@ 0x30
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d94b      	bls.n	8008b22 <_vfiprintf_r+0x1a2>
 8008a8a:	b1b0      	cbz	r0, 8008aba <_vfiprintf_r+0x13a>
 8008a8c:	9207      	str	r2, [sp, #28]
 8008a8e:	e014      	b.n	8008aba <_vfiprintf_r+0x13a>
 8008a90:	eba0 0308 	sub.w	r3, r0, r8
 8008a94:	fa09 f303 	lsl.w	r3, r9, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	46a2      	mov	sl, r4
 8008a9e:	e7d2      	b.n	8008a46 <_vfiprintf_r+0xc6>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	1d19      	adds	r1, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9103      	str	r1, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfbb      	ittet	lt
 8008aac:	425b      	neglt	r3, r3
 8008aae:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab2:	9307      	strge	r3, [sp, #28]
 8008ab4:	9307      	strlt	r3, [sp, #28]
 8008ab6:	bfb8      	it	lt
 8008ab8:	9204      	strlt	r2, [sp, #16]
 8008aba:	7823      	ldrb	r3, [r4, #0]
 8008abc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008abe:	d10a      	bne.n	8008ad6 <_vfiprintf_r+0x156>
 8008ac0:	7863      	ldrb	r3, [r4, #1]
 8008ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ac4:	d132      	bne.n	8008b2c <_vfiprintf_r+0x1ac>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	9203      	str	r2, [sp, #12]
 8008ace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ad2:	3402      	adds	r4, #2
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bac <_vfiprintf_r+0x22c>
 8008ada:	7821      	ldrb	r1, [r4, #0]
 8008adc:	2203      	movs	r2, #3
 8008ade:	4650      	mov	r0, sl
 8008ae0:	f7f7 fb9e 	bl	8000220 <memchr>
 8008ae4:	b138      	cbz	r0, 8008af6 <_vfiprintf_r+0x176>
 8008ae6:	9b04      	ldr	r3, [sp, #16]
 8008ae8:	eba0 000a 	sub.w	r0, r0, sl
 8008aec:	2240      	movs	r2, #64	@ 0x40
 8008aee:	4082      	lsls	r2, r0
 8008af0:	4313      	orrs	r3, r2
 8008af2:	3401      	adds	r4, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afa:	4829      	ldr	r0, [pc, #164]	@ (8008ba0 <_vfiprintf_r+0x220>)
 8008afc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b00:	2206      	movs	r2, #6
 8008b02:	f7f7 fb8d 	bl	8000220 <memchr>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d03f      	beq.n	8008b8a <_vfiprintf_r+0x20a>
 8008b0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ba4 <_vfiprintf_r+0x224>)
 8008b0c:	bb1b      	cbnz	r3, 8008b56 <_vfiprintf_r+0x1d6>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	3307      	adds	r3, #7
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	3308      	adds	r3, #8
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	443b      	add	r3, r7
 8008b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b20:	e76a      	b.n	80089f8 <_vfiprintf_r+0x78>
 8008b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b26:	460c      	mov	r4, r1
 8008b28:	2001      	movs	r0, #1
 8008b2a:	e7a8      	b.n	8008a7e <_vfiprintf_r+0xfe>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	3401      	adds	r4, #1
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	4619      	mov	r1, r3
 8008b34:	f04f 0c0a 	mov.w	ip, #10
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3e:	3a30      	subs	r2, #48	@ 0x30
 8008b40:	2a09      	cmp	r2, #9
 8008b42:	d903      	bls.n	8008b4c <_vfiprintf_r+0x1cc>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0c6      	beq.n	8008ad6 <_vfiprintf_r+0x156>
 8008b48:	9105      	str	r1, [sp, #20]
 8008b4a:	e7c4      	b.n	8008ad6 <_vfiprintf_r+0x156>
 8008b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b50:	4604      	mov	r4, r0
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7f0      	b.n	8008b38 <_vfiprintf_r+0x1b8>
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4b12      	ldr	r3, [pc, #72]	@ (8008ba8 <_vfiprintf_r+0x228>)
 8008b5e:	a904      	add	r1, sp, #16
 8008b60:	4630      	mov	r0, r6
 8008b62:	f3af 8000 	nop.w
 8008b66:	4607      	mov	r7, r0
 8008b68:	1c78      	adds	r0, r7, #1
 8008b6a:	d1d6      	bne.n	8008b1a <_vfiprintf_r+0x19a>
 8008b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b6e:	07d9      	lsls	r1, r3, #31
 8008b70:	d405      	bmi.n	8008b7e <_vfiprintf_r+0x1fe>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	059a      	lsls	r2, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_vfiprintf_r+0x1fe>
 8008b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b7a:	f7ff fc85 	bl	8008488 <__retarget_lock_release_recursive>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	065b      	lsls	r3, r3, #25
 8008b82:	f53f af1f 	bmi.w	80089c4 <_vfiprintf_r+0x44>
 8008b86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b88:	e71e      	b.n	80089c8 <_vfiprintf_r+0x48>
 8008b8a:	ab03      	add	r3, sp, #12
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4b05      	ldr	r3, [pc, #20]	@ (8008ba8 <_vfiprintf_r+0x228>)
 8008b92:	a904      	add	r1, sp, #16
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f879 	bl	8008c8c <_printf_i>
 8008b9a:	e7e4      	b.n	8008b66 <_vfiprintf_r+0x1e6>
 8008b9c:	08009730 	.word	0x08009730
 8008ba0:	0800973a 	.word	0x0800973a
 8008ba4:	00000000 	.word	0x00000000
 8008ba8:	0800895b 	.word	0x0800895b
 8008bac:	08009736 	.word	0x08009736

08008bb0 <_printf_common>:
 8008bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	4698      	mov	r8, r3
 8008bb8:	688a      	ldr	r2, [r1, #8]
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	bfb8      	it	lt
 8008bc4:	4613      	movlt	r3, r2
 8008bc6:	6033      	str	r3, [r6, #0]
 8008bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bcc:	4607      	mov	r7, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	b10a      	cbz	r2, 8008bd6 <_printf_common+0x26>
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	0699      	lsls	r1, r3, #26
 8008bda:	bf42      	ittt	mi
 8008bdc:	6833      	ldrmi	r3, [r6, #0]
 8008bde:	3302      	addmi	r3, #2
 8008be0:	6033      	strmi	r3, [r6, #0]
 8008be2:	6825      	ldr	r5, [r4, #0]
 8008be4:	f015 0506 	ands.w	r5, r5, #6
 8008be8:	d106      	bne.n	8008bf8 <_printf_common+0x48>
 8008bea:	f104 0a19 	add.w	sl, r4, #25
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	6832      	ldr	r2, [r6, #0]
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dc26      	bgt.n	8008c46 <_printf_common+0x96>
 8008bf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	3b00      	subs	r3, #0
 8008c00:	bf18      	it	ne
 8008c02:	2301      	movne	r3, #1
 8008c04:	0692      	lsls	r2, r2, #26
 8008c06:	d42b      	bmi.n	8008c60 <_printf_common+0xb0>
 8008c08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c8      	blx	r9
 8008c12:	3001      	adds	r0, #1
 8008c14:	d01e      	beq.n	8008c54 <_printf_common+0xa4>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	6922      	ldr	r2, [r4, #16]
 8008c1a:	f003 0306 	and.w	r3, r3, #6
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	bf02      	ittt	eq
 8008c22:	68e5      	ldreq	r5, [r4, #12]
 8008c24:	6833      	ldreq	r3, [r6, #0]
 8008c26:	1aed      	subeq	r5, r5, r3
 8008c28:	68a3      	ldr	r3, [r4, #8]
 8008c2a:	bf0c      	ite	eq
 8008c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c30:	2500      	movne	r5, #0
 8008c32:	4293      	cmp	r3, r2
 8008c34:	bfc4      	itt	gt
 8008c36:	1a9b      	subgt	r3, r3, r2
 8008c38:	18ed      	addgt	r5, r5, r3
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	341a      	adds	r4, #26
 8008c3e:	42b5      	cmp	r5, r6
 8008c40:	d11a      	bne.n	8008c78 <_printf_common+0xc8>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e008      	b.n	8008c58 <_printf_common+0xa8>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4652      	mov	r2, sl
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	47c8      	blx	r9
 8008c50:	3001      	adds	r0, #1
 8008c52:	d103      	bne.n	8008c5c <_printf_common+0xac>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	e7c6      	b.n	8008bee <_printf_common+0x3e>
 8008c60:	18e1      	adds	r1, r4, r3
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	2030      	movs	r0, #48	@ 0x30
 8008c66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c6a:	4422      	add	r2, r4
 8008c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c74:	3302      	adds	r3, #2
 8008c76:	e7c7      	b.n	8008c08 <_printf_common+0x58>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c8      	blx	r9
 8008c82:	3001      	adds	r0, #1
 8008c84:	d0e6      	beq.n	8008c54 <_printf_common+0xa4>
 8008c86:	3601      	adds	r6, #1
 8008c88:	e7d9      	b.n	8008c3e <_printf_common+0x8e>
	...

08008c8c <_printf_i>:
 8008c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	7e0f      	ldrb	r7, [r1, #24]
 8008c92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c94:	2f78      	cmp	r7, #120	@ 0x78
 8008c96:	4691      	mov	r9, r2
 8008c98:	4680      	mov	r8, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	469a      	mov	sl, r3
 8008c9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ca2:	d807      	bhi.n	8008cb4 <_printf_i+0x28>
 8008ca4:	2f62      	cmp	r7, #98	@ 0x62
 8008ca6:	d80a      	bhi.n	8008cbe <_printf_i+0x32>
 8008ca8:	2f00      	cmp	r7, #0
 8008caa:	f000 80d2 	beq.w	8008e52 <_printf_i+0x1c6>
 8008cae:	2f58      	cmp	r7, #88	@ 0x58
 8008cb0:	f000 80b9 	beq.w	8008e26 <_printf_i+0x19a>
 8008cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cbc:	e03a      	b.n	8008d34 <_printf_i+0xa8>
 8008cbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cc2:	2b15      	cmp	r3, #21
 8008cc4:	d8f6      	bhi.n	8008cb4 <_printf_i+0x28>
 8008cc6:	a101      	add	r1, pc, #4	@ (adr r1, 8008ccc <_printf_i+0x40>)
 8008cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ccc:	08008d25 	.word	0x08008d25
 8008cd0:	08008d39 	.word	0x08008d39
 8008cd4:	08008cb5 	.word	0x08008cb5
 8008cd8:	08008cb5 	.word	0x08008cb5
 8008cdc:	08008cb5 	.word	0x08008cb5
 8008ce0:	08008cb5 	.word	0x08008cb5
 8008ce4:	08008d39 	.word	0x08008d39
 8008ce8:	08008cb5 	.word	0x08008cb5
 8008cec:	08008cb5 	.word	0x08008cb5
 8008cf0:	08008cb5 	.word	0x08008cb5
 8008cf4:	08008cb5 	.word	0x08008cb5
 8008cf8:	08008e39 	.word	0x08008e39
 8008cfc:	08008d63 	.word	0x08008d63
 8008d00:	08008df3 	.word	0x08008df3
 8008d04:	08008cb5 	.word	0x08008cb5
 8008d08:	08008cb5 	.word	0x08008cb5
 8008d0c:	08008e5b 	.word	0x08008e5b
 8008d10:	08008cb5 	.word	0x08008cb5
 8008d14:	08008d63 	.word	0x08008d63
 8008d18:	08008cb5 	.word	0x08008cb5
 8008d1c:	08008cb5 	.word	0x08008cb5
 8008d20:	08008dfb 	.word	0x08008dfb
 8008d24:	6833      	ldr	r3, [r6, #0]
 8008d26:	1d1a      	adds	r2, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6032      	str	r2, [r6, #0]
 8008d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d34:	2301      	movs	r3, #1
 8008d36:	e09d      	b.n	8008e74 <_printf_i+0x1e8>
 8008d38:	6833      	ldr	r3, [r6, #0]
 8008d3a:	6820      	ldr	r0, [r4, #0]
 8008d3c:	1d19      	adds	r1, r3, #4
 8008d3e:	6031      	str	r1, [r6, #0]
 8008d40:	0606      	lsls	r6, r0, #24
 8008d42:	d501      	bpl.n	8008d48 <_printf_i+0xbc>
 8008d44:	681d      	ldr	r5, [r3, #0]
 8008d46:	e003      	b.n	8008d50 <_printf_i+0xc4>
 8008d48:	0645      	lsls	r5, r0, #25
 8008d4a:	d5fb      	bpl.n	8008d44 <_printf_i+0xb8>
 8008d4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	da03      	bge.n	8008d5c <_printf_i+0xd0>
 8008d54:	232d      	movs	r3, #45	@ 0x2d
 8008d56:	426d      	negs	r5, r5
 8008d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d5c:	4859      	ldr	r0, [pc, #356]	@ (8008ec4 <_printf_i+0x238>)
 8008d5e:	230a      	movs	r3, #10
 8008d60:	e011      	b.n	8008d86 <_printf_i+0xfa>
 8008d62:	6821      	ldr	r1, [r4, #0]
 8008d64:	6833      	ldr	r3, [r6, #0]
 8008d66:	0608      	lsls	r0, r1, #24
 8008d68:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d6c:	d402      	bmi.n	8008d74 <_printf_i+0xe8>
 8008d6e:	0649      	lsls	r1, r1, #25
 8008d70:	bf48      	it	mi
 8008d72:	b2ad      	uxthmi	r5, r5
 8008d74:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d76:	4853      	ldr	r0, [pc, #332]	@ (8008ec4 <_printf_i+0x238>)
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	bf14      	ite	ne
 8008d7c:	230a      	movne	r3, #10
 8008d7e:	2308      	moveq	r3, #8
 8008d80:	2100      	movs	r1, #0
 8008d82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d86:	6866      	ldr	r6, [r4, #4]
 8008d88:	60a6      	str	r6, [r4, #8]
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	bfa2      	ittt	ge
 8008d8e:	6821      	ldrge	r1, [r4, #0]
 8008d90:	f021 0104 	bicge.w	r1, r1, #4
 8008d94:	6021      	strge	r1, [r4, #0]
 8008d96:	b90d      	cbnz	r5, 8008d9c <_printf_i+0x110>
 8008d98:	2e00      	cmp	r6, #0
 8008d9a:	d04b      	beq.n	8008e34 <_printf_i+0x1a8>
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008da2:	fb03 5711 	mls	r7, r3, r1, r5
 8008da6:	5dc7      	ldrb	r7, [r0, r7]
 8008da8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dac:	462f      	mov	r7, r5
 8008dae:	42bb      	cmp	r3, r7
 8008db0:	460d      	mov	r5, r1
 8008db2:	d9f4      	bls.n	8008d9e <_printf_i+0x112>
 8008db4:	2b08      	cmp	r3, #8
 8008db6:	d10b      	bne.n	8008dd0 <_printf_i+0x144>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	07df      	lsls	r7, r3, #31
 8008dbc:	d508      	bpl.n	8008dd0 <_printf_i+0x144>
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	6861      	ldr	r1, [r4, #4]
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	bfde      	ittt	le
 8008dc6:	2330      	movle	r3, #48	@ 0x30
 8008dc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008dcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dd0:	1b92      	subs	r2, r2, r6
 8008dd2:	6122      	str	r2, [r4, #16]
 8008dd4:	f8cd a000 	str.w	sl, [sp]
 8008dd8:	464b      	mov	r3, r9
 8008dda:	aa03      	add	r2, sp, #12
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4640      	mov	r0, r8
 8008de0:	f7ff fee6 	bl	8008bb0 <_printf_common>
 8008de4:	3001      	adds	r0, #1
 8008de6:	d14a      	bne.n	8008e7e <_printf_i+0x1f2>
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dec:	b004      	add	sp, #16
 8008dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	f043 0320 	orr.w	r3, r3, #32
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	4833      	ldr	r0, [pc, #204]	@ (8008ec8 <_printf_i+0x23c>)
 8008dfc:	2778      	movs	r7, #120	@ 0x78
 8008dfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	6831      	ldr	r1, [r6, #0]
 8008e06:	061f      	lsls	r7, r3, #24
 8008e08:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e0c:	d402      	bmi.n	8008e14 <_printf_i+0x188>
 8008e0e:	065f      	lsls	r7, r3, #25
 8008e10:	bf48      	it	mi
 8008e12:	b2ad      	uxthmi	r5, r5
 8008e14:	6031      	str	r1, [r6, #0]
 8008e16:	07d9      	lsls	r1, r3, #31
 8008e18:	bf44      	itt	mi
 8008e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e1e:	6023      	strmi	r3, [r4, #0]
 8008e20:	b11d      	cbz	r5, 8008e2a <_printf_i+0x19e>
 8008e22:	2310      	movs	r3, #16
 8008e24:	e7ac      	b.n	8008d80 <_printf_i+0xf4>
 8008e26:	4827      	ldr	r0, [pc, #156]	@ (8008ec4 <_printf_i+0x238>)
 8008e28:	e7e9      	b.n	8008dfe <_printf_i+0x172>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	f023 0320 	bic.w	r3, r3, #32
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	e7f6      	b.n	8008e22 <_printf_i+0x196>
 8008e34:	4616      	mov	r6, r2
 8008e36:	e7bd      	b.n	8008db4 <_printf_i+0x128>
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	6825      	ldr	r5, [r4, #0]
 8008e3c:	6961      	ldr	r1, [r4, #20]
 8008e3e:	1d18      	adds	r0, r3, #4
 8008e40:	6030      	str	r0, [r6, #0]
 8008e42:	062e      	lsls	r6, r5, #24
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0x1c0>
 8008e48:	6019      	str	r1, [r3, #0]
 8008e4a:	e002      	b.n	8008e52 <_printf_i+0x1c6>
 8008e4c:	0668      	lsls	r0, r5, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0x1bc>
 8008e50:	8019      	strh	r1, [r3, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	4616      	mov	r6, r2
 8008e58:	e7bc      	b.n	8008dd4 <_printf_i+0x148>
 8008e5a:	6833      	ldr	r3, [r6, #0]
 8008e5c:	1d1a      	adds	r2, r3, #4
 8008e5e:	6032      	str	r2, [r6, #0]
 8008e60:	681e      	ldr	r6, [r3, #0]
 8008e62:	6862      	ldr	r2, [r4, #4]
 8008e64:	2100      	movs	r1, #0
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7f7 f9da 	bl	8000220 <memchr>
 8008e6c:	b108      	cbz	r0, 8008e72 <_printf_i+0x1e6>
 8008e6e:	1b80      	subs	r0, r0, r6
 8008e70:	6060      	str	r0, [r4, #4]
 8008e72:	6863      	ldr	r3, [r4, #4]
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	2300      	movs	r3, #0
 8008e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e7c:	e7aa      	b.n	8008dd4 <_printf_i+0x148>
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	4632      	mov	r2, r6
 8008e82:	4649      	mov	r1, r9
 8008e84:	4640      	mov	r0, r8
 8008e86:	47d0      	blx	sl
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d0ad      	beq.n	8008de8 <_printf_i+0x15c>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	079b      	lsls	r3, r3, #30
 8008e90:	d413      	bmi.n	8008eba <_printf_i+0x22e>
 8008e92:	68e0      	ldr	r0, [r4, #12]
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	4298      	cmp	r0, r3
 8008e98:	bfb8      	it	lt
 8008e9a:	4618      	movlt	r0, r3
 8008e9c:	e7a6      	b.n	8008dec <_printf_i+0x160>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	47d0      	blx	sl
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d09d      	beq.n	8008de8 <_printf_i+0x15c>
 8008eac:	3501      	adds	r5, #1
 8008eae:	68e3      	ldr	r3, [r4, #12]
 8008eb0:	9903      	ldr	r1, [sp, #12]
 8008eb2:	1a5b      	subs	r3, r3, r1
 8008eb4:	42ab      	cmp	r3, r5
 8008eb6:	dcf2      	bgt.n	8008e9e <_printf_i+0x212>
 8008eb8:	e7eb      	b.n	8008e92 <_printf_i+0x206>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	f104 0619 	add.w	r6, r4, #25
 8008ec0:	e7f5      	b.n	8008eae <_printf_i+0x222>
 8008ec2:	bf00      	nop
 8008ec4:	08009741 	.word	0x08009741
 8008ec8:	08009752 	.word	0x08009752

08008ecc <__swbuf_r>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	460e      	mov	r6, r1
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	b118      	cbz	r0, 8008ede <__swbuf_r+0x12>
 8008ed6:	6a03      	ldr	r3, [r0, #32]
 8008ed8:	b90b      	cbnz	r3, 8008ede <__swbuf_r+0x12>
 8008eda:	f7ff f9af 	bl	800823c <__sinit>
 8008ede:	69a3      	ldr	r3, [r4, #24]
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	071a      	lsls	r2, r3, #28
 8008ee6:	d501      	bpl.n	8008eec <__swbuf_r+0x20>
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	b943      	cbnz	r3, 8008efe <__swbuf_r+0x32>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f82a 	bl	8008f48 <__swsetup_r>
 8008ef4:	b118      	cbz	r0, 8008efe <__swbuf_r+0x32>
 8008ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8008efa:	4638      	mov	r0, r7
 8008efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	1a98      	subs	r0, r3, r2
 8008f04:	6963      	ldr	r3, [r4, #20]
 8008f06:	b2f6      	uxtb	r6, r6
 8008f08:	4283      	cmp	r3, r0
 8008f0a:	4637      	mov	r7, r6
 8008f0c:	dc05      	bgt.n	8008f1a <__swbuf_r+0x4e>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7ff f8cb 	bl	80080ac <_fflush_r>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d1ed      	bne.n	8008ef6 <__swbuf_r+0x2a>
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	60a3      	str	r3, [r4, #8]
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	6022      	str	r2, [r4, #0]
 8008f26:	701e      	strb	r6, [r3, #0]
 8008f28:	6962      	ldr	r2, [r4, #20]
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d004      	beq.n	8008f3a <__swbuf_r+0x6e>
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	07db      	lsls	r3, r3, #31
 8008f34:	d5e1      	bpl.n	8008efa <__swbuf_r+0x2e>
 8008f36:	2e0a      	cmp	r6, #10
 8008f38:	d1df      	bne.n	8008efa <__swbuf_r+0x2e>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7ff f8b5 	bl	80080ac <_fflush_r>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0d9      	beq.n	8008efa <__swbuf_r+0x2e>
 8008f46:	e7d6      	b.n	8008ef6 <__swbuf_r+0x2a>

08008f48 <__swsetup_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4b29      	ldr	r3, [pc, #164]	@ (8008ff0 <__swsetup_r+0xa8>)
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	460c      	mov	r4, r1
 8008f52:	b118      	cbz	r0, 8008f5c <__swsetup_r+0x14>
 8008f54:	6a03      	ldr	r3, [r0, #32]
 8008f56:	b90b      	cbnz	r3, 8008f5c <__swsetup_r+0x14>
 8008f58:	f7ff f970 	bl	800823c <__sinit>
 8008f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f60:	0719      	lsls	r1, r3, #28
 8008f62:	d422      	bmi.n	8008faa <__swsetup_r+0x62>
 8008f64:	06da      	lsls	r2, r3, #27
 8008f66:	d407      	bmi.n	8008f78 <__swsetup_r+0x30>
 8008f68:	2209      	movs	r2, #9
 8008f6a:	602a      	str	r2, [r5, #0]
 8008f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	f04f 30ff 	mov.w	r0, #4294967295
 8008f76:	e033      	b.n	8008fe0 <__swsetup_r+0x98>
 8008f78:	0758      	lsls	r0, r3, #29
 8008f7a:	d512      	bpl.n	8008fa2 <__swsetup_r+0x5a>
 8008f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f7e:	b141      	cbz	r1, 8008f92 <__swsetup_r+0x4a>
 8008f80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f84:	4299      	cmp	r1, r3
 8008f86:	d002      	beq.n	8008f8e <__swsetup_r+0x46>
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f7ff fa7f 	bl	800848c <_free_r>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f98:	81a3      	strh	r3, [r4, #12]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6063      	str	r3, [r4, #4]
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f043 0308 	orr.w	r3, r3, #8
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	b94b      	cbnz	r3, 8008fc2 <__swsetup_r+0x7a>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb8:	d003      	beq.n	8008fc2 <__swsetup_r+0x7a>
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f000 f8a5 	bl	800910c <__smakebuf_r>
 8008fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc6:	f013 0201 	ands.w	r2, r3, #1
 8008fca:	d00a      	beq.n	8008fe2 <__swsetup_r+0x9a>
 8008fcc:	2200      	movs	r2, #0
 8008fce:	60a2      	str	r2, [r4, #8]
 8008fd0:	6962      	ldr	r2, [r4, #20]
 8008fd2:	4252      	negs	r2, r2
 8008fd4:	61a2      	str	r2, [r4, #24]
 8008fd6:	6922      	ldr	r2, [r4, #16]
 8008fd8:	b942      	cbnz	r2, 8008fec <__swsetup_r+0xa4>
 8008fda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fde:	d1c5      	bne.n	8008f6c <__swsetup_r+0x24>
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
 8008fe2:	0799      	lsls	r1, r3, #30
 8008fe4:	bf58      	it	pl
 8008fe6:	6962      	ldrpl	r2, [r4, #20]
 8008fe8:	60a2      	str	r2, [r4, #8]
 8008fea:	e7f4      	b.n	8008fd6 <__swsetup_r+0x8e>
 8008fec:	2000      	movs	r0, #0
 8008fee:	e7f7      	b.n	8008fe0 <__swsetup_r+0x98>
 8008ff0:	20000044 	.word	0x20000044

08008ff4 <memmove>:
 8008ff4:	4288      	cmp	r0, r1
 8008ff6:	b510      	push	{r4, lr}
 8008ff8:	eb01 0402 	add.w	r4, r1, r2
 8008ffc:	d902      	bls.n	8009004 <memmove+0x10>
 8008ffe:	4284      	cmp	r4, r0
 8009000:	4623      	mov	r3, r4
 8009002:	d807      	bhi.n	8009014 <memmove+0x20>
 8009004:	1e43      	subs	r3, r0, #1
 8009006:	42a1      	cmp	r1, r4
 8009008:	d008      	beq.n	800901c <memmove+0x28>
 800900a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800900e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009012:	e7f8      	b.n	8009006 <memmove+0x12>
 8009014:	4402      	add	r2, r0
 8009016:	4601      	mov	r1, r0
 8009018:	428a      	cmp	r2, r1
 800901a:	d100      	bne.n	800901e <memmove+0x2a>
 800901c:	bd10      	pop	{r4, pc}
 800901e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009026:	e7f7      	b.n	8009018 <memmove+0x24>

08009028 <_sbrk_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d06      	ldr	r5, [pc, #24]	@ (8009044 <_sbrk_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7f8 f910 	bl	8001258 <_sbrk>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_sbrk_r+0x1a>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_sbrk_r+0x1a>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	2000268c 	.word	0x2000268c

08009048 <memcpy>:
 8009048:	440a      	add	r2, r1
 800904a:	4291      	cmp	r1, r2
 800904c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009050:	d100      	bne.n	8009054 <memcpy+0xc>
 8009052:	4770      	bx	lr
 8009054:	b510      	push	{r4, lr}
 8009056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800905a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800905e:	4291      	cmp	r1, r2
 8009060:	d1f9      	bne.n	8009056 <memcpy+0xe>
 8009062:	bd10      	pop	{r4, pc}

08009064 <_realloc_r>:
 8009064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009068:	4680      	mov	r8, r0
 800906a:	4615      	mov	r5, r2
 800906c:	460c      	mov	r4, r1
 800906e:	b921      	cbnz	r1, 800907a <_realloc_r+0x16>
 8009070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4611      	mov	r1, r2
 8009076:	f7ff ba75 	b.w	8008564 <_malloc_r>
 800907a:	b92a      	cbnz	r2, 8009088 <_realloc_r+0x24>
 800907c:	f7ff fa06 	bl	800848c <_free_r>
 8009080:	2400      	movs	r4, #0
 8009082:	4620      	mov	r0, r4
 8009084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009088:	f000 f89e 	bl	80091c8 <_malloc_usable_size_r>
 800908c:	4285      	cmp	r5, r0
 800908e:	4606      	mov	r6, r0
 8009090:	d802      	bhi.n	8009098 <_realloc_r+0x34>
 8009092:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009096:	d8f4      	bhi.n	8009082 <_realloc_r+0x1e>
 8009098:	4629      	mov	r1, r5
 800909a:	4640      	mov	r0, r8
 800909c:	f7ff fa62 	bl	8008564 <_malloc_r>
 80090a0:	4607      	mov	r7, r0
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d0ec      	beq.n	8009080 <_realloc_r+0x1c>
 80090a6:	42b5      	cmp	r5, r6
 80090a8:	462a      	mov	r2, r5
 80090aa:	4621      	mov	r1, r4
 80090ac:	bf28      	it	cs
 80090ae:	4632      	movcs	r2, r6
 80090b0:	f7ff ffca 	bl	8009048 <memcpy>
 80090b4:	4621      	mov	r1, r4
 80090b6:	4640      	mov	r0, r8
 80090b8:	f7ff f9e8 	bl	800848c <_free_r>
 80090bc:	463c      	mov	r4, r7
 80090be:	e7e0      	b.n	8009082 <_realloc_r+0x1e>

080090c0 <__swhatbuf_r>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c8:	2900      	cmp	r1, #0
 80090ca:	b096      	sub	sp, #88	@ 0x58
 80090cc:	4615      	mov	r5, r2
 80090ce:	461e      	mov	r6, r3
 80090d0:	da0d      	bge.n	80090ee <__swhatbuf_r+0x2e>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090d8:	f04f 0100 	mov.w	r1, #0
 80090dc:	bf14      	ite	ne
 80090de:	2340      	movne	r3, #64	@ 0x40
 80090e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090e4:	2000      	movs	r0, #0
 80090e6:	6031      	str	r1, [r6, #0]
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	b016      	add	sp, #88	@ 0x58
 80090ec:	bd70      	pop	{r4, r5, r6, pc}
 80090ee:	466a      	mov	r2, sp
 80090f0:	f000 f848 	bl	8009184 <_fstat_r>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	dbec      	blt.n	80090d2 <__swhatbuf_r+0x12>
 80090f8:	9901      	ldr	r1, [sp, #4]
 80090fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009102:	4259      	negs	r1, r3
 8009104:	4159      	adcs	r1, r3
 8009106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800910a:	e7eb      	b.n	80090e4 <__swhatbuf_r+0x24>

0800910c <__smakebuf_r>:
 800910c:	898b      	ldrh	r3, [r1, #12]
 800910e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009110:	079d      	lsls	r5, r3, #30
 8009112:	4606      	mov	r6, r0
 8009114:	460c      	mov	r4, r1
 8009116:	d507      	bpl.n	8009128 <__smakebuf_r+0x1c>
 8009118:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	2301      	movs	r3, #1
 8009122:	6163      	str	r3, [r4, #20]
 8009124:	b003      	add	sp, #12
 8009126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009128:	ab01      	add	r3, sp, #4
 800912a:	466a      	mov	r2, sp
 800912c:	f7ff ffc8 	bl	80090c0 <__swhatbuf_r>
 8009130:	9f00      	ldr	r7, [sp, #0]
 8009132:	4605      	mov	r5, r0
 8009134:	4639      	mov	r1, r7
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff fa14 	bl	8008564 <_malloc_r>
 800913c:	b948      	cbnz	r0, 8009152 <__smakebuf_r+0x46>
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	059a      	lsls	r2, r3, #22
 8009144:	d4ee      	bmi.n	8009124 <__smakebuf_r+0x18>
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	f043 0302 	orr.w	r3, r3, #2
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	e7e2      	b.n	8009118 <__smakebuf_r+0xc>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	6020      	str	r0, [r4, #0]
 8009156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009162:	b15b      	cbz	r3, 800917c <__smakebuf_r+0x70>
 8009164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009168:	4630      	mov	r0, r6
 800916a:	f000 f81d 	bl	80091a8 <_isatty_r>
 800916e:	b128      	cbz	r0, 800917c <__smakebuf_r+0x70>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	431d      	orrs	r5, r3
 8009180:	81a5      	strh	r5, [r4, #12]
 8009182:	e7cf      	b.n	8009124 <__smakebuf_r+0x18>

08009184 <_fstat_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d07      	ldr	r5, [pc, #28]	@ (80091a4 <_fstat_r+0x20>)
 8009188:	2300      	movs	r3, #0
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	4611      	mov	r1, r2
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	f7f8 f839 	bl	8001208 <_fstat>
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	d102      	bne.n	80091a0 <_fstat_r+0x1c>
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	b103      	cbz	r3, 80091a0 <_fstat_r+0x1c>
 800919e:	6023      	str	r3, [r4, #0]
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
 80091a2:	bf00      	nop
 80091a4:	2000268c 	.word	0x2000268c

080091a8 <_isatty_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d06      	ldr	r5, [pc, #24]	@ (80091c4 <_isatty_r+0x1c>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	f7f8 f838 	bl	8001228 <_isatty>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_isatty_r+0x1a>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_isatty_r+0x1a>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	2000268c 	.word	0x2000268c

080091c8 <_malloc_usable_size_r>:
 80091c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091cc:	1f18      	subs	r0, r3, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfbc      	itt	lt
 80091d2:	580b      	ldrlt	r3, [r1, r0]
 80091d4:	18c0      	addlt	r0, r0, r3
 80091d6:	4770      	bx	lr

080091d8 <_init>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr

080091e4 <_fini>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	bf00      	nop
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr
